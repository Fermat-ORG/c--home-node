// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IopLocNet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iop.Locnet {

  /// <summary>Holder for reflection information generated from IopLocNet.proto</summary>
  public static partial class IopLocNetReflection {

    #region Descriptor
    /// <summary>File descriptor for IopLocNet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IopLocNetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9Jb3BMb2NOZXQucHJvdG8SCmlvcC5sb2NuZXQiRgoRTWVzc2FnZVdpdGhI",
            "ZWFkZXISDgoGaGVhZGVyGAEgASgHEiEKBGJvZHkYAiABKAsyEy5pb3AubG9j",
            "bmV0Lk1lc3NhZ2UidgoHTWVzc2FnZRIKCgJpZBgBIAEoDRImCgdyZXF1ZXN0",
            "GAIgASgLMhMuaW9wLmxvY25ldC5SZXF1ZXN0SAASKAoIcmVzcG9uc2UYAyAB",
            "KAsyFC5pb3AubG9jbmV0LlJlc3BvbnNlSABCDQoLTWVzc2FnZVR5cGUixAEK",
            "B1JlcXVlc3QSDwoHdmVyc2lvbhgBIAEoDBI3Cgxsb2NhbFNlcnZpY2UYAiAB",
            "KAsyHy5pb3AubG9jbmV0LkxvY2FsU2VydmljZVJlcXVlc3RIABIzCgpyZW1v",
            "dGVOb2RlGAMgASgLMh0uaW9wLmxvY25ldC5SZW1vdGVOb2RlUmVxdWVzdEgA",
            "EisKBmNsaWVudBgEIAEoCzIZLmlvcC5sb2NuZXQuQ2xpZW50UmVxdWVzdEgA",
            "Qg0KC1JlcXVlc3RUeXBlIoACCghSZXNwb25zZRIiCgZzdGF0dXMYASABKA4y",
            "Ei5pb3AubG9jbmV0LlN0YXR1cxIRCgl0aW1lc3RhbXAYAiABKBISDwoHZGV0",
            "YWlscxgDIAEoCRI4Cgxsb2NhbFNlcnZpY2UYBCABKAsyIC5pb3AubG9jbmV0",
            "LkxvY2FsU2VydmljZVJlc3BvbnNlSAASNAoKcmVtb3RlTm9kZRgFIAEoCzIe",
            "LmlvcC5sb2NuZXQuUmVtb3RlTm9kZVJlc3BvbnNlSAASLAoGY2xpZW50GAYg",
            "ASgLMhouaW9wLmxvY25ldC5DbGllbnRSZXNwb25zZUgAQg4KDFJlc3BvbnNl",
            "VHlwZSL7AQoTTG9jYWxTZXJ2aWNlUmVxdWVzdBI9Cg9yZWdpc3RlclNlcnZp",
            "Y2UYASABKAsyIi5pb3AubG9jbmV0LlJlZ2lzdGVyU2VydmljZVJlcXVlc3RI",
            "ABJBChFkZXJlZ2lzdGVyU2VydmljZRgCIAEoCzIkLmlvcC5sb2NuZXQuRGVy",
            "ZWdpc3RlclNlcnZpY2VSZXF1ZXN0SAASRwoNZ2V0TmVpZ2hib3VycxgDIAEo",
            "CzIuLmlvcC5sb2NuZXQuR2V0TmVpZ2hib3VyTm9kZXNCeURpc3RhbmNlUmVx",
            "dWVzdEgAQhkKF0xvY2FsU2VydmljZVJlcXVlc3RUeXBlIoACChRMb2NhbFNl",
            "cnZpY2VSZXNwb25zZRI+Cg9yZWdpc3RlclNlcnZpY2UYASABKAsyIy5pb3Au",
            "bG9jbmV0LlJlZ2lzdGVyU2VydmljZVJlc3BvbnNlSAASQgoRZGVyZWdpc3Rl",
            "clNlcnZpY2UYAiABKAsyJS5pb3AubG9jbmV0LkRlcmVnaXN0ZXJTZXJ2aWNl",
            "UmVzcG9uc2VIABJICg1nZXROZWlnaGJvdXJzGAMgASgLMi8uaW9wLmxvY25l",
            "dC5HZXROZWlnaGJvdXJOb2Rlc0J5RGlzdGFuY2VSZXNwb25zZUgAQhoKGExv",
            "Y2FsU2VydmljZVJlc3BvbnNlVHlwZSJECgtOb2RlUHJvZmlsZRIOCgZub2Rl",
            "SWQYASABKAwSJQoIY29udGFjdHMYAiADKAsyEy5pb3AubG9jbmV0LkNvbnRh",
            "Y3QiagoHQ29udGFjdBInCgRpcHY0GAEgASgLMhcuaW9wLmxvY25ldC5JcHY0",
            "QWRkcmVzc0gAEicKBGlwdjYYAiABKAsyFy5pb3AubG9jbmV0LklwdjZBZGRy",
            "ZXNzSABCDQoLQ29udGFjdFR5cGUiKQoLSXB2NEFkZHJlc3MSDAoEaG9zdBgB",
            "IAEoCRIMCgRwb3J0GAIgASgNIikKC0lwdjZBZGRyZXNzEgwKBGhvc3QYASAB",
            "KAkSDAoEcG9ydBgCIAEoDSJ0ChZSZWdpc3RlclNlcnZpY2VSZXF1ZXN0EiwK",
            "C3NlcnZpY2VUeXBlGAEgASgOMhcuaW9wLmxvY25ldC5TZXJ2aWNlVHlwZRIs",
            "Cgtub2RlUHJvZmlsZRgCIAEoCzIXLmlvcC5sb2NuZXQuTm9kZVByb2ZpbGUi",
            "GQoXUmVnaXN0ZXJTZXJ2aWNlUmVzcG9uc2UiSAoYRGVyZWdpc3RlclNlcnZp",
            "Y2VSZXF1ZXN0EiwKC3NlcnZpY2VUeXBlGAEgASgOMhcuaW9wLmxvY25ldC5T",
            "ZXJ2aWNlVHlwZSIbChlEZXJlZ2lzdGVyU2VydmljZVJlc3BvbnNlIiQKIkdl",
            "dE5laWdoYm91ck5vZGVzQnlEaXN0YW5jZVJlcXVlc3QiMgoLR3BzTG9jYXRp",
            "b24SEAoIbGF0aXR1ZGUYASABKA8SEQoJbG9uZ2l0dWRlGAIgASgPIl8KCE5v",
            "ZGVJbmZvEigKB3Byb2ZpbGUYASABKAsyFy5pb3AubG9jbmV0Lk5vZGVQcm9m",
            "aWxlEikKCGxvY2F0aW9uGAIgASgLMhcuaW9wLmxvY25ldC5HcHNMb2NhdGlv",
            "biJNCiNHZXROZWlnaGJvdXJOb2Rlc0J5RGlzdGFuY2VSZXNwb25zZRImCghu",
            "b2RlSW5mbxgBIAMoCzIULmlvcC5sb2NuZXQuTm9kZUluZm8i6wMKEVJlbW90",
            "ZU5vZGVSZXF1ZXN0EjoKD2FjY2VwdENvbGxlYWd1ZRgBIAEoCzIfLmlvcC5s",
            "b2NuZXQuQnVpbGROZXR3b3JrUmVxdWVzdEgAEjkKDnJlbmV3Q29sbGVhZ3Vl",
            "GAIgASgLMh8uaW9wLmxvY25ldC5CdWlsZE5ldHdvcmtSZXF1ZXN0SAASOgoP",
            "YWNjZXB0TmVpZ2hib3VyGAMgASgLMh8uaW9wLmxvY25ldC5CdWlsZE5ldHdv",
            "cmtSZXF1ZXN0SAASOQoOcmVuZXdOZWlnaGJvdXIYBCABKAsyHy5pb3AubG9j",
            "bmV0LkJ1aWxkTmV0d29ya1JlcXVlc3RIABJJChVnZXRDb2xsZWFndWVOb2Rl",
            "Q291bnQYBSABKAsyKC5pb3AubG9jbmV0LkdldENvbGxlYWd1ZU5vZGVDb3Vu",
            "dFJlcXVlc3RIABI7Cg5nZXRSYW5kb21Ob2RlcxgGIAEoCzIhLmlvcC5sb2Nu",
            "ZXQuR2V0UmFuZG9tTm9kZXNSZXF1ZXN0SAASRwoPZ2V0Q2xvc2VzdE5vZGVz",
            "GAcgASgLMiwuaW9wLmxvY25ldC5HZXRDbG9zZXN0Tm9kZXNCeURpc3RhbmNl",
            "UmVxdWVzdEgAQhcKFVJlbW90ZU5vZGVSZXF1ZXN0VHlwZSL0AwoSUmVtb3Rl",
            "Tm9kZVJlc3BvbnNlEjsKD2FjY2VwdENvbGxlYWd1ZRgBIAEoCzIgLmlvcC5s",
            "b2NuZXQuQnVpbGROZXR3b3JrUmVzcG9uc2VIABI6Cg5yZW5ld0NvbGxlYWd1",
            "ZRgCIAEoCzIgLmlvcC5sb2NuZXQuQnVpbGROZXR3b3JrUmVzcG9uc2VIABI7",
            "Cg9hY2NlcHROZWlnaGJvdXIYAyABKAsyIC5pb3AubG9jbmV0LkJ1aWxkTmV0",
            "d29ya1Jlc3BvbnNlSAASOgoOcmVuZXdOZWlnaGJvdXIYBCABKAsyIC5pb3Au",
            "bG9jbmV0LkJ1aWxkTmV0d29ya1Jlc3BvbnNlSAASSgoVZ2V0Q29sbGVhZ3Vl",
            "Tm9kZUNvdW50GAUgASgLMikuaW9wLmxvY25ldC5HZXRDb2xsZWFndWVOb2Rl",
            "Q291bnRSZXNwb25zZUgAEjwKDmdldFJhbmRvbU5vZGVzGAYgASgLMiIuaW9w",
            "LmxvY25ldC5HZXRSYW5kb21Ob2Rlc1Jlc3BvbnNlSAASSAoPZ2V0Q2xvc2Vz",
            "dE5vZGVzGAcgASgLMi0uaW9wLmxvY25ldC5HZXRDbG9zZXN0Tm9kZXNCeURp",
            "c3RhbmNlUmVzcG9uc2VIAEIYChZSZW1vdGVOb2RlUmVzcG9uc2VUeXBlIj0K",
            "E0J1aWxkTmV0d29ya1JlcXVlc3QSJgoIbm9kZUluZm8YASABKAsyFC5pb3Au",
            "bG9jbmV0Lk5vZGVJbmZvIigKFEJ1aWxkTmV0d29ya1Jlc3BvbnNlEhAKCGFj",
            "Y2VwdGVkGAEgASgIIh4KHEdldENvbGxlYWd1ZU5vZGVDb3VudFJlcXVlc3Qi",
            "MgodR2V0Q29sbGVhZ3VlTm9kZUNvdW50UmVzcG9uc2USEQoJbm9kZUNvdW50",
            "GAEgASgNIkgKFUdldFJhbmRvbU5vZGVzUmVxdWVzdBIUCgxtYXhOb2RlQ291",
            "bnQYASABKA0SGQoRaW5jbHVkZU5laWdoYm91cnMYAiABKAgiPQoWR2V0UmFu",
            "ZG9tTm9kZXNSZXNwb25zZRIjCgVub2RlcxgBIAMoCzIULmlvcC5sb2NuZXQu",
            "Tm9kZUluZm8ikwEKIEdldENsb3Nlc3ROb2Rlc0J5RGlzdGFuY2VSZXF1ZXN0",
            "EikKCGxvY2F0aW9uGAEgASgLMhcuaW9wLmxvY25ldC5HcHNMb2NhdGlvbhIT",
            "CgttYXhSYWRpdXNLbRgCIAEoAhIUCgxtYXhOb2RlQ291bnQYAyABKA0SGQoR",
            "aW5jbHVkZU5laWdoYm91cnMYBCABKAgiSAohR2V0Q2xvc2VzdE5vZGVzQnlE",
            "aXN0YW5jZVJlc3BvbnNlEiMKBW5vZGVzGAEgAygLMhQuaW9wLmxvY25ldC5O",
            "b2RlSW5mbyLxAQoNQ2xpZW50UmVxdWVzdBI1CgtnZXRTZXJ2aWNlcxgBIAEo",
            "CzIeLmlvcC5sb2NuZXQuR2V0U2VydmljZXNSZXF1ZXN0SAASSwoRZ2V0TmVp",
            "Z2hib3VyTm9kZXMYAiABKAsyLi5pb3AubG9jbmV0LkdldE5laWdoYm91ck5v",
            "ZGVzQnlEaXN0YW5jZVJlcXVlc3RIABJHCg9nZXRDbG9zZXN0Tm9kZXMYAyAB",
            "KAsyLC5pb3AubG9jbmV0LkdldENsb3Nlc3ROb2Rlc0J5RGlzdGFuY2VSZXF1",
            "ZXN0SABCEwoRQ2xpZW50UmVxdWVzdFR5cGUi9gEKDkNsaWVudFJlc3BvbnNl",
            "EjYKC2dldFNlcnZpY2VzGAEgASgLMh8uaW9wLmxvY25ldC5HZXRTZXJ2aWNl",
            "c1Jlc3BvbnNlSAASTAoRZ2V0TmVpZ2hib3VyTm9kZXMYAiABKAsyLy5pb3Au",
            "bG9jbmV0LkdldE5laWdoYm91ck5vZGVzQnlEaXN0YW5jZVJlc3BvbnNlSAAS",
            "SAoPZ2V0Q2xvc2VzdE5vZGVzGAMgASgLMi0uaW9wLmxvY25ldC5HZXRDbG9z",
            "ZXN0Tm9kZXNCeURpc3RhbmNlUmVzcG9uc2VIAEIUChJDbGllbnRSZXNwb25z",
            "ZVR5cGUiFAoSR2V0U2VydmljZXNSZXF1ZXN0IkAKE0dldFNlcnZpY2VzUmVz",
            "cG9uc2USKQoIc2VydmljZXMYASADKAsyFy5pb3AubG9jbmV0Lk5vZGVQcm9m",
            "aWxlKsIBCgZTdGF0dXMSDQoJU1RBVFVTX09LEAASHAoYRVJST1JfUFJPVE9D",
            "T0xfVklPTEFUSU9OEAESFQoRRVJST1JfVU5TVVBQT1JURUQQAhIWChJFUlJP",
            "Ul9VTkFVVEhPUklaRUQQBRISCg5FUlJPUl9CQURfUk9MRRAGEhIKDkVSUk9S",
            "X0lOVEVSTkFMEAgSGwoXRVJST1JfSU5WQUxJRF9TSUdOQVRVUkUQNBIXChNF",
            "UlJPUl9JTlZBTElEX1ZBTFVFEDYqXAoLU2VydmljZVR5cGUSCQoFVG9rZW4Q",
            "ABILCgdQcm9maWxlEAESDQoJUHJveGltaXR5EAISCQoFUmVsYXkQAxIOCgpS",
            "ZXB1dGF0aW9uEAQSCwoHTWludGluZxAFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Iop.Locnet.Status), typeof(global::Iop.Locnet.ServiceType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.MessageWithHeader), global::Iop.Locnet.MessageWithHeader.Parser, new[]{ "Header", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.Message), global::Iop.Locnet.Message.Parser, new[]{ "Id", "Request", "Response" }, new[]{ "MessageType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.Request), global::Iop.Locnet.Request.Parser, new[]{ "Version", "LocalService", "RemoteNode", "Client" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.Response), global::Iop.Locnet.Response.Parser, new[]{ "Status", "Timestamp", "Details", "LocalService", "RemoteNode", "Client" }, new[]{ "ResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.LocalServiceRequest), global::Iop.Locnet.LocalServiceRequest.Parser, new[]{ "RegisterService", "DeregisterService", "GetNeighbours" }, new[]{ "LocalServiceRequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.LocalServiceResponse), global::Iop.Locnet.LocalServiceResponse.Parser, new[]{ "RegisterService", "DeregisterService", "GetNeighbours" }, new[]{ "LocalServiceResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.NodeProfile), global::Iop.Locnet.NodeProfile.Parser, new[]{ "NodeId", "Contacts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.Contact), global::Iop.Locnet.Contact.Parser, new[]{ "Ipv4", "Ipv6" }, new[]{ "ContactType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.Ipv4Address), global::Iop.Locnet.Ipv4Address.Parser, new[]{ "Host", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.Ipv6Address), global::Iop.Locnet.Ipv6Address.Parser, new[]{ "Host", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.RegisterServiceRequest), global::Iop.Locnet.RegisterServiceRequest.Parser, new[]{ "ServiceType", "NodeProfile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.RegisterServiceResponse), global::Iop.Locnet.RegisterServiceResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.DeregisterServiceRequest), global::Iop.Locnet.DeregisterServiceRequest.Parser, new[]{ "ServiceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.DeregisterServiceResponse), global::Iop.Locnet.DeregisterServiceResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetNeighbourNodesByDistanceRequest), global::Iop.Locnet.GetNeighbourNodesByDistanceRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GpsLocation), global::Iop.Locnet.GpsLocation.Parser, new[]{ "Latitude", "Longitude" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.NodeInfo), global::Iop.Locnet.NodeInfo.Parser, new[]{ "Profile", "Location" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetNeighbourNodesByDistanceResponse), global::Iop.Locnet.GetNeighbourNodesByDistanceResponse.Parser, new[]{ "NodeInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.RemoteNodeRequest), global::Iop.Locnet.RemoteNodeRequest.Parser, new[]{ "AcceptColleague", "RenewColleague", "AcceptNeighbour", "RenewNeighbour", "GetColleagueNodeCount", "GetRandomNodes", "GetClosestNodes" }, new[]{ "RemoteNodeRequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.RemoteNodeResponse), global::Iop.Locnet.RemoteNodeResponse.Parser, new[]{ "AcceptColleague", "RenewColleague", "AcceptNeighbour", "RenewNeighbour", "GetColleagueNodeCount", "GetRandomNodes", "GetClosestNodes" }, new[]{ "RemoteNodeResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.BuildNetworkRequest), global::Iop.Locnet.BuildNetworkRequest.Parser, new[]{ "NodeInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.BuildNetworkResponse), global::Iop.Locnet.BuildNetworkResponse.Parser, new[]{ "Accepted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetColleagueNodeCountRequest), global::Iop.Locnet.GetColleagueNodeCountRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetColleagueNodeCountResponse), global::Iop.Locnet.GetColleagueNodeCountResponse.Parser, new[]{ "NodeCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetRandomNodesRequest), global::Iop.Locnet.GetRandomNodesRequest.Parser, new[]{ "MaxNodeCount", "IncludeNeighbours" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetRandomNodesResponse), global::Iop.Locnet.GetRandomNodesResponse.Parser, new[]{ "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetClosestNodesByDistanceRequest), global::Iop.Locnet.GetClosestNodesByDistanceRequest.Parser, new[]{ "Location", "MaxRadiusKm", "MaxNodeCount", "IncludeNeighbours" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetClosestNodesByDistanceResponse), global::Iop.Locnet.GetClosestNodesByDistanceResponse.Parser, new[]{ "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.ClientRequest), global::Iop.Locnet.ClientRequest.Parser, new[]{ "GetServices", "GetNeighbourNodes", "GetClosestNodes" }, new[]{ "ClientRequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.ClientResponse), global::Iop.Locnet.ClientResponse.Parser, new[]{ "GetServices", "GetNeighbourNodes", "GetClosestNodes" }, new[]{ "ClientResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetServicesRequest), global::Iop.Locnet.GetServicesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Locnet.GetServicesResponse), global::Iop.Locnet.GetServicesResponse.Parser, new[]{ "Services" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  TODO remove commented values if confirmed to be unused
  /// </summary>
  public enum Status {
    /// <summary>
    ///  General codes that can be returned to any message.
    /// </summary>
    [pbr::OriginalName("STATUS_OK")] Ok = 0,
    /// <summary>
    ///  The incoming request does not follow the protocol.
    /// </summary>
    [pbr::OriginalName("ERROR_PROTOCOL_VIOLATION")] ErrorProtocolViolation = 1,
    /// <summary>
    ///  The peer does not support the request. This is returned when a peer sends a message with an unsupported protocol version.
    /// </summary>
    [pbr::OriginalName("ERROR_UNSUPPORTED")] ErrorUnsupported = 2,
    /// <summary>
    ///  Within conversation, some server roles require authorization of the peer before certain requests are allowed.
    /// </summary>
    [pbr::OriginalName("ERROR_UNAUTHORIZED")] ErrorUnauthorized = 5,
    /// <summary>
    ///  If a request is sent to a port that does not handle the specific role, this error is returned.
    /// </summary>
    [pbr::OriginalName("ERROR_BAD_ROLE")] ErrorBadRole = 6,
    /// <summary>
    ///   ERROR_BAD_CONVERSATION_STATUS = 7;               // The conversation status is different from what the message requires.
    /// </summary>
    [pbr::OriginalName("ERROR_INTERNAL")] ErrorInternal = 8,
    /// <summary>
    ///  Return codes specific to a request.
    ///   ERROR_QUOTA_EXCEEDED = 51;                       // The peer reached or exceeded prescribed limits.
    /// </summary>
    [pbr::OriginalName("ERROR_INVALID_SIGNATURE")] ErrorInvalidSignature = 52,
    /// <summary>
    ///   ERROR_NOT_FOUND = 53;                            // A referenced object was not found.
    /// </summary>
    [pbr::OriginalName("ERROR_INVALID_VALUE")] ErrorInvalidValue = 54,
  }

  public enum ServiceType {
    /// <summary>
    ///  TODO are low level "networks" directly reachable by clients?
    ///       If so, should be included here
    /// </summary>
    [pbr::OriginalName("Token")] Token = 0,
    [pbr::OriginalName("Profile")] Profile = 1,
    [pbr::OriginalName("Proximity")] Proximity = 2,
    [pbr::OriginalName("Relay")] Relay = 3,
    [pbr::OriginalName("Reputation")] Reputation = 4,
    [pbr::OriginalName("Minting")] Minting = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  This is complete message as it goes over the wire. It includes the 32-bit header with message length.
  ///
  ///  There is a 1 byte prefix because of Google Protobuf protocol, so the actual binary data for a message
  ///  with body size 4660 bytes would be:
  ///
  ///    0D 34 12 00 00
  ///
  ///  where 0x0D means type 'fixed32' (which value is 5) + index of 'header', which is 1 &lt;&lt; 3,
  ///  this is followed be the 4 byte sequence 34 12 00 00, which is little endian of 0x00001234, which is 4660 decimal.
  ///  Thus the total number of bytes sent over the wire for this message would be 4665 bytes.
  /// </summary>
  public sealed partial class MessageWithHeader : pb::IMessage<MessageWithHeader> {
    private static readonly pb::MessageParser<MessageWithHeader> _parser = new pb::MessageParser<MessageWithHeader>(() => new MessageWithHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageWithHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader(MessageWithHeader other) : this() {
      header_ = other.header_;
      Body = other.body_ != null ? other.Body.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader Clone() {
      return new MessageWithHeader(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private uint header_;
    /// <summary>
    ///  Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Iop.Locnet.Message body_;
    /// <summary>
    ///  Message itself.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.Message Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageWithHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageWithHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Header != 0) hash ^= Header.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Header != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Header);
      }
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Header != 0) {
        size += 1 + 4;
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageWithHeader other) {
      if (other == null) {
        return;
      }
      if (other.Header != 0) {
        Header = other.Header;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          body_ = new global::Iop.Locnet.Message();
        }
        Body.MergeFrom(other.Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Header = input.ReadFixed32();
            break;
          }
          case 18: {
            if (body_ == null) {
              body_ = new global::Iop.Locnet.Message();
            }
            input.ReadMessage(body_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Format of a single message.
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      id_ = other.id_;
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request.Clone();
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  Requestor defined message ID that the requestee has to return in the response. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.Request Request {
      get { return messageTypeCase_ == MessageTypeOneofCase.Request ? (global::Iop.Locnet.Request) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Request;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.Response Response {
      get { return messageTypeCase_ == MessageTypeOneofCase.Response ? (global::Iop.Locnet.Response) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Response;
      }
    }

    private object messageType_;
    /// <summary>Enum of possible cases for the "MessageType" oneof.</summary>
    public enum MessageTypeOneofCase {
      None = 0,
      Request = 2,
      Response = 3,
    }
    private MessageTypeOneofCase messageTypeCase_ = MessageTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTypeOneofCase MessageTypeCase {
      get { return messageTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      messageTypeCase_ = MessageTypeOneofCase.None;
      messageType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      if (MessageTypeCase != other.MessageTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Request) hash ^= Request.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Response) hash ^= Response.GetHashCode();
      hash ^= (int) messageTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        output.WriteRawTag(26);
        output.WriteMessage(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request;
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Iop.Locnet.Request subBuilder = new global::Iop.Locnet.Request();
            if (messageTypeCase_ == MessageTypeOneofCase.Request) {
              subBuilder.MergeFrom(Request);
            }
            input.ReadMessage(subBuilder);
            Request = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.Response subBuilder = new global::Iop.Locnet.Response();
            if (messageTypeCase_ == MessageTypeOneofCase.Response) {
              subBuilder.MergeFrom(Response);
            }
            input.ReadMessage(subBuilder);
            Response = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      version_ = other.version_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.LocalService:
          LocalService = other.LocalService.Clone();
          break;
        case RequestTypeOneofCase.RemoteNode:
          RemoteNode = other.RemoteNode.Clone();
          break;
        case RequestTypeOneofCase.Client:
          Client = other.Client.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. Protocol version specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localService" field.</summary>
    public const int LocalServiceFieldNumber = 2;
    /// <summary>
    ///  TODO is this construct OK with separate interfaces divided into different messages?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.LocalServiceRequest LocalService {
      get { return requestTypeCase_ == RequestTypeOneofCase.LocalService ? (global::Iop.Locnet.LocalServiceRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.LocalService;
      }
    }

    /// <summary>Field number for the "remoteNode" field.</summary>
    public const int RemoteNodeFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.RemoteNodeRequest RemoteNode {
      get { return requestTypeCase_ == RequestTypeOneofCase.RemoteNode ? (global::Iop.Locnet.RemoteNodeRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.RemoteNode;
      }
    }

    /// <summary>Field number for the "client" field.</summary>
    public const int ClientFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.ClientRequest Client {
      get { return requestTypeCase_ == RequestTypeOneofCase.Client ? (global::Iop.Locnet.ClientRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Client;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      LocalService = 2,
      RemoteNode = 3,
      Client = 4,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(LocalService, other.LocalService)) return false;
      if (!object.Equals(RemoteNode, other.RemoteNode)) return false;
      if (!object.Equals(Client, other.Client)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.LocalService) hash ^= LocalService.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.RemoteNode) hash ^= RemoteNode.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Client) hash ^= Client.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.LocalService) {
        output.WriteRawTag(18);
        output.WriteMessage(LocalService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.RemoteNode) {
        output.WriteRawTag(26);
        output.WriteMessage(RemoteNode);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Client) {
        output.WriteRawTag(34);
        output.WriteMessage(Client);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.LocalService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.RemoteNode) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoteNode);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Client) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Client);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.LocalService:
          LocalService = other.LocalService;
          break;
        case RequestTypeOneofCase.RemoteNode:
          RemoteNode = other.RemoteNode;
          break;
        case RequestTypeOneofCase.Client:
          Client = other.Client;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Locnet.LocalServiceRequest subBuilder = new global::Iop.Locnet.LocalServiceRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.LocalService) {
              subBuilder.MergeFrom(LocalService);
            }
            input.ReadMessage(subBuilder);
            LocalService = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.RemoteNodeRequest subBuilder = new global::Iop.Locnet.RemoteNodeRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.RemoteNode) {
              subBuilder.MergeFrom(RemoteNode);
            }
            input.ReadMessage(subBuilder);
            RemoteNode = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Locnet.ClientRequest subBuilder = new global::Iop.Locnet.ClientRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.Client) {
              subBuilder.MergeFrom(Client);
            }
            input.ReadMessage(subBuilder);
            Client = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  To every request there is a response.
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      status_ = other.status_;
      timestamp_ = other.timestamp_;
      details_ = other.details_;
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.LocalService:
          LocalService = other.LocalService.Clone();
          break;
        case ResponseTypeOneofCase.RemoteNode:
          RemoteNode = other.RemoteNode.Clone();
          break;
        case ResponseTypeOneofCase.Client:
          Client = other.Client.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Iop.Locnet.Status status_ = 0;
    /// <summary>
    ///  Return code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    /// <summary>
    ///  TimestampType. If status is ERROR_BANNED, this field specifies when the blacklist entry expires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 3;
    private string details_ = "";
    /// <summary>
    ///  In case of an error, this field may contain additional details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Details {
      get { return details_; }
      set {
        details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localService" field.</summary>
    public const int LocalServiceFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.LocalServiceResponse LocalService {
      get { return responseTypeCase_ == ResponseTypeOneofCase.LocalService ? (global::Iop.Locnet.LocalServiceResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.LocalService;
      }
    }

    /// <summary>Field number for the "remoteNode" field.</summary>
    public const int RemoteNodeFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.RemoteNodeResponse RemoteNode {
      get { return responseTypeCase_ == ResponseTypeOneofCase.RemoteNode ? (global::Iop.Locnet.RemoteNodeResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.RemoteNode;
      }
    }

    /// <summary>Field number for the "client" field.</summary>
    public const int ClientFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.ClientResponse Client {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Client ? (global::Iop.Locnet.ClientResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Client;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "ResponseType" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      LocalService = 4,
      RemoteNode = 5,
      Client = 6,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Details != other.Details) return false;
      if (!object.Equals(LocalService, other.LocalService)) return false;
      if (!object.Equals(RemoteNode, other.RemoteNode)) return false;
      if (!object.Equals(Client, other.Client)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Details.Length != 0) hash ^= Details.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.LocalService) hash ^= LocalService.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoteNode) hash ^= RemoteNode.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Client) hash ^= Client.GetHashCode();
      hash ^= (int) responseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Timestamp);
      }
      if (Details.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Details);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.LocalService) {
        output.WriteRawTag(34);
        output.WriteMessage(LocalService);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoteNode) {
        output.WriteRawTag(42);
        output.WriteMessage(RemoteNode);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Client) {
        output.WriteRawTag(50);
        output.WriteMessage(Client);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Timestamp);
      }
      if (Details.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.LocalService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalService);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoteNode) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoteNode);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Client) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Client);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Details.Length != 0) {
        Details = other.Details;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.LocalService:
          LocalService = other.LocalService;
          break;
        case ResponseTypeOneofCase.RemoteNode:
          RemoteNode = other.RemoteNode;
          break;
        case ResponseTypeOneofCase.Client:
          Client = other.Client;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Iop.Locnet.Status) input.ReadEnum();
            break;
          }
          case 16: {
            Timestamp = input.ReadSInt64();
            break;
          }
          case 26: {
            Details = input.ReadString();
            break;
          }
          case 34: {
            global::Iop.Locnet.LocalServiceResponse subBuilder = new global::Iop.Locnet.LocalServiceResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.LocalService) {
              subBuilder.MergeFrom(LocalService);
            }
            input.ReadMessage(subBuilder);
            LocalService = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Locnet.RemoteNodeResponse subBuilder = new global::Iop.Locnet.RemoteNodeResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.RemoteNode) {
              subBuilder.MergeFrom(RemoteNode);
            }
            input.ReadMessage(subBuilder);
            RemoteNode = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Locnet.ClientResponse subBuilder = new global::Iop.Locnet.ClientResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.Client) {
              subBuilder.MergeFrom(Client);
            }
            input.ReadMessage(subBuilder);
            Client = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocalServiceRequest : pb::IMessage<LocalServiceRequest> {
    private static readonly pb::MessageParser<LocalServiceRequest> _parser = new pb::MessageParser<LocalServiceRequest>(() => new LocalServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceRequest(LocalServiceRequest other) : this() {
      switch (other.LocalServiceRequestTypeCase) {
        case LocalServiceRequestTypeOneofCase.RegisterService:
          RegisterService = other.RegisterService.Clone();
          break;
        case LocalServiceRequestTypeOneofCase.DeregisterService:
          DeregisterService = other.DeregisterService.Clone();
          break;
        case LocalServiceRequestTypeOneofCase.GetNeighbours:
          GetNeighbours = other.GetNeighbours.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceRequest Clone() {
      return new LocalServiceRequest(this);
    }

    /// <summary>Field number for the "registerService" field.</summary>
    public const int RegisterServiceFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.RegisterServiceRequest RegisterService {
      get { return localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.RegisterService ? (global::Iop.Locnet.RegisterServiceRequest) localServiceRequestType_ : null; }
      set {
        localServiceRequestType_ = value;
        localServiceRequestTypeCase_ = value == null ? LocalServiceRequestTypeOneofCase.None : LocalServiceRequestTypeOneofCase.RegisterService;
      }
    }

    /// <summary>Field number for the "deregisterService" field.</summary>
    public const int DeregisterServiceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.DeregisterServiceRequest DeregisterService {
      get { return localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.DeregisterService ? (global::Iop.Locnet.DeregisterServiceRequest) localServiceRequestType_ : null; }
      set {
        localServiceRequestType_ = value;
        localServiceRequestTypeCase_ = value == null ? LocalServiceRequestTypeOneofCase.None : LocalServiceRequestTypeOneofCase.DeregisterService;
      }
    }

    /// <summary>Field number for the "getNeighbours" field.</summary>
    public const int GetNeighboursFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNeighbourNodesByDistanceRequest GetNeighbours {
      get { return localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.GetNeighbours ? (global::Iop.Locnet.GetNeighbourNodesByDistanceRequest) localServiceRequestType_ : null; }
      set {
        localServiceRequestType_ = value;
        localServiceRequestTypeCase_ = value == null ? LocalServiceRequestTypeOneofCase.None : LocalServiceRequestTypeOneofCase.GetNeighbours;
      }
    }

    private object localServiceRequestType_;
    /// <summary>Enum of possible cases for the "LocalServiceRequestType" oneof.</summary>
    public enum LocalServiceRequestTypeOneofCase {
      None = 0,
      RegisterService = 1,
      DeregisterService = 2,
      GetNeighbours = 3,
    }
    private LocalServiceRequestTypeOneofCase localServiceRequestTypeCase_ = LocalServiceRequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceRequestTypeOneofCase LocalServiceRequestTypeCase {
      get { return localServiceRequestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocalServiceRequestType() {
      localServiceRequestTypeCase_ = LocalServiceRequestTypeOneofCase.None;
      localServiceRequestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RegisterService, other.RegisterService)) return false;
      if (!object.Equals(DeregisterService, other.DeregisterService)) return false;
      if (!object.Equals(GetNeighbours, other.GetNeighbours)) return false;
      if (LocalServiceRequestTypeCase != other.LocalServiceRequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.RegisterService) hash ^= RegisterService.GetHashCode();
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.DeregisterService) hash ^= DeregisterService.GetHashCode();
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.GetNeighbours) hash ^= GetNeighbours.GetHashCode();
      hash ^= (int) localServiceRequestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.RegisterService) {
        output.WriteRawTag(10);
        output.WriteMessage(RegisterService);
      }
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.DeregisterService) {
        output.WriteRawTag(18);
        output.WriteMessage(DeregisterService);
      }
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.GetNeighbours) {
        output.WriteRawTag(26);
        output.WriteMessage(GetNeighbours);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.RegisterService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterService);
      }
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.DeregisterService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeregisterService);
      }
      if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.GetNeighbours) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNeighbours);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalServiceRequest other) {
      if (other == null) {
        return;
      }
      switch (other.LocalServiceRequestTypeCase) {
        case LocalServiceRequestTypeOneofCase.RegisterService:
          RegisterService = other.RegisterService;
          break;
        case LocalServiceRequestTypeOneofCase.DeregisterService:
          DeregisterService = other.DeregisterService;
          break;
        case LocalServiceRequestTypeOneofCase.GetNeighbours:
          GetNeighbours = other.GetNeighbours;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.RegisterServiceRequest subBuilder = new global::Iop.Locnet.RegisterServiceRequest();
            if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.RegisterService) {
              subBuilder.MergeFrom(RegisterService);
            }
            input.ReadMessage(subBuilder);
            RegisterService = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.DeregisterServiceRequest subBuilder = new global::Iop.Locnet.DeregisterServiceRequest();
            if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.DeregisterService) {
              subBuilder.MergeFrom(DeregisterService);
            }
            input.ReadMessage(subBuilder);
            DeregisterService = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.GetNeighbourNodesByDistanceRequest subBuilder = new global::Iop.Locnet.GetNeighbourNodesByDistanceRequest();
            if (localServiceRequestTypeCase_ == LocalServiceRequestTypeOneofCase.GetNeighbours) {
              subBuilder.MergeFrom(GetNeighbours);
            }
            input.ReadMessage(subBuilder);
            GetNeighbours = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocalServiceResponse : pb::IMessage<LocalServiceResponse> {
    private static readonly pb::MessageParser<LocalServiceResponse> _parser = new pb::MessageParser<LocalServiceResponse>(() => new LocalServiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalServiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceResponse(LocalServiceResponse other) : this() {
      switch (other.LocalServiceResponseTypeCase) {
        case LocalServiceResponseTypeOneofCase.RegisterService:
          RegisterService = other.RegisterService.Clone();
          break;
        case LocalServiceResponseTypeOneofCase.DeregisterService:
          DeregisterService = other.DeregisterService.Clone();
          break;
        case LocalServiceResponseTypeOneofCase.GetNeighbours:
          GetNeighbours = other.GetNeighbours.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceResponse Clone() {
      return new LocalServiceResponse(this);
    }

    /// <summary>Field number for the "registerService" field.</summary>
    public const int RegisterServiceFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.RegisterServiceResponse RegisterService {
      get { return localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.RegisterService ? (global::Iop.Locnet.RegisterServiceResponse) localServiceResponseType_ : null; }
      set {
        localServiceResponseType_ = value;
        localServiceResponseTypeCase_ = value == null ? LocalServiceResponseTypeOneofCase.None : LocalServiceResponseTypeOneofCase.RegisterService;
      }
    }

    /// <summary>Field number for the "deregisterService" field.</summary>
    public const int DeregisterServiceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.DeregisterServiceResponse DeregisterService {
      get { return localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.DeregisterService ? (global::Iop.Locnet.DeregisterServiceResponse) localServiceResponseType_ : null; }
      set {
        localServiceResponseType_ = value;
        localServiceResponseTypeCase_ = value == null ? LocalServiceResponseTypeOneofCase.None : LocalServiceResponseTypeOneofCase.DeregisterService;
      }
    }

    /// <summary>Field number for the "getNeighbours" field.</summary>
    public const int GetNeighboursFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNeighbourNodesByDistanceResponse GetNeighbours {
      get { return localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.GetNeighbours ? (global::Iop.Locnet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_ : null; }
      set {
        localServiceResponseType_ = value;
        localServiceResponseTypeCase_ = value == null ? LocalServiceResponseTypeOneofCase.None : LocalServiceResponseTypeOneofCase.GetNeighbours;
      }
    }

    private object localServiceResponseType_;
    /// <summary>Enum of possible cases for the "LocalServiceResponseType" oneof.</summary>
    public enum LocalServiceResponseTypeOneofCase {
      None = 0,
      RegisterService = 1,
      DeregisterService = 2,
      GetNeighbours = 3,
    }
    private LocalServiceResponseTypeOneofCase localServiceResponseTypeCase_ = LocalServiceResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalServiceResponseTypeOneofCase LocalServiceResponseTypeCase {
      get { return localServiceResponseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocalServiceResponseType() {
      localServiceResponseTypeCase_ = LocalServiceResponseTypeOneofCase.None;
      localServiceResponseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalServiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalServiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RegisterService, other.RegisterService)) return false;
      if (!object.Equals(DeregisterService, other.DeregisterService)) return false;
      if (!object.Equals(GetNeighbours, other.GetNeighbours)) return false;
      if (LocalServiceResponseTypeCase != other.LocalServiceResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.RegisterService) hash ^= RegisterService.GetHashCode();
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.DeregisterService) hash ^= DeregisterService.GetHashCode();
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.GetNeighbours) hash ^= GetNeighbours.GetHashCode();
      hash ^= (int) localServiceResponseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.RegisterService) {
        output.WriteRawTag(10);
        output.WriteMessage(RegisterService);
      }
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.DeregisterService) {
        output.WriteRawTag(18);
        output.WriteMessage(DeregisterService);
      }
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.GetNeighbours) {
        output.WriteRawTag(26);
        output.WriteMessage(GetNeighbours);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.RegisterService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterService);
      }
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.DeregisterService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeregisterService);
      }
      if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.GetNeighbours) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNeighbours);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalServiceResponse other) {
      if (other == null) {
        return;
      }
      switch (other.LocalServiceResponseTypeCase) {
        case LocalServiceResponseTypeOneofCase.RegisterService:
          RegisterService = other.RegisterService;
          break;
        case LocalServiceResponseTypeOneofCase.DeregisterService:
          DeregisterService = other.DeregisterService;
          break;
        case LocalServiceResponseTypeOneofCase.GetNeighbours:
          GetNeighbours = other.GetNeighbours;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.RegisterServiceResponse subBuilder = new global::Iop.Locnet.RegisterServiceResponse();
            if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.RegisterService) {
              subBuilder.MergeFrom(RegisterService);
            }
            input.ReadMessage(subBuilder);
            RegisterService = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.DeregisterServiceResponse subBuilder = new global::Iop.Locnet.DeregisterServiceResponse();
            if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.DeregisterService) {
              subBuilder.MergeFrom(DeregisterService);
            }
            input.ReadMessage(subBuilder);
            DeregisterService = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.GetNeighbourNodesByDistanceResponse subBuilder = new global::Iop.Locnet.GetNeighbourNodesByDistanceResponse();
            if (localServiceResponseTypeCase_ == LocalServiceResponseTypeOneofCase.GetNeighbours) {
              subBuilder.MergeFrom(GetNeighbours);
            }
            input.ReadMessage(subBuilder);
            GetNeighbours = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeProfile : pb::IMessage<NodeProfile> {
    private static readonly pb::MessageParser<NodeProfile> _parser = new pb::MessageParser<NodeProfile>(() => new NodeProfile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeProfile(NodeProfile other) : this() {
      nodeId_ = other.nodeId_;
      contacts_ = other.contacts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeProfile Clone() {
      return new NodeProfile(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private pb::ByteString nodeId_ = pb::ByteString.Empty;
    /// <summary>
    ///  TODO do we also need a public key here or will it anyway be checked via the DHT?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contacts" field.</summary>
    public const int ContactsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Iop.Locnet.Contact> _repeated_contacts_codec
        = pb::FieldCodec.ForMessage(18, global::Iop.Locnet.Contact.Parser);
    private readonly pbc::RepeatedField<global::Iop.Locnet.Contact> contacts_ = new pbc::RepeatedField<global::Iop.Locnet.Contact>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Locnet.Contact> Contacts {
      get { return contacts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if(!contacts_.Equals(other.contacts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      hash ^= contacts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(NodeId);
      }
      contacts_.WriteTo(output, _repeated_contacts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodeId);
      }
      size += contacts_.CalculateSize(_repeated_contacts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeProfile other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      contacts_.Add(other.contacts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NodeId = input.ReadBytes();
            break;
          }
          case 18: {
            contacts_.AddEntriesFrom(input, _repeated_contacts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Contact : pb::IMessage<Contact> {
    private static readonly pb::MessageParser<Contact> _parser = new pb::MessageParser<Contact>(() => new Contact());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Contact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contact(Contact other) : this() {
      switch (other.ContactTypeCase) {
        case ContactTypeOneofCase.Ipv4:
          Ipv4 = other.Ipv4.Clone();
          break;
        case ContactTypeOneofCase.Ipv6:
          Ipv6 = other.Ipv6.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contact Clone() {
      return new Contact(this);
    }

    /// <summary>Field number for the "ipv4" field.</summary>
    public const int Ipv4FieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.Ipv4Address Ipv4 {
      get { return contactTypeCase_ == ContactTypeOneofCase.Ipv4 ? (global::Iop.Locnet.Ipv4Address) contactType_ : null; }
      set {
        contactType_ = value;
        contactTypeCase_ = value == null ? ContactTypeOneofCase.None : ContactTypeOneofCase.Ipv4;
      }
    }

    /// <summary>Field number for the "ipv6" field.</summary>
    public const int Ipv6FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.Ipv6Address Ipv6 {
      get { return contactTypeCase_ == ContactTypeOneofCase.Ipv6 ? (global::Iop.Locnet.Ipv6Address) contactType_ : null; }
      set {
        contactType_ = value;
        contactTypeCase_ = value == null ? ContactTypeOneofCase.None : ContactTypeOneofCase.Ipv6;
      }
    }

    private object contactType_;
    /// <summary>Enum of possible cases for the "ContactType" oneof.</summary>
    public enum ContactTypeOneofCase {
      None = 0,
      Ipv4 = 1,
      Ipv6 = 2,
    }
    private ContactTypeOneofCase contactTypeCase_ = ContactTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactTypeOneofCase ContactTypeCase {
      get { return contactTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContactType() {
      contactTypeCase_ = ContactTypeOneofCase.None;
      contactType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Contact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Contact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ipv4, other.Ipv4)) return false;
      if (!object.Equals(Ipv6, other.Ipv6)) return false;
      if (ContactTypeCase != other.ContactTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contactTypeCase_ == ContactTypeOneofCase.Ipv4) hash ^= Ipv4.GetHashCode();
      if (contactTypeCase_ == ContactTypeOneofCase.Ipv6) hash ^= Ipv6.GetHashCode();
      hash ^= (int) contactTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contactTypeCase_ == ContactTypeOneofCase.Ipv4) {
        output.WriteRawTag(10);
        output.WriteMessage(Ipv4);
      }
      if (contactTypeCase_ == ContactTypeOneofCase.Ipv6) {
        output.WriteRawTag(18);
        output.WriteMessage(Ipv6);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contactTypeCase_ == ContactTypeOneofCase.Ipv4) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ipv4);
      }
      if (contactTypeCase_ == ContactTypeOneofCase.Ipv6) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ipv6);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Contact other) {
      if (other == null) {
        return;
      }
      switch (other.ContactTypeCase) {
        case ContactTypeOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case ContactTypeOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.Ipv4Address subBuilder = new global::Iop.Locnet.Ipv4Address();
            if (contactTypeCase_ == ContactTypeOneofCase.Ipv4) {
              subBuilder.MergeFrom(Ipv4);
            }
            input.ReadMessage(subBuilder);
            Ipv4 = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.Ipv6Address subBuilder = new global::Iop.Locnet.Ipv6Address();
            if (contactTypeCase_ == ContactTypeOneofCase.Ipv6) {
              subBuilder.MergeFrom(Ipv6);
            }
            input.ReadMessage(subBuilder);
            Ipv6 = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ipv4Address : pb::IMessage<Ipv4Address> {
    private static readonly pb::MessageParser<Ipv4Address> _parser = new pb::MessageParser<Ipv4Address>(() => new Ipv4Address());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ipv4Address> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipv4Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipv4Address(Ipv4Address other) : this() {
      host_ = other.host_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipv4Address Clone() {
      return new Ipv4Address(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ipv4Address);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ipv4Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ipv4Address other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ipv6Address : pb::IMessage<Ipv6Address> {
    private static readonly pb::MessageParser<Ipv6Address> _parser = new pb::MessageParser<Ipv6Address>(() => new Ipv6Address());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ipv6Address> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipv6Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipv6Address(Ipv6Address other) : this() {
      host_ = other.host_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipv6Address Clone() {
      return new Ipv6Address(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ipv6Address);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ipv6Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ipv6Address other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterServiceRequest : pb::IMessage<RegisterServiceRequest> {
    private static readonly pb::MessageParser<RegisterServiceRequest> _parser = new pb::MessageParser<RegisterServiceRequest>(() => new RegisterServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceRequest(RegisterServiceRequest other) : this() {
      serviceType_ = other.serviceType_;
      NodeProfile = other.nodeProfile_ != null ? other.NodeProfile.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceRequest Clone() {
      return new RegisterServiceRequest(this);
    }

    /// <summary>Field number for the "serviceType" field.</summary>
    public const int ServiceTypeFieldNumber = 1;
    private global::Iop.Locnet.ServiceType serviceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.ServiceType ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = value;
      }
    }

    /// <summary>Field number for the "nodeProfile" field.</summary>
    public const int NodeProfileFieldNumber = 2;
    private global::Iop.Locnet.NodeProfile nodeProfile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.NodeProfile NodeProfile {
      get { return nodeProfile_; }
      set {
        nodeProfile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceType != other.ServiceType) return false;
      if (!object.Equals(NodeProfile, other.NodeProfile)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceType != 0) hash ^= ServiceType.GetHashCode();
      if (nodeProfile_ != null) hash ^= NodeProfile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ServiceType);
      }
      if (nodeProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NodeProfile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
      }
      if (nodeProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeProfile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceType != 0) {
        ServiceType = other.ServiceType;
      }
      if (other.nodeProfile_ != null) {
        if (nodeProfile_ == null) {
          nodeProfile_ = new global::Iop.Locnet.NodeProfile();
        }
        NodeProfile.MergeFrom(other.NodeProfile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            serviceType_ = (global::Iop.Locnet.ServiceType) input.ReadEnum();
            break;
          }
          case 18: {
            if (nodeProfile_ == null) {
              nodeProfile_ = new global::Iop.Locnet.NodeProfile();
            }
            input.ReadMessage(nodeProfile_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterServiceResponse : pb::IMessage<RegisterServiceResponse> {
    private static readonly pb::MessageParser<RegisterServiceResponse> _parser = new pb::MessageParser<RegisterServiceResponse>(() => new RegisterServiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterServiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceResponse(RegisterServiceResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterServiceResponse Clone() {
      return new RegisterServiceResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterServiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterServiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterServiceResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DeregisterServiceRequest : pb::IMessage<DeregisterServiceRequest> {
    private static readonly pb::MessageParser<DeregisterServiceRequest> _parser = new pb::MessageParser<DeregisterServiceRequest>(() => new DeregisterServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeregisterServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceRequest(DeregisterServiceRequest other) : this() {
      serviceType_ = other.serviceType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceRequest Clone() {
      return new DeregisterServiceRequest(this);
    }

    /// <summary>Field number for the "serviceType" field.</summary>
    public const int ServiceTypeFieldNumber = 1;
    private global::Iop.Locnet.ServiceType serviceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.ServiceType ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeregisterServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeregisterServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceType != other.ServiceType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceType != 0) hash ^= ServiceType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ServiceType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeregisterServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceType != 0) {
        ServiceType = other.ServiceType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            serviceType_ = (global::Iop.Locnet.ServiceType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeregisterServiceResponse : pb::IMessage<DeregisterServiceResponse> {
    private static readonly pb::MessageParser<DeregisterServiceResponse> _parser = new pb::MessageParser<DeregisterServiceResponse>(() => new DeregisterServiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeregisterServiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceResponse(DeregisterServiceResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterServiceResponse Clone() {
      return new DeregisterServiceResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeregisterServiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeregisterServiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeregisterServiceResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetNeighbourNodesByDistanceRequest : pb::IMessage<GetNeighbourNodesByDistanceRequest> {
    private static readonly pb::MessageParser<GetNeighbourNodesByDistanceRequest> _parser = new pb::MessageParser<GetNeighbourNodesByDistanceRequest>(() => new GetNeighbourNodesByDistanceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNeighbourNodesByDistanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceRequest(GetNeighbourNodesByDistanceRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceRequest Clone() {
      return new GetNeighbourNodesByDistanceRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNeighbourNodesByDistanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNeighbourNodesByDistanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNeighbourNodesByDistanceRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GpsLocation : pb::IMessage<GpsLocation> {
    private static readonly pb::MessageParser<GpsLocation> _parser = new pb::MessageParser<GpsLocation>(() => new GpsLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GpsLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpsLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpsLocation(GpsLocation other) : this() {
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpsLocation Clone() {
      return new GpsLocation(this);
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 1;
    private int latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 2;
    private int longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GpsLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GpsLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Latitude != 0) hash ^= Latitude.GetHashCode();
      if (Longitude != 0) hash ^= Longitude.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Latitude != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Latitude);
      }
      if (Longitude != 0) {
        output.WriteRawTag(21);
        output.WriteSFixed32(Longitude);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Latitude != 0) {
        size += 1 + 4;
      }
      if (Longitude != 0) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GpsLocation other) {
      if (other == null) {
        return;
      }
      if (other.Latitude != 0) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0) {
        Longitude = other.Longitude;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Latitude = input.ReadSFixed32();
            break;
          }
          case 21: {
            Longitude = input.ReadSFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeInfo : pb::IMessage<NodeInfo> {
    private static readonly pb::MessageParser<NodeInfo> _parser = new pb::MessageParser<NodeInfo>(() => new NodeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo(NodeInfo other) : this() {
      Profile = other.profile_ != null ? other.Profile.Clone() : null;
      Location = other.location_ != null ? other.Location.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo Clone() {
      return new NodeInfo(this);
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 1;
    private global::Iop.Locnet.NodeProfile profile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.NodeProfile Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 2;
    private global::Iop.Locnet.GpsLocation location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GpsLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Profile, other.Profile)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profile_ != null) hash ^= Profile.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Profile);
      }
      if (location_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Location);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.profile_ != null) {
        if (profile_ == null) {
          profile_ = new global::Iop.Locnet.NodeProfile();
        }
        Profile.MergeFrom(other.Profile);
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Iop.Locnet.GpsLocation();
        }
        Location.MergeFrom(other.Location);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (profile_ == null) {
              profile_ = new global::Iop.Locnet.NodeProfile();
            }
            input.ReadMessage(profile_);
            break;
          }
          case 18: {
            if (location_ == null) {
              location_ = new global::Iop.Locnet.GpsLocation();
            }
            input.ReadMessage(location_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetNeighbourNodesByDistanceResponse : pb::IMessage<GetNeighbourNodesByDistanceResponse> {
    private static readonly pb::MessageParser<GetNeighbourNodesByDistanceResponse> _parser = new pb::MessageParser<GetNeighbourNodesByDistanceResponse>(() => new GetNeighbourNodesByDistanceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNeighbourNodesByDistanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceResponse(GetNeighbourNodesByDistanceResponse other) : this() {
      nodeInfo_ = other.nodeInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNeighbourNodesByDistanceResponse Clone() {
      return new GetNeighbourNodesByDistanceResponse(this);
    }

    /// <summary>Field number for the "nodeInfo" field.</summary>
    public const int NodeInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Locnet.NodeInfo> _repeated_nodeInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Locnet.NodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Iop.Locnet.NodeInfo> nodeInfo_ = new pbc::RepeatedField<global::Iop.Locnet.NodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Locnet.NodeInfo> NodeInfo {
      get { return nodeInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNeighbourNodesByDistanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNeighbourNodesByDistanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeInfo_.Equals(other.nodeInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodeInfo_.WriteTo(output, _repeated_nodeInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeInfo_.CalculateSize(_repeated_nodeInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNeighbourNodesByDistanceResponse other) {
      if (other == null) {
        return;
      }
      nodeInfo_.Add(other.nodeInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodeInfo_.AddEntriesFrom(input, _repeated_nodeInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoteNodeRequest : pb::IMessage<RemoteNodeRequest> {
    private static readonly pb::MessageParser<RemoteNodeRequest> _parser = new pb::MessageParser<RemoteNodeRequest>(() => new RemoteNodeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteNodeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeRequest(RemoteNodeRequest other) : this() {
      switch (other.RemoteNodeRequestTypeCase) {
        case RemoteNodeRequestTypeOneofCase.AcceptColleague:
          AcceptColleague = other.AcceptColleague.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.RenewColleague:
          RenewColleague = other.RenewColleague.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.AcceptNeighbour:
          AcceptNeighbour = other.AcceptNeighbour.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.RenewNeighbour:
          RenewNeighbour = other.RenewNeighbour.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.GetColleagueNodeCount:
          GetColleagueNodeCount = other.GetColleagueNodeCount.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.GetRandomNodes:
          GetRandomNodes = other.GetRandomNodes.Clone();
          break;
        case RemoteNodeRequestTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeRequest Clone() {
      return new RemoteNodeRequest(this);
    }

    /// <summary>Field number for the "acceptColleague" field.</summary>
    public const int AcceptColleagueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkRequest AcceptColleague {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptColleague ? (global::Iop.Locnet.BuildNetworkRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.AcceptColleague;
      }
    }

    /// <summary>Field number for the "renewColleague" field.</summary>
    public const int RenewColleagueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkRequest RenewColleague {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewColleague ? (global::Iop.Locnet.BuildNetworkRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.RenewColleague;
      }
    }

    /// <summary>Field number for the "acceptNeighbour" field.</summary>
    public const int AcceptNeighbourFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkRequest AcceptNeighbour {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptNeighbour ? (global::Iop.Locnet.BuildNetworkRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.AcceptNeighbour;
      }
    }

    /// <summary>Field number for the "renewNeighbour" field.</summary>
    public const int RenewNeighbourFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkRequest RenewNeighbour {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewNeighbour ? (global::Iop.Locnet.BuildNetworkRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.RenewNeighbour;
      }
    }

    /// <summary>Field number for the "getColleagueNodeCount" field.</summary>
    public const int GetColleagueNodeCountFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetColleagueNodeCountRequest GetColleagueNodeCount {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetColleagueNodeCount ? (global::Iop.Locnet.GetColleagueNodeCountRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.GetColleagueNodeCount;
      }
    }

    /// <summary>Field number for the "getRandomNodes" field.</summary>
    public const int GetRandomNodesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetRandomNodesRequest GetRandomNodes {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetRandomNodes ? (global::Iop.Locnet.GetRandomNodesRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.GetRandomNodes;
      }
    }

    /// <summary>Field number for the "getClosestNodes" field.</summary>
    public const int GetClosestNodesFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetClosestNodesByDistanceRequest GetClosestNodes {
      get { return remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetClosestNodes ? (global::Iop.Locnet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_ : null; }
      set {
        remoteNodeRequestType_ = value;
        remoteNodeRequestTypeCase_ = value == null ? RemoteNodeRequestTypeOneofCase.None : RemoteNodeRequestTypeOneofCase.GetClosestNodes;
      }
    }

    private object remoteNodeRequestType_;
    /// <summary>Enum of possible cases for the "RemoteNodeRequestType" oneof.</summary>
    public enum RemoteNodeRequestTypeOneofCase {
      None = 0,
      AcceptColleague = 1,
      RenewColleague = 2,
      AcceptNeighbour = 3,
      RenewNeighbour = 4,
      GetColleagueNodeCount = 5,
      GetRandomNodes = 6,
      GetClosestNodes = 7,
    }
    private RemoteNodeRequestTypeOneofCase remoteNodeRequestTypeCase_ = RemoteNodeRequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeRequestTypeOneofCase RemoteNodeRequestTypeCase {
      get { return remoteNodeRequestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRemoteNodeRequestType() {
      remoteNodeRequestTypeCase_ = RemoteNodeRequestTypeOneofCase.None;
      remoteNodeRequestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteNodeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteNodeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AcceptColleague, other.AcceptColleague)) return false;
      if (!object.Equals(RenewColleague, other.RenewColleague)) return false;
      if (!object.Equals(AcceptNeighbour, other.AcceptNeighbour)) return false;
      if (!object.Equals(RenewNeighbour, other.RenewNeighbour)) return false;
      if (!object.Equals(GetColleagueNodeCount, other.GetColleagueNodeCount)) return false;
      if (!object.Equals(GetRandomNodes, other.GetRandomNodes)) return false;
      if (!object.Equals(GetClosestNodes, other.GetClosestNodes)) return false;
      if (RemoteNodeRequestTypeCase != other.RemoteNodeRequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptColleague) hash ^= AcceptColleague.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewColleague) hash ^= RenewColleague.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptNeighbour) hash ^= AcceptNeighbour.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewNeighbour) hash ^= RenewNeighbour.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetColleagueNodeCount) hash ^= GetColleagueNodeCount.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetRandomNodes) hash ^= GetRandomNodes.GetHashCode();
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetClosestNodes) hash ^= GetClosestNodes.GetHashCode();
      hash ^= (int) remoteNodeRequestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptColleague) {
        output.WriteRawTag(10);
        output.WriteMessage(AcceptColleague);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewColleague) {
        output.WriteRawTag(18);
        output.WriteMessage(RenewColleague);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptNeighbour) {
        output.WriteRawTag(26);
        output.WriteMessage(AcceptNeighbour);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewNeighbour) {
        output.WriteRawTag(34);
        output.WriteMessage(RenewNeighbour);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetColleagueNodeCount) {
        output.WriteRawTag(42);
        output.WriteMessage(GetColleagueNodeCount);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetRandomNodes) {
        output.WriteRawTag(50);
        output.WriteMessage(GetRandomNodes);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetClosestNodes) {
        output.WriteRawTag(58);
        output.WriteMessage(GetClosestNodes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptColleague) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptColleague);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewColleague) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenewColleague);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptNeighbour) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptNeighbour);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewNeighbour) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenewNeighbour);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetColleagueNodeCount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetColleagueNodeCount);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetRandomNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetRandomNodes);
      }
      if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetClosestNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetClosestNodes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteNodeRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RemoteNodeRequestTypeCase) {
        case RemoteNodeRequestTypeOneofCase.AcceptColleague:
          AcceptColleague = other.AcceptColleague;
          break;
        case RemoteNodeRequestTypeOneofCase.RenewColleague:
          RenewColleague = other.RenewColleague;
          break;
        case RemoteNodeRequestTypeOneofCase.AcceptNeighbour:
          AcceptNeighbour = other.AcceptNeighbour;
          break;
        case RemoteNodeRequestTypeOneofCase.RenewNeighbour:
          RenewNeighbour = other.RenewNeighbour;
          break;
        case RemoteNodeRequestTypeOneofCase.GetColleagueNodeCount:
          GetColleagueNodeCount = other.GetColleagueNodeCount;
          break;
        case RemoteNodeRequestTypeOneofCase.GetRandomNodes:
          GetRandomNodes = other.GetRandomNodes;
          break;
        case RemoteNodeRequestTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.BuildNetworkRequest subBuilder = new global::Iop.Locnet.BuildNetworkRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptColleague) {
              subBuilder.MergeFrom(AcceptColleague);
            }
            input.ReadMessage(subBuilder);
            AcceptColleague = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.BuildNetworkRequest subBuilder = new global::Iop.Locnet.BuildNetworkRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewColleague) {
              subBuilder.MergeFrom(RenewColleague);
            }
            input.ReadMessage(subBuilder);
            RenewColleague = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.BuildNetworkRequest subBuilder = new global::Iop.Locnet.BuildNetworkRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.AcceptNeighbour) {
              subBuilder.MergeFrom(AcceptNeighbour);
            }
            input.ReadMessage(subBuilder);
            AcceptNeighbour = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Locnet.BuildNetworkRequest subBuilder = new global::Iop.Locnet.BuildNetworkRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.RenewNeighbour) {
              subBuilder.MergeFrom(RenewNeighbour);
            }
            input.ReadMessage(subBuilder);
            RenewNeighbour = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Locnet.GetColleagueNodeCountRequest subBuilder = new global::Iop.Locnet.GetColleagueNodeCountRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetColleagueNodeCount) {
              subBuilder.MergeFrom(GetColleagueNodeCount);
            }
            input.ReadMessage(subBuilder);
            GetColleagueNodeCount = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Locnet.GetRandomNodesRequest subBuilder = new global::Iop.Locnet.GetRandomNodesRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetRandomNodes) {
              subBuilder.MergeFrom(GetRandomNodes);
            }
            input.ReadMessage(subBuilder);
            GetRandomNodes = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Locnet.GetClosestNodesByDistanceRequest subBuilder = new global::Iop.Locnet.GetClosestNodesByDistanceRequest();
            if (remoteNodeRequestTypeCase_ == RemoteNodeRequestTypeOneofCase.GetClosestNodes) {
              subBuilder.MergeFrom(GetClosestNodes);
            }
            input.ReadMessage(subBuilder);
            GetClosestNodes = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoteNodeResponse : pb::IMessage<RemoteNodeResponse> {
    private static readonly pb::MessageParser<RemoteNodeResponse> _parser = new pb::MessageParser<RemoteNodeResponse>(() => new RemoteNodeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteNodeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeResponse(RemoteNodeResponse other) : this() {
      switch (other.RemoteNodeResponseTypeCase) {
        case RemoteNodeResponseTypeOneofCase.AcceptColleague:
          AcceptColleague = other.AcceptColleague.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.RenewColleague:
          RenewColleague = other.RenewColleague.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.AcceptNeighbour:
          AcceptNeighbour = other.AcceptNeighbour.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.RenewNeighbour:
          RenewNeighbour = other.RenewNeighbour.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.GetColleagueNodeCount:
          GetColleagueNodeCount = other.GetColleagueNodeCount.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.GetRandomNodes:
          GetRandomNodes = other.GetRandomNodes.Clone();
          break;
        case RemoteNodeResponseTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeResponse Clone() {
      return new RemoteNodeResponse(this);
    }

    /// <summary>Field number for the "acceptColleague" field.</summary>
    public const int AcceptColleagueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkResponse AcceptColleague {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptColleague ? (global::Iop.Locnet.BuildNetworkResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.AcceptColleague;
      }
    }

    /// <summary>Field number for the "renewColleague" field.</summary>
    public const int RenewColleagueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkResponse RenewColleague {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewColleague ? (global::Iop.Locnet.BuildNetworkResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.RenewColleague;
      }
    }

    /// <summary>Field number for the "acceptNeighbour" field.</summary>
    public const int AcceptNeighbourFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkResponse AcceptNeighbour {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptNeighbour ? (global::Iop.Locnet.BuildNetworkResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.AcceptNeighbour;
      }
    }

    /// <summary>Field number for the "renewNeighbour" field.</summary>
    public const int RenewNeighbourFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.BuildNetworkResponse RenewNeighbour {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewNeighbour ? (global::Iop.Locnet.BuildNetworkResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.RenewNeighbour;
      }
    }

    /// <summary>Field number for the "getColleagueNodeCount" field.</summary>
    public const int GetColleagueNodeCountFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetColleagueNodeCountResponse GetColleagueNodeCount {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetColleagueNodeCount ? (global::Iop.Locnet.GetColleagueNodeCountResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.GetColleagueNodeCount;
      }
    }

    /// <summary>Field number for the "getRandomNodes" field.</summary>
    public const int GetRandomNodesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetRandomNodesResponse GetRandomNodes {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetRandomNodes ? (global::Iop.Locnet.GetRandomNodesResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.GetRandomNodes;
      }
    }

    /// <summary>Field number for the "getClosestNodes" field.</summary>
    public const int GetClosestNodesFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetClosestNodesByDistanceResponse GetClosestNodes {
      get { return remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetClosestNodes ? (global::Iop.Locnet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_ : null; }
      set {
        remoteNodeResponseType_ = value;
        remoteNodeResponseTypeCase_ = value == null ? RemoteNodeResponseTypeOneofCase.None : RemoteNodeResponseTypeOneofCase.GetClosestNodes;
      }
    }

    private object remoteNodeResponseType_;
    /// <summary>Enum of possible cases for the "RemoteNodeResponseType" oneof.</summary>
    public enum RemoteNodeResponseTypeOneofCase {
      None = 0,
      AcceptColleague = 1,
      RenewColleague = 2,
      AcceptNeighbour = 3,
      RenewNeighbour = 4,
      GetColleagueNodeCount = 5,
      GetRandomNodes = 6,
      GetClosestNodes = 7,
    }
    private RemoteNodeResponseTypeOneofCase remoteNodeResponseTypeCase_ = RemoteNodeResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteNodeResponseTypeOneofCase RemoteNodeResponseTypeCase {
      get { return remoteNodeResponseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRemoteNodeResponseType() {
      remoteNodeResponseTypeCase_ = RemoteNodeResponseTypeOneofCase.None;
      remoteNodeResponseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteNodeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteNodeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AcceptColleague, other.AcceptColleague)) return false;
      if (!object.Equals(RenewColleague, other.RenewColleague)) return false;
      if (!object.Equals(AcceptNeighbour, other.AcceptNeighbour)) return false;
      if (!object.Equals(RenewNeighbour, other.RenewNeighbour)) return false;
      if (!object.Equals(GetColleagueNodeCount, other.GetColleagueNodeCount)) return false;
      if (!object.Equals(GetRandomNodes, other.GetRandomNodes)) return false;
      if (!object.Equals(GetClosestNodes, other.GetClosestNodes)) return false;
      if (RemoteNodeResponseTypeCase != other.RemoteNodeResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptColleague) hash ^= AcceptColleague.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewColleague) hash ^= RenewColleague.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptNeighbour) hash ^= AcceptNeighbour.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewNeighbour) hash ^= RenewNeighbour.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetColleagueNodeCount) hash ^= GetColleagueNodeCount.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetRandomNodes) hash ^= GetRandomNodes.GetHashCode();
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetClosestNodes) hash ^= GetClosestNodes.GetHashCode();
      hash ^= (int) remoteNodeResponseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptColleague) {
        output.WriteRawTag(10);
        output.WriteMessage(AcceptColleague);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewColleague) {
        output.WriteRawTag(18);
        output.WriteMessage(RenewColleague);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptNeighbour) {
        output.WriteRawTag(26);
        output.WriteMessage(AcceptNeighbour);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewNeighbour) {
        output.WriteRawTag(34);
        output.WriteMessage(RenewNeighbour);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetColleagueNodeCount) {
        output.WriteRawTag(42);
        output.WriteMessage(GetColleagueNodeCount);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetRandomNodes) {
        output.WriteRawTag(50);
        output.WriteMessage(GetRandomNodes);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetClosestNodes) {
        output.WriteRawTag(58);
        output.WriteMessage(GetClosestNodes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptColleague) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptColleague);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewColleague) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenewColleague);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptNeighbour) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptNeighbour);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewNeighbour) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenewNeighbour);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetColleagueNodeCount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetColleagueNodeCount);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetRandomNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetRandomNodes);
      }
      if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetClosestNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetClosestNodes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteNodeResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RemoteNodeResponseTypeCase) {
        case RemoteNodeResponseTypeOneofCase.AcceptColleague:
          AcceptColleague = other.AcceptColleague;
          break;
        case RemoteNodeResponseTypeOneofCase.RenewColleague:
          RenewColleague = other.RenewColleague;
          break;
        case RemoteNodeResponseTypeOneofCase.AcceptNeighbour:
          AcceptNeighbour = other.AcceptNeighbour;
          break;
        case RemoteNodeResponseTypeOneofCase.RenewNeighbour:
          RenewNeighbour = other.RenewNeighbour;
          break;
        case RemoteNodeResponseTypeOneofCase.GetColleagueNodeCount:
          GetColleagueNodeCount = other.GetColleagueNodeCount;
          break;
        case RemoteNodeResponseTypeOneofCase.GetRandomNodes:
          GetRandomNodes = other.GetRandomNodes;
          break;
        case RemoteNodeResponseTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.BuildNetworkResponse subBuilder = new global::Iop.Locnet.BuildNetworkResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptColleague) {
              subBuilder.MergeFrom(AcceptColleague);
            }
            input.ReadMessage(subBuilder);
            AcceptColleague = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.BuildNetworkResponse subBuilder = new global::Iop.Locnet.BuildNetworkResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewColleague) {
              subBuilder.MergeFrom(RenewColleague);
            }
            input.ReadMessage(subBuilder);
            RenewColleague = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.BuildNetworkResponse subBuilder = new global::Iop.Locnet.BuildNetworkResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.AcceptNeighbour) {
              subBuilder.MergeFrom(AcceptNeighbour);
            }
            input.ReadMessage(subBuilder);
            AcceptNeighbour = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Locnet.BuildNetworkResponse subBuilder = new global::Iop.Locnet.BuildNetworkResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.RenewNeighbour) {
              subBuilder.MergeFrom(RenewNeighbour);
            }
            input.ReadMessage(subBuilder);
            RenewNeighbour = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Locnet.GetColleagueNodeCountResponse subBuilder = new global::Iop.Locnet.GetColleagueNodeCountResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetColleagueNodeCount) {
              subBuilder.MergeFrom(GetColleagueNodeCount);
            }
            input.ReadMessage(subBuilder);
            GetColleagueNodeCount = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Locnet.GetRandomNodesResponse subBuilder = new global::Iop.Locnet.GetRandomNodesResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetRandomNodes) {
              subBuilder.MergeFrom(GetRandomNodes);
            }
            input.ReadMessage(subBuilder);
            GetRandomNodes = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Locnet.GetClosestNodesByDistanceResponse subBuilder = new global::Iop.Locnet.GetClosestNodesByDistanceResponse();
            if (remoteNodeResponseTypeCase_ == RemoteNodeResponseTypeOneofCase.GetClosestNodes) {
              subBuilder.MergeFrom(GetClosestNodes);
            }
            input.ReadMessage(subBuilder);
            GetClosestNodes = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildNetworkRequest : pb::IMessage<BuildNetworkRequest> {
    private static readonly pb::MessageParser<BuildNetworkRequest> _parser = new pb::MessageParser<BuildNetworkRequest>(() => new BuildNetworkRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildNetworkRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkRequest(BuildNetworkRequest other) : this() {
      NodeInfo = other.nodeInfo_ != null ? other.NodeInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkRequest Clone() {
      return new BuildNetworkRequest(this);
    }

    /// <summary>Field number for the "nodeInfo" field.</summary>
    public const int NodeInfoFieldNumber = 1;
    private global::Iop.Locnet.NodeInfo nodeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.NodeInfo NodeInfo {
      get { return nodeInfo_; }
      set {
        nodeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildNetworkRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildNetworkRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NodeInfo, other.NodeInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nodeInfo_ != null) hash ^= NodeInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nodeInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nodeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildNetworkRequest other) {
      if (other == null) {
        return;
      }
      if (other.nodeInfo_ != null) {
        if (nodeInfo_ == null) {
          nodeInfo_ = new global::Iop.Locnet.NodeInfo();
        }
        NodeInfo.MergeFrom(other.NodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nodeInfo_ == null) {
              nodeInfo_ = new global::Iop.Locnet.NodeInfo();
            }
            input.ReadMessage(nodeInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildNetworkResponse : pb::IMessage<BuildNetworkResponse> {
    private static readonly pb::MessageParser<BuildNetworkResponse> _parser = new pb::MessageParser<BuildNetworkResponse>(() => new BuildNetworkResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildNetworkResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkResponse(BuildNetworkResponse other) : this() {
      accepted_ = other.accepted_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildNetworkResponse Clone() {
      return new BuildNetworkResponse(this);
    }

    /// <summary>Field number for the "accepted" field.</summary>
    public const int AcceptedFieldNumber = 1;
    private bool accepted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accepted {
      get { return accepted_; }
      set {
        accepted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildNetworkResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildNetworkResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accepted != other.Accepted) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accepted != false) hash ^= Accepted.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accepted != false) {
        output.WriteRawTag(8);
        output.WriteBool(Accepted);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accepted != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildNetworkResponse other) {
      if (other == null) {
        return;
      }
      if (other.Accepted != false) {
        Accepted = other.Accepted;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Accepted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetColleagueNodeCountRequest : pb::IMessage<GetColleagueNodeCountRequest> {
    private static readonly pb::MessageParser<GetColleagueNodeCountRequest> _parser = new pb::MessageParser<GetColleagueNodeCountRequest>(() => new GetColleagueNodeCountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetColleagueNodeCountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetColleagueNodeCountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetColleagueNodeCountRequest(GetColleagueNodeCountRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetColleagueNodeCountRequest Clone() {
      return new GetColleagueNodeCountRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetColleagueNodeCountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetColleagueNodeCountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetColleagueNodeCountRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetColleagueNodeCountResponse : pb::IMessage<GetColleagueNodeCountResponse> {
    private static readonly pb::MessageParser<GetColleagueNodeCountResponse> _parser = new pb::MessageParser<GetColleagueNodeCountResponse>(() => new GetColleagueNodeCountResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetColleagueNodeCountResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetColleagueNodeCountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetColleagueNodeCountResponse(GetColleagueNodeCountResponse other) : this() {
      nodeCount_ = other.nodeCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetColleagueNodeCountResponse Clone() {
      return new GetColleagueNodeCountResponse(this);
    }

    /// <summary>Field number for the "nodeCount" field.</summary>
    public const int NodeCountFieldNumber = 1;
    private uint nodeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeCount {
      get { return nodeCount_; }
      set {
        nodeCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetColleagueNodeCountResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetColleagueNodeCountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeCount != other.NodeCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeCount != 0) hash ^= NodeCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetColleagueNodeCountResponse other) {
      if (other == null) {
        return;
      }
      if (other.NodeCount != 0) {
        NodeCount = other.NodeCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NodeCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRandomNodesRequest : pb::IMessage<GetRandomNodesRequest> {
    private static readonly pb::MessageParser<GetRandomNodesRequest> _parser = new pb::MessageParser<GetRandomNodesRequest>(() => new GetRandomNodesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRandomNodesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesRequest(GetRandomNodesRequest other) : this() {
      maxNodeCount_ = other.maxNodeCount_;
      includeNeighbours_ = other.includeNeighbours_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesRequest Clone() {
      return new GetRandomNodesRequest(this);
    }

    /// <summary>Field number for the "maxNodeCount" field.</summary>
    public const int MaxNodeCountFieldNumber = 1;
    private uint maxNodeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNodeCount {
      get { return maxNodeCount_; }
      set {
        maxNodeCount_ = value;
      }
    }

    /// <summary>Field number for the "includeNeighbours" field.</summary>
    public const int IncludeNeighboursFieldNumber = 2;
    private bool includeNeighbours_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeNeighbours {
      get { return includeNeighbours_; }
      set {
        includeNeighbours_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRandomNodesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRandomNodesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxNodeCount != other.MaxNodeCount) return false;
      if (IncludeNeighbours != other.IncludeNeighbours) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxNodeCount != 0) hash ^= MaxNodeCount.GetHashCode();
      if (IncludeNeighbours != false) hash ^= IncludeNeighbours.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxNodeCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxNodeCount);
      }
      if (IncludeNeighbours != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeNeighbours);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxNodeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNodeCount);
      }
      if (IncludeNeighbours != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRandomNodesRequest other) {
      if (other == null) {
        return;
      }
      if (other.MaxNodeCount != 0) {
        MaxNodeCount = other.MaxNodeCount;
      }
      if (other.IncludeNeighbours != false) {
        IncludeNeighbours = other.IncludeNeighbours;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxNodeCount = input.ReadUInt32();
            break;
          }
          case 16: {
            IncludeNeighbours = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRandomNodesResponse : pb::IMessage<GetRandomNodesResponse> {
    private static readonly pb::MessageParser<GetRandomNodesResponse> _parser = new pb::MessageParser<GetRandomNodesResponse>(() => new GetRandomNodesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRandomNodesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesResponse(GetRandomNodesResponse other) : this() {
      nodes_ = other.nodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomNodesResponse Clone() {
      return new GetRandomNodesResponse(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Locnet.NodeInfo> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Locnet.NodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Iop.Locnet.NodeInfo> nodes_ = new pbc::RepeatedField<global::Iop.Locnet.NodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Locnet.NodeInfo> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRandomNodesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRandomNodesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRandomNodesResponse other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetClosestNodesByDistanceRequest : pb::IMessage<GetClosestNodesByDistanceRequest> {
    private static readonly pb::MessageParser<GetClosestNodesByDistanceRequest> _parser = new pb::MessageParser<GetClosestNodesByDistanceRequest>(() => new GetClosestNodesByDistanceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClosestNodesByDistanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceRequest(GetClosestNodesByDistanceRequest other) : this() {
      Location = other.location_ != null ? other.Location.Clone() : null;
      maxRadiusKm_ = other.maxRadiusKm_;
      maxNodeCount_ = other.maxNodeCount_;
      includeNeighbours_ = other.includeNeighbours_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceRequest Clone() {
      return new GetClosestNodesByDistanceRequest(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Iop.Locnet.GpsLocation location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GpsLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "maxRadiusKm" field.</summary>
    public const int MaxRadiusKmFieldNumber = 2;
    private float maxRadiusKm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxRadiusKm {
      get { return maxRadiusKm_; }
      set {
        maxRadiusKm_ = value;
      }
    }

    /// <summary>Field number for the "maxNodeCount" field.</summary>
    public const int MaxNodeCountFieldNumber = 3;
    private uint maxNodeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNodeCount {
      get { return maxNodeCount_; }
      set {
        maxNodeCount_ = value;
      }
    }

    /// <summary>Field number for the "includeNeighbours" field.</summary>
    public const int IncludeNeighboursFieldNumber = 4;
    private bool includeNeighbours_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeNeighbours {
      get { return includeNeighbours_; }
      set {
        includeNeighbours_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClosestNodesByDistanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClosestNodesByDistanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (MaxRadiusKm != other.MaxRadiusKm) return false;
      if (MaxNodeCount != other.MaxNodeCount) return false;
      if (IncludeNeighbours != other.IncludeNeighbours) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (MaxRadiusKm != 0F) hash ^= MaxRadiusKm.GetHashCode();
      if (MaxNodeCount != 0) hash ^= MaxNodeCount.GetHashCode();
      if (IncludeNeighbours != false) hash ^= IncludeNeighbours.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (MaxRadiusKm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxRadiusKm);
      }
      if (MaxNodeCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxNodeCount);
      }
      if (IncludeNeighbours != false) {
        output.WriteRawTag(32);
        output.WriteBool(IncludeNeighbours);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (MaxRadiusKm != 0F) {
        size += 1 + 4;
      }
      if (MaxNodeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNodeCount);
      }
      if (IncludeNeighbours != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClosestNodesByDistanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Iop.Locnet.GpsLocation();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.MaxRadiusKm != 0F) {
        MaxRadiusKm = other.MaxRadiusKm;
      }
      if (other.MaxNodeCount != 0) {
        MaxNodeCount = other.MaxNodeCount;
      }
      if (other.IncludeNeighbours != false) {
        IncludeNeighbours = other.IncludeNeighbours;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (location_ == null) {
              location_ = new global::Iop.Locnet.GpsLocation();
            }
            input.ReadMessage(location_);
            break;
          }
          case 21: {
            MaxRadiusKm = input.ReadFloat();
            break;
          }
          case 24: {
            MaxNodeCount = input.ReadUInt32();
            break;
          }
          case 32: {
            IncludeNeighbours = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetClosestNodesByDistanceResponse : pb::IMessage<GetClosestNodesByDistanceResponse> {
    private static readonly pb::MessageParser<GetClosestNodesByDistanceResponse> _parser = new pb::MessageParser<GetClosestNodesByDistanceResponse>(() => new GetClosestNodesByDistanceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClosestNodesByDistanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceResponse(GetClosestNodesByDistanceResponse other) : this() {
      nodes_ = other.nodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestNodesByDistanceResponse Clone() {
      return new GetClosestNodesByDistanceResponse(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Locnet.NodeInfo> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Locnet.NodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Iop.Locnet.NodeInfo> nodes_ = new pbc::RepeatedField<global::Iop.Locnet.NodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Locnet.NodeInfo> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClosestNodesByDistanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClosestNodesByDistanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClosestNodesByDistanceResponse other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientRequest : pb::IMessage<ClientRequest> {
    private static readonly pb::MessageParser<ClientRequest> _parser = new pb::MessageParser<ClientRequest>(() => new ClientRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRequest(ClientRequest other) : this() {
      switch (other.ClientRequestTypeCase) {
        case ClientRequestTypeOneofCase.GetServices:
          GetServices = other.GetServices.Clone();
          break;
        case ClientRequestTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes.Clone();
          break;
        case ClientRequestTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRequest Clone() {
      return new ClientRequest(this);
    }

    /// <summary>Field number for the "getServices" field.</summary>
    public const int GetServicesFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetServicesRequest GetServices {
      get { return clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetServices ? (global::Iop.Locnet.GetServicesRequest) clientRequestType_ : null; }
      set {
        clientRequestType_ = value;
        clientRequestTypeCase_ = value == null ? ClientRequestTypeOneofCase.None : ClientRequestTypeOneofCase.GetServices;
      }
    }

    /// <summary>Field number for the "getNeighbourNodes" field.</summary>
    public const int GetNeighbourNodesFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNeighbourNodesByDistanceRequest GetNeighbourNodes {
      get { return clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNeighbourNodes ? (global::Iop.Locnet.GetNeighbourNodesByDistanceRequest) clientRequestType_ : null; }
      set {
        clientRequestType_ = value;
        clientRequestTypeCase_ = value == null ? ClientRequestTypeOneofCase.None : ClientRequestTypeOneofCase.GetNeighbourNodes;
      }
    }

    /// <summary>Field number for the "getClosestNodes" field.</summary>
    public const int GetClosestNodesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetClosestNodesByDistanceRequest GetClosestNodes {
      get { return clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetClosestNodes ? (global::Iop.Locnet.GetClosestNodesByDistanceRequest) clientRequestType_ : null; }
      set {
        clientRequestType_ = value;
        clientRequestTypeCase_ = value == null ? ClientRequestTypeOneofCase.None : ClientRequestTypeOneofCase.GetClosestNodes;
      }
    }

    private object clientRequestType_;
    /// <summary>Enum of possible cases for the "ClientRequestType" oneof.</summary>
    public enum ClientRequestTypeOneofCase {
      None = 0,
      GetServices = 1,
      GetNeighbourNodes = 2,
      GetClosestNodes = 3,
    }
    private ClientRequestTypeOneofCase clientRequestTypeCase_ = ClientRequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRequestTypeOneofCase ClientRequestTypeCase {
      get { return clientRequestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientRequestType() {
      clientRequestTypeCase_ = ClientRequestTypeOneofCase.None;
      clientRequestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GetServices, other.GetServices)) return false;
      if (!object.Equals(GetNeighbourNodes, other.GetNeighbourNodes)) return false;
      if (!object.Equals(GetClosestNodes, other.GetClosestNodes)) return false;
      if (ClientRequestTypeCase != other.ClientRequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetServices) hash ^= GetServices.GetHashCode();
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNeighbourNodes) hash ^= GetNeighbourNodes.GetHashCode();
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetClosestNodes) hash ^= GetClosestNodes.GetHashCode();
      hash ^= (int) clientRequestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetServices) {
        output.WriteRawTag(10);
        output.WriteMessage(GetServices);
      }
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNeighbourNodes) {
        output.WriteRawTag(18);
        output.WriteMessage(GetNeighbourNodes);
      }
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetClosestNodes) {
        output.WriteRawTag(26);
        output.WriteMessage(GetClosestNodes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetServices) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetServices);
      }
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNeighbourNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNeighbourNodes);
      }
      if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetClosestNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetClosestNodes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientRequest other) {
      if (other == null) {
        return;
      }
      switch (other.ClientRequestTypeCase) {
        case ClientRequestTypeOneofCase.GetServices:
          GetServices = other.GetServices;
          break;
        case ClientRequestTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes;
          break;
        case ClientRequestTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.GetServicesRequest subBuilder = new global::Iop.Locnet.GetServicesRequest();
            if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetServices) {
              subBuilder.MergeFrom(GetServices);
            }
            input.ReadMessage(subBuilder);
            GetServices = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.GetNeighbourNodesByDistanceRequest subBuilder = new global::Iop.Locnet.GetNeighbourNodesByDistanceRequest();
            if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetNeighbourNodes) {
              subBuilder.MergeFrom(GetNeighbourNodes);
            }
            input.ReadMessage(subBuilder);
            GetNeighbourNodes = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.GetClosestNodesByDistanceRequest subBuilder = new global::Iop.Locnet.GetClosestNodesByDistanceRequest();
            if (clientRequestTypeCase_ == ClientRequestTypeOneofCase.GetClosestNodes) {
              subBuilder.MergeFrom(GetClosestNodes);
            }
            input.ReadMessage(subBuilder);
            GetClosestNodes = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientResponse : pb::IMessage<ClientResponse> {
    private static readonly pb::MessageParser<ClientResponse> _parser = new pb::MessageParser<ClientResponse>(() => new ClientResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientResponse(ClientResponse other) : this() {
      switch (other.ClientResponseTypeCase) {
        case ClientResponseTypeOneofCase.GetServices:
          GetServices = other.GetServices.Clone();
          break;
        case ClientResponseTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes.Clone();
          break;
        case ClientResponseTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientResponse Clone() {
      return new ClientResponse(this);
    }

    /// <summary>Field number for the "getServices" field.</summary>
    public const int GetServicesFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetServicesResponse GetServices {
      get { return clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetServices ? (global::Iop.Locnet.GetServicesResponse) clientResponseType_ : null; }
      set {
        clientResponseType_ = value;
        clientResponseTypeCase_ = value == null ? ClientResponseTypeOneofCase.None : ClientResponseTypeOneofCase.GetServices;
      }
    }

    /// <summary>Field number for the "getNeighbourNodes" field.</summary>
    public const int GetNeighbourNodesFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetNeighbourNodesByDistanceResponse GetNeighbourNodes {
      get { return clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNeighbourNodes ? (global::Iop.Locnet.GetNeighbourNodesByDistanceResponse) clientResponseType_ : null; }
      set {
        clientResponseType_ = value;
        clientResponseTypeCase_ = value == null ? ClientResponseTypeOneofCase.None : ClientResponseTypeOneofCase.GetNeighbourNodes;
      }
    }

    /// <summary>Field number for the "getClosestNodes" field.</summary>
    public const int GetClosestNodesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Locnet.GetClosestNodesByDistanceResponse GetClosestNodes {
      get { return clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetClosestNodes ? (global::Iop.Locnet.GetClosestNodesByDistanceResponse) clientResponseType_ : null; }
      set {
        clientResponseType_ = value;
        clientResponseTypeCase_ = value == null ? ClientResponseTypeOneofCase.None : ClientResponseTypeOneofCase.GetClosestNodes;
      }
    }

    private object clientResponseType_;
    /// <summary>Enum of possible cases for the "ClientResponseType" oneof.</summary>
    public enum ClientResponseTypeOneofCase {
      None = 0,
      GetServices = 1,
      GetNeighbourNodes = 2,
      GetClosestNodes = 3,
    }
    private ClientResponseTypeOneofCase clientResponseTypeCase_ = ClientResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientResponseTypeOneofCase ClientResponseTypeCase {
      get { return clientResponseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientResponseType() {
      clientResponseTypeCase_ = ClientResponseTypeOneofCase.None;
      clientResponseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GetServices, other.GetServices)) return false;
      if (!object.Equals(GetNeighbourNodes, other.GetNeighbourNodes)) return false;
      if (!object.Equals(GetClosestNodes, other.GetClosestNodes)) return false;
      if (ClientResponseTypeCase != other.ClientResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetServices) hash ^= GetServices.GetHashCode();
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNeighbourNodes) hash ^= GetNeighbourNodes.GetHashCode();
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetClosestNodes) hash ^= GetClosestNodes.GetHashCode();
      hash ^= (int) clientResponseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetServices) {
        output.WriteRawTag(10);
        output.WriteMessage(GetServices);
      }
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNeighbourNodes) {
        output.WriteRawTag(18);
        output.WriteMessage(GetNeighbourNodes);
      }
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetClosestNodes) {
        output.WriteRawTag(26);
        output.WriteMessage(GetClosestNodes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetServices) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetServices);
      }
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNeighbourNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetNeighbourNodes);
      }
      if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetClosestNodes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetClosestNodes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ClientResponseTypeCase) {
        case ClientResponseTypeOneofCase.GetServices:
          GetServices = other.GetServices;
          break;
        case ClientResponseTypeOneofCase.GetNeighbourNodes:
          GetNeighbourNodes = other.GetNeighbourNodes;
          break;
        case ClientResponseTypeOneofCase.GetClosestNodes:
          GetClosestNodes = other.GetClosestNodes;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Locnet.GetServicesResponse subBuilder = new global::Iop.Locnet.GetServicesResponse();
            if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetServices) {
              subBuilder.MergeFrom(GetServices);
            }
            input.ReadMessage(subBuilder);
            GetServices = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Locnet.GetNeighbourNodesByDistanceResponse subBuilder = new global::Iop.Locnet.GetNeighbourNodesByDistanceResponse();
            if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetNeighbourNodes) {
              subBuilder.MergeFrom(GetNeighbourNodes);
            }
            input.ReadMessage(subBuilder);
            GetNeighbourNodes = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Locnet.GetClosestNodesByDistanceResponse subBuilder = new global::Iop.Locnet.GetClosestNodesByDistanceResponse();
            if (clientResponseTypeCase_ == ClientResponseTypeOneofCase.GetClosestNodes) {
              subBuilder.MergeFrom(GetClosestNodes);
            }
            input.ReadMessage(subBuilder);
            GetClosestNodes = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetServicesRequest : pb::IMessage<GetServicesRequest> {
    private static readonly pb::MessageParser<GetServicesRequest> _parser = new pb::MessageParser<GetServicesRequest>(() => new GetServicesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServicesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServicesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServicesRequest(GetServicesRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServicesRequest Clone() {
      return new GetServicesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServicesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServicesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServicesRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetServicesResponse : pb::IMessage<GetServicesResponse> {
    private static readonly pb::MessageParser<GetServicesResponse> _parser = new pb::MessageParser<GetServicesResponse>(() => new GetServicesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServicesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Locnet.IopLocNetReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServicesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServicesResponse(GetServicesResponse other) : this() {
      services_ = other.services_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServicesResponse Clone() {
      return new GetServicesResponse(this);
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Locnet.NodeProfile> _repeated_services_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Locnet.NodeProfile.Parser);
    private readonly pbc::RepeatedField<global::Iop.Locnet.NodeProfile> services_ = new pbc::RepeatedField<global::Iop.Locnet.NodeProfile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Locnet.NodeProfile> Services {
      get { return services_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServicesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServicesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!services_.Equals(other.services_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= services_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      services_.WriteTo(output, _repeated_services_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += services_.CalculateSize(_repeated_services_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServicesResponse other) {
      if (other == null) {
        return;
      }
      services_.Add(other.services_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            services_.AddEntriesFrom(input, _repeated_services_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
