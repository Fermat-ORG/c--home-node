// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IopHomeNode.proto3
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iop.Homenode {

  /// <summary>Holder for reflection information generated from IopHomeNode.proto3</summary>
  public static partial class IopHomeNodeReflection {

    #region Descriptor
    /// <summary>File descriptor for IopHomeNode.proto3</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IopHomeNodeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJJb3BIb21lTm9kZS5wcm90bzMSDGlvcC5ob21lbm9kZSJIChFNZXNzYWdl",
            "V2l0aEhlYWRlchIOCgZoZWFkZXIYASABKAcSIwoEYm9keRgCIAEoCzIVLmlv",
            "cC5ob21lbm9kZS5NZXNzYWdlInoKB01lc3NhZ2USCgoCaWQYASABKA0SKAoH",
            "cmVxdWVzdBgCIAEoCzIVLmlvcC5ob21lbm9kZS5SZXF1ZXN0SAASKgoIcmVz",
            "cG9uc2UYAyABKAsyFi5pb3AuaG9tZW5vZGUuUmVzcG9uc2VIAEINCgtNZXNz",
            "YWdlVHlwZSKVAQoHUmVxdWVzdBI0Cg1zaW5nbGVSZXF1ZXN0GAEgASgLMhsu",
            "aW9wLmhvbWVub2RlLlNpbmdsZVJlcXVlc3RIABJAChNjb252ZXJzYXRpb25S",
            "ZXF1ZXN0GAIgASgLMiEuaW9wLmhvbWVub2RlLkNvbnZlcnNhdGlvblJlcXVl",
            "c3RIAEISChBDb252ZXJzYXRpb25UeXBlItMBCghSZXNwb25zZRIkCgZzdGF0",
            "dXMYASABKA4yFC5pb3AuaG9tZW5vZGUuU3RhdHVzEhEKCXRpbWVzdGFtcBgC",
            "IAEoEhI2Cg5zaW5nbGVSZXNwb25zZRgDIAEoCzIcLmlvcC5ob21lbm9kZS5T",
            "aW5nbGVSZXNwb25zZUgAEkIKFGNvbnZlcnNhdGlvblJlc3BvbnNlGAQgASgL",
            "MiIuaW9wLmhvbWVub2RlLkNvbnZlcnNhdGlvblJlc3BvbnNlSABCEgoQQ29u",
            "dmVyc2F0aW9uVHlwZSKPAQoNU2luZ2xlUmVxdWVzdBIPCgd2ZXJzaW9uGAEg",
            "ASgMEikKBHBpbmcYAiABKAsyGS5pb3AuaG9tZW5vZGUuUGluZ1JlcXVlc3RI",
            "ABIzCglsaXN0Um9sZXMYAyABKAsyHi5pb3AuaG9tZW5vZGUuTGlzdFJvbGVz",
            "UmVxdWVzdEgAQg0KC1JlcXVlc3RUeXBlIpMBCg5TaW5nbGVSZXNwb25zZRIP",
            "Cgd2ZXJzaW9uGAEgASgMEioKBHBpbmcYAiABKAsyGi5pb3AuaG9tZW5vZGUu",
            "UGluZ1Jlc3BvbnNlSAASNAoJbGlzdFJvbGVzGAMgASgLMh8uaW9wLmhvbWVu",
            "b2RlLkxpc3RSb2xlc1Jlc3BvbnNlSABCDgoMUmVzcG9uc2VUeXBlIjUKE0Nv",
            "bnZlcnNhdGlvblJlcXVlc3QSDwoFZHVtbXkYASABKA1IAEINCgtSZXF1ZXN0",
            "VHlwZSI2ChRDb252ZXJzYXRpb25SZXNwb25zZRIPCgVkdW1teRgCIAEoDUgA",
            "Qg0KC1JlcXVlc3RUeXBlIh4KC1BpbmdSZXF1ZXN0Eg8KB3BheWxvYWQYASAB",
            "KAwiLgoMUGluZ1Jlc3BvbnNlEg8KB3BheWxvYWQYASABKAwSDQoFY2xvY2sY",
            "AiABKBIiEgoQTGlzdFJvbGVzUmVxdWVzdCI7ChFMaXN0Um9sZXNSZXNwb25z",
            "ZRImCgRyb2xlGAEgAygLMhguaW9wLmhvbWVub2RlLlNlcnZlclJvbGUiZAoK",
            "U2VydmVyUm9sZRIqCgRyb2xlGAEgASgOMhwuaW9wLmhvbWVub2RlLlNlcnZl",
            "clJvbGVUeXBlEgwKBHBvcnQYAiABKA0SDQoFaXNUY3AYAyABKAgSDQoFaXNU",
            "bHMYBCABKAgqbgoGU3RhdHVzEg0KCVNUQVRVU19PSxAAEhwKGEVSUk9SX1BS",
            "T1RPQ09MX1ZJT0xBVElPThABEhUKEUVSUk9SX1VOU1VQUE9SVEVEEAISEAoM",
            "RVJST1JfQkFOTkVEEAMSDgoKRVJST1JfQlVTWRAEKmYKDlNlcnZlclJvbGVU",
            "eXBlEgsKB1BSSU1BUlkQABIPCgtORF9ORUlHSEJPUhABEhAKDE5EX0NPTExF",
            "QUdVRRACEhMKD0NMX05PTl9DVVNUT01FUhADEg8KC0NMX0NVU1RPTUVSEARi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Iop.Homenode.Status), typeof(global::Iop.Homenode.ServerRoleType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.MessageWithHeader), global::Iop.Homenode.MessageWithHeader.Parser, new[]{ "Header", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.Message), global::Iop.Homenode.Message.Parser, new[]{ "Id", "Request", "Response" }, new[]{ "MessageType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.Request), global::Iop.Homenode.Request.Parser, new[]{ "SingleRequest", "ConversationRequest" }, new[]{ "ConversationType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.Response), global::Iop.Homenode.Response.Parser, new[]{ "Status", "Timestamp", "SingleResponse", "ConversationResponse" }, new[]{ "ConversationType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.SingleRequest), global::Iop.Homenode.SingleRequest.Parser, new[]{ "Version", "Ping", "ListRoles" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.SingleResponse), global::Iop.Homenode.SingleResponse.Parser, new[]{ "Version", "Ping", "ListRoles" }, new[]{ "ResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ConversationRequest), global::Iop.Homenode.ConversationRequest.Parser, new[]{ "Dummy" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ConversationResponse), global::Iop.Homenode.ConversationResponse.Parser, new[]{ "Dummy" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.PingRequest), global::Iop.Homenode.PingRequest.Parser, new[]{ "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.PingResponse), global::Iop.Homenode.PingResponse.Parser, new[]{ "Payload", "Clock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ListRolesRequest), global::Iop.Homenode.ListRolesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ListRolesResponse), global::Iop.Homenode.ListRolesResponse.Parser, new[]{ "Role" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ServerRole), global::Iop.Homenode.ServerRole.Parser, new[]{ "Role", "Port", "IsTcp", "IsTls" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Return codes to requests that inform requestor about whether the operation completed successfully or which error occurred.
  /// </summary>
  public enum Status {
    /// <summary>
    ///  General codes that can be returned to any message.
    /// </summary>
    [pbr::OriginalName("STATUS_OK")] Ok = 0,
    /// <summary>
    ///  The incoming request does not follow the protocol.
    /// </summary>
    [pbr::OriginalName("ERROR_PROTOCOL_VIOLATION")] ErrorProtocolViolation = 1,
    /// <summary>
    ///  The peer does not support the request. This is returned when a peer sends a message with an unsupported protocol version.
    /// </summary>
    [pbr::OriginalName("ERROR_UNSUPPORTED")] ErrorUnsupported = 2,
    /// <summary>
    ///  The peer will not process the request bacause the requestor is on the blacklist. Information about the blacklist entry expiration is provided in Response.timestamp.
    /// </summary>
    [pbr::OriginalName("ERROR_BANNED")] ErrorBanned = 3,
    /// <summary>
    ///  The peer will not process the request because it is too busy. The requestor can try later.
    /// </summary>
    [pbr::OriginalName("ERROR_BUSY")] ErrorBusy = 4,
  }

  /// <summary>
  ///  Known server roles.
  /// </summary>
  public enum ServerRoleType {
    /// <summary>
    ///  Primary and Unrelated Nodes Interface server role.
    /// </summary>
    [pbr::OriginalName("PRIMARY")] Primary = 0,
    /// <summary>
    ///  Neighbors Interface server role.
    /// </summary>
    [pbr::OriginalName("ND_NEIGHBOR")] NdNeighbor = 1,
    /// <summary>
    ///  Colleagues Interface server role.
    /// </summary>
    [pbr::OriginalName("ND_COLLEAGUE")] NdColleague = 2,
    /// <summary>
    ///  Customer Clients Interface server role.
    /// </summary>
    [pbr::OriginalName("CL_NON_CUSTOMER")] ClNonCustomer = 3,
    /// <summary>
    ///  Non Customer Clients Interface server role.
    /// </summary>
    [pbr::OriginalName("CL_CUSTOMER")] ClCustomer = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  This is complete message as it goes over the wire. It includes the 32-bit header with message length.
  /// </summary>
  public sealed partial class MessageWithHeader : pb::IMessage<MessageWithHeader> {
    private static readonly pb::MessageParser<MessageWithHeader> _parser = new pb::MessageParser<MessageWithHeader>(() => new MessageWithHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageWithHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader(MessageWithHeader other) : this() {
      header_ = other.header_;
      Body = other.body_ != null ? other.Body.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader Clone() {
      return new MessageWithHeader(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private uint header_;
    /// <summary>
    ///  Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Iop.Homenode.Message body_;
    /// <summary>
    ///  Message itself.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Message Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageWithHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageWithHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Header != 0) hash ^= Header.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Header != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Header);
      }
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Header != 0) {
        size += 1 + 4;
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageWithHeader other) {
      if (other == null) {
        return;
      }
      if (other.Header != 0) {
        Header = other.Header;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          body_ = new global::Iop.Homenode.Message();
        }
        Body.MergeFrom(other.Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Header = input.ReadFixed32();
            break;
          }
          case 18: {
            if (body_ == null) {
              body_ = new global::Iop.Homenode.Message();
            }
            input.ReadMessage(body_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Format of a single message.
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      id_ = other.id_;
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request.Clone();
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  Requestor defined message ID that the requestee has to return in the response. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    /// <summary>
    ///   * a new request,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Request Request {
      get { return messageTypeCase_ == MessageTypeOneofCase.Request ? (global::Iop.Homenode.Request) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Request;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    /// <summary>
    ///   * or response to a previous request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Response Response {
      get { return messageTypeCase_ == MessageTypeOneofCase.Response ? (global::Iop.Homenode.Response) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Response;
      }
    }

    private object messageType_;
    /// <summary>Enum of possible cases for the "MessageType" oneof.</summary>
    public enum MessageTypeOneofCase {
      None = 0,
      Request = 2,
      Response = 3,
    }
    private MessageTypeOneofCase messageTypeCase_ = MessageTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTypeOneofCase MessageTypeCase {
      get { return messageTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      messageTypeCase_ = MessageTypeOneofCase.None;
      messageType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      if (MessageTypeCase != other.MessageTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Request) hash ^= Request.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Response) hash ^= Response.GetHashCode();
      hash ^= (int) messageTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        output.WriteRawTag(26);
        output.WriteMessage(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request;
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Iop.Homenode.Request subBuilder = new global::Iop.Homenode.Request();
            if (messageTypeCase_ == MessageTypeOneofCase.Request) {
              subBuilder.MergeFrom(Request);
            }
            input.ReadMessage(subBuilder);
            Request = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.Response subBuilder = new global::Iop.Homenode.Response();
            if (messageTypeCase_ == MessageTypeOneofCase.Response) {
              subBuilder.MergeFrom(Response);
            }
            input.ReadMessage(subBuilder);
            Response = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Every conversation starts with a request of a requestor.
  ///  This can be either a single request, for which it is expected to receive a single response,
  ///  or this can be part of a longer conversation between the peers.
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleRequest:
          SingleRequest = other.SingleRequest.Clone();
          break;
        case ConversationTypeOneofCase.ConversationRequest:
          ConversationRequest = other.ConversationRequest.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "singleRequest" field.</summary>
    public const int SingleRequestFieldNumber = 1;
    /// <summary>
    ///  Single requests are requests that are supposed to be sent without further context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.SingleRequest SingleRequest {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest ? (global::Iop.Homenode.SingleRequest) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.SingleRequest;
      }
    }

    /// <summary>Field number for the "conversationRequest" field.</summary>
    public const int ConversationRequestFieldNumber = 2;
    /// <summary>
    ///  Conversation requests form a session with a context that has to be maintained by peers in order to correctly interpret the messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ConversationRequest ConversationRequest {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest ? (global::Iop.Homenode.ConversationRequest) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.ConversationRequest;
      }
    }

    private object conversationType_;
    /// <summary>Enum of possible cases for the "ConversationType" oneof.</summary>
    public enum ConversationTypeOneofCase {
      None = 0,
      SingleRequest = 1,
      ConversationRequest = 2,
    }
    private ConversationTypeOneofCase conversationTypeCase_ = ConversationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTypeOneofCase ConversationTypeCase {
      get { return conversationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversationType() {
      conversationTypeCase_ = ConversationTypeOneofCase.None;
      conversationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SingleRequest, other.SingleRequest)) return false;
      if (!object.Equals(ConversationRequest, other.ConversationRequest)) return false;
      if (ConversationTypeCase != other.ConversationTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) hash ^= SingleRequest.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) hash ^= ConversationRequest.GetHashCode();
      hash ^= (int) conversationTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(SingleRequest);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(ConversationRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleRequest);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationRequest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleRequest:
          SingleRequest = other.SingleRequest;
          break;
        case ConversationTypeOneofCase.ConversationRequest:
          ConversationRequest = other.ConversationRequest;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Homenode.SingleRequest subBuilder = new global::Iop.Homenode.SingleRequest();
            if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
              subBuilder.MergeFrom(SingleRequest);
            }
            input.ReadMessage(subBuilder);
            SingleRequest = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Homenode.ConversationRequest subBuilder = new global::Iop.Homenode.ConversationRequest();
            if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
              subBuilder.MergeFrom(ConversationRequest);
            }
            input.ReadMessage(subBuilder);
            ConversationRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  To every request there is a response.
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      status_ = other.status_;
      timestamp_ = other.timestamp_;
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleResponse:
          SingleResponse = other.SingleResponse.Clone();
          break;
        case ConversationTypeOneofCase.ConversationResponse:
          ConversationResponse = other.ConversationResponse.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Iop.Homenode.Status status_ = 0;
    /// <summary>
    ///  Return code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    /// <summary>
    ///  If status is ERROR_BANNED, this field contains 64-bit signed Unix UTC timestamp specifying when the blacklist entry expires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "singleResponse" field.</summary>
    public const int SingleResponseFieldNumber = 3;
    /// <summary>
    ///  Responses to single requests are sent as single responses,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.SingleResponse SingleResponse {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse ? (global::Iop.Homenode.SingleResponse) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.SingleResponse;
      }
    }

    /// <summary>Field number for the "conversationResponse" field.</summary>
    public const int ConversationResponseFieldNumber = 4;
    /// <summary>
    ///  responses to conversation requests are sent as conversation responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ConversationResponse ConversationResponse {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse ? (global::Iop.Homenode.ConversationResponse) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.ConversationResponse;
      }
    }

    private object conversationType_;
    /// <summary>Enum of possible cases for the "ConversationType" oneof.</summary>
    public enum ConversationTypeOneofCase {
      None = 0,
      SingleResponse = 3,
      ConversationResponse = 4,
    }
    private ConversationTypeOneofCase conversationTypeCase_ = ConversationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTypeOneofCase ConversationTypeCase {
      get { return conversationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversationType() {
      conversationTypeCase_ = ConversationTypeOneofCase.None;
      conversationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(SingleResponse, other.SingleResponse)) return false;
      if (!object.Equals(ConversationResponse, other.ConversationResponse)) return false;
      if (ConversationTypeCase != other.ConversationTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) hash ^= SingleResponse.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) hash ^= ConversationResponse.GetHashCode();
      hash ^= (int) conversationTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Timestamp);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
        output.WriteRawTag(26);
        output.WriteMessage(SingleResponse);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
        output.WriteRawTag(34);
        output.WriteMessage(ConversationResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Timestamp);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleResponse);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationResponse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleResponse:
          SingleResponse = other.SingleResponse;
          break;
        case ConversationTypeOneofCase.ConversationResponse:
          ConversationResponse = other.ConversationResponse;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Iop.Homenode.Status) input.ReadEnum();
            break;
          }
          case 16: {
            Timestamp = input.ReadSInt64();
            break;
          }
          case 26: {
            global::Iop.Homenode.SingleResponse subBuilder = new global::Iop.Homenode.SingleResponse();
            if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
              subBuilder.MergeFrom(SingleResponse);
            }
            input.ReadMessage(subBuilder);
            SingleResponse = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Homenode.ConversationResponse subBuilder = new global::Iop.Homenode.ConversationResponse();
            if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
              subBuilder.MergeFrom(ConversationResponse);
            }
            input.ReadMessage(subBuilder);
            ConversationResponse = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Single requests live on their own without any session or context. 
  ///  It is always possible to process a single request without any additional informaiton.
  /// </summary>
  public sealed partial class SingleRequest : pb::IMessage<SingleRequest> {
    private static readonly pb::MessageParser<SingleRequest> _parser = new pb::MessageParser<SingleRequest>(() => new SingleRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest(SingleRequest other) : this() {
      version_ = other.version_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case RequestTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest Clone() {
      return new SingleRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  Protocol version specification encoded in 3 bytes - see http://semver.org/. First byte is MAJOR, second byte is MINOR, third byte is PATCH.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.PingRequest Ping {
      get { return requestTypeCase_ == RequestTypeOneofCase.Ping ? (global::Iop.Homenode.PingRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "listRoles" field.</summary>
    public const int ListRolesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ListRolesRequest ListRoles {
      get { return requestTypeCase_ == RequestTypeOneofCase.ListRoles ? (global::Iop.Homenode.ListRolesRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ListRoles;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Ping = 2,
      ListRoles = 3,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(ListRoles, other.ListRoles)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) hash ^= ListRoles.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
        output.WriteRawTag(18);
        output.WriteMessage(Ping);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
        output.WriteRawTag(26);
        output.WriteMessage(ListRoles);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListRoles);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Ping:
          Ping = other.Ping;
          break;
        case RequestTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Homenode.PingRequest subBuilder = new global::Iop.Homenode.PingRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.ListRolesRequest subBuilder = new global::Iop.Homenode.ListRolesRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
              subBuilder.MergeFrom(ListRoles);
            }
            input.ReadMessage(subBuilder);
            ListRoles = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Single response is a reaction to single request. 
  /// </summary>
  public sealed partial class SingleResponse : pb::IMessage<SingleResponse> {
    private static readonly pb::MessageParser<SingleResponse> _parser = new pb::MessageParser<SingleResponse>(() => new SingleResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse(SingleResponse other) : this() {
      version_ = other.version_;
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case ResponseTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse Clone() {
      return new SingleResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  See SingleRequest.version. The version of response can be different than the version in request, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.PingResponse Ping {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Ping ? (global::Iop.Homenode.PingResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "listRoles" field.</summary>
    public const int ListRolesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ListRolesResponse ListRoles {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ListRoles ? (global::Iop.Homenode.ListRolesResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ListRoles;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "ResponseType" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      Ping = 2,
      ListRoles = 3,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(ListRoles, other.ListRoles)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) hash ^= ListRoles.GetHashCode();
      hash ^= (int) responseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
        output.WriteRawTag(18);
        output.WriteMessage(Ping);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
        output.WriteRawTag(26);
        output.WriteMessage(ListRoles);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListRoles);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Ping:
          Ping = other.Ping;
          break;
        case ResponseTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Homenode.PingResponse subBuilder = new global::Iop.Homenode.PingResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.ListRolesResponse subBuilder = new global::Iop.Homenode.ListRolesResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
              subBuilder.MergeFrom(ListRoles);
            }
            input.ReadMessage(subBuilder);
            ListRoles = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Conversation requests live in a session with a context that is important for the interpretation of the requests.
  ///  Unlike single requests, the order of messages is very important as each message may change the session context.
  /// </summary>
  public sealed partial class ConversationRequest : pb::IMessage<ConversationRequest> {
    private static readonly pb::MessageParser<ConversationRequest> _parser = new pb::MessageParser<ConversationRequest>(() => new ConversationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest(ConversationRequest other) : this() {
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Dummy:
          Dummy = other.Dummy;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest Clone() {
      return new ConversationRequest(this);
    }

    /// <summary>Field number for the "dummy" field.</summary>
    public const int DummyFieldNumber = 1;
    /// <summary>
    ///  TBD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dummy {
      get { return requestTypeCase_ == RequestTypeOneofCase.Dummy ? (uint) requestType_ : 0; }
      set {
        requestType_ = value;
        requestTypeCase_ = RequestTypeOneofCase.Dummy;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Dummy = 1,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dummy != other.Dummy) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestTypeCase_ == RequestTypeOneofCase.Dummy) hash ^= Dummy.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestTypeCase_ == RequestTypeOneofCase.Dummy) {
        output.WriteRawTag(8);
        output.WriteUInt32(Dummy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestTypeCase_ == RequestTypeOneofCase.Dummy) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dummy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversationRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Dummy:
          Dummy = other.Dummy;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Dummy = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Conversation response is a reaction to a conversation request.
  /// </summary>
  public sealed partial class ConversationResponse : pb::IMessage<ConversationResponse> {
    private static readonly pb::MessageParser<ConversationResponse> _parser = new pb::MessageParser<ConversationResponse>(() => new ConversationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse(ConversationResponse other) : this() {
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Dummy:
          Dummy = other.Dummy;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse Clone() {
      return new ConversationResponse(this);
    }

    /// <summary>Field number for the "dummy" field.</summary>
    public const int DummyFieldNumber = 2;
    /// <summary>
    ///  TBD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dummy {
      get { return requestTypeCase_ == RequestTypeOneofCase.Dummy ? (uint) requestType_ : 0; }
      set {
        requestType_ = value;
        requestTypeCase_ = RequestTypeOneofCase.Dummy;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Dummy = 2,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dummy != other.Dummy) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestTypeCase_ == RequestTypeOneofCase.Dummy) hash ^= Dummy.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestTypeCase_ == RequestTypeOneofCase.Dummy) {
        output.WriteRawTag(16);
        output.WriteUInt32(Dummy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestTypeCase_ == RequestTypeOneofCase.Dummy) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dummy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversationResponse other) {
      if (other == null) {
        return;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Dummy:
          Dummy = other.Dummy;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Dummy = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  An administrative message to test whether the peer is there and responds to requests.
  ///
  ///  Roles: any
  /// </summary>
  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest(PingRequest other) : this() {
      payload_ = other.payload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest Clone() {
      return new PingRequest(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    ///  At most 64 bytes of arbitrary data that will be sent back by the peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A response to PingRequest to reassure the connection works fine.
  /// </summary>
  public sealed partial class PingResponse : pb::IMessage<PingResponse> {
    private static readonly pb::MessageParser<PingResponse> _parser = new pb::MessageParser<PingResponse>(() => new PingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse(PingResponse other) : this() {
      payload_ = other.payload_;
      clock_ = other.clock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse Clone() {
      return new PingResponse(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    ///  See PingRequest.payload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clock" field.</summary>
    public const int ClockFieldNumber = 2;
    private long clock_;
    /// <summary>
    ///  64-bit signed Unix UTC time on the requestee's machine.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Clock {
      get { return clock_; }
      set {
        clock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if (Clock != other.Clock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (Clock != 0L) hash ^= Clock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (Clock != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Clock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (Clock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Clock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingResponse other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.Clock != 0L) {
        Clock = other.Clock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 16: {
            Clock = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Request server to provide a mapping between ports and roles.
  ///
  ///  Roles: primary
  /// </summary>
  public sealed partial class ListRolesRequest : pb::IMessage<ListRolesRequest> {
    private static readonly pb::MessageParser<ListRolesRequest> _parser = new pb::MessageParser<ListRolesRequest>(() => new ListRolesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRolesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest(ListRolesRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest Clone() {
      return new ListRolesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRolesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRolesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRolesRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  A response to ListRolesRequest with a list of all open ports and associated roles.
  /// </summary>
  public sealed partial class ListRolesResponse : pb::IMessage<ListRolesResponse> {
    private static readonly pb::MessageParser<ListRolesResponse> _parser = new pb::MessageParser<ListRolesResponse>(() => new ListRolesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRolesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse(ListRolesResponse other) : this() {
      role_ = other.role_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse Clone() {
      return new ListRolesResponse(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Homenode.ServerRole> _repeated_role_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Homenode.ServerRole.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.ServerRole> role_ = new pbc::RepeatedField<global::Iop.Homenode.ServerRole>();
    /// <summary>
    ///  List of server roles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.ServerRole> Role {
      get { return role_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRolesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRolesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!role_.Equals(other.role_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= role_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      role_.WriteTo(output, _repeated_role_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += role_.CalculateSize(_repeated_role_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRolesResponse other) {
      if (other == null) {
        return;
      }
      role_.Add(other.role_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            role_.AddEntriesFrom(input, _repeated_role_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Description of a single server role.
  /// </summary>
  public sealed partial class ServerRole : pb::IMessage<ServerRole> {
    private static readonly pb::MessageParser<ServerRole> _parser = new pb::MessageParser<ServerRole>(() => new ServerRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole(ServerRole other) : this() {
      role_ = other.role_;
      port_ = other.port_;
      isTcp_ = other.isTcp_;
      isTls_ = other.isTls_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole Clone() {
      return new ServerRole(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private global::Iop.Homenode.ServerRoleType role_ = 0;
    /// <summary>
    ///  Server role type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ServerRoleType Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    /// <summary>
    ///  On which port is this server role provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "isTcp" field.</summary>
    public const int IsTcpFieldNumber = 3;
    private bool isTcp_;
    /// <summary>
    ///  true if the port is TCP port, false means UDP.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTcp {
      get { return isTcp_; }
      set {
        isTcp_ = value;
      }
    }

    /// <summary>Field number for the "isTls" field.</summary>
    public const int IsTlsFieldNumber = 4;
    private bool isTls_;
    /// <summary>
    ///  true if the port is TLS encrypted, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTls {
      get { return isTls_; }
      set {
        isTls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Role != other.Role) return false;
      if (Port != other.Port) return false;
      if (IsTcp != other.IsTcp) return false;
      if (IsTls != other.IsTls) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Role != 0) hash ^= Role.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (IsTcp != false) hash ^= IsTcp.GetHashCode();
      if (IsTls != false) hash ^= IsTls.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Role != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Role);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (IsTcp != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTcp);
      }
      if (IsTls != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsTls);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (IsTcp != false) {
        size += 1 + 1;
      }
      if (IsTls != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerRole other) {
      if (other == null) {
        return;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.IsTcp != false) {
        IsTcp = other.IsTcp;
      }
      if (other.IsTls != false) {
        IsTls = other.IsTls;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            role_ = (global::Iop.Homenode.ServerRoleType) input.ReadEnum();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 24: {
            IsTcp = input.ReadBool();
            break;
          }
          case 32: {
            IsTls = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
