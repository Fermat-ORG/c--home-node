// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IopHomeNode.proto3
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iop.Homenode {

  /// <summary>Holder for reflection information generated from IopHomeNode.proto3</summary>
  public static partial class IopHomeNodeReflection {

    #region Descriptor
    /// <summary>File descriptor for IopHomeNode.proto3</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IopHomeNodeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJJb3BIb21lTm9kZS5wcm90bzMSDGlvcC5ob21lbm9kZSJIChFNZXNzYWdl",
            "V2l0aEhlYWRlchIOCgZoZWFkZXIYASABKAcSIwoEYm9keRgCIAEoCzIVLmlv",
            "cC5ob21lbm9kZS5NZXNzYWdlInoKB01lc3NhZ2USCgoCaWQYASABKA0SKAoH",
            "cmVxdWVzdBgCIAEoCzIVLmlvcC5ob21lbm9kZS5SZXF1ZXN0SAASKgoIcmVz",
            "cG9uc2UYAyABKAsyFi5pb3AuaG9tZW5vZGUuUmVzcG9uc2VIAEINCgtNZXNz",
            "YWdlVHlwZSKVAQoHUmVxdWVzdBI0Cg1zaW5nbGVSZXF1ZXN0GAEgASgLMhsu",
            "aW9wLmhvbWVub2RlLlNpbmdsZVJlcXVlc3RIABJAChNjb252ZXJzYXRpb25S",
            "ZXF1ZXN0GAIgASgLMiEuaW9wLmhvbWVub2RlLkNvbnZlcnNhdGlvblJlcXVl",
            "c3RIAEISChBDb252ZXJzYXRpb25UeXBlIuQBCghSZXNwb25zZRIkCgZzdGF0",
            "dXMYASABKA4yFC5pb3AuaG9tZW5vZGUuU3RhdHVzEhEKCXRpbWVzdGFtcBgC",
            "IAEoEhIPCgdkZXRhaWxzGAMgASgJEjYKDnNpbmdsZVJlc3BvbnNlGAggASgL",
            "MhwuaW9wLmhvbWVub2RlLlNpbmdsZVJlc3BvbnNlSAASQgoUY29udmVyc2F0",
            "aW9uUmVzcG9uc2UYCSABKAsyIi5pb3AuaG9tZW5vZGUuQ29udmVyc2F0aW9u",
            "UmVzcG9uc2VIAEISChBDb252ZXJzYXRpb25UeXBlIvsDCg1TaW5nbGVSZXF1",
            "ZXN0Eg8KB3ZlcnNpb24YASABKAwSKQoEcGluZxgCIAEoCzIZLmlvcC5ob21l",
            "bm9kZS5QaW5nUmVxdWVzdEgAEjMKCWxpc3RSb2xlcxgDIAEoCzIeLmlvcC5o",
            "b21lbm9kZS5MaXN0Um9sZXNSZXF1ZXN0SAASQwoRbGlzdEhvbWVOb2RlUGxh",
            "bnMYBCABKAsyJi5pb3AuaG9tZW5vZGUuTGlzdEhvbWVOb2RlUGxhbnNSZXF1",
            "ZXN0SAASTQoWZ2V0SWRlbnRpdHlJbmZvcm1hdGlvbhgFIAEoCzIrLmlvcC5o",
            "b21lbm9kZS5HZXRJZGVudGl0eUluZm9ybWF0aW9uUmVxdWVzdEgAElsKHWFw",
            "cGxpY2F0aW9uU2VydmljZVNlbmRNZXNzYWdlGAYgASgLMjIuaW9wLmhvbWVu",
            "b2RlLkFwcGxpY2F0aW9uU2VydmljZVNlbmRNZXNzYWdlUmVxdWVzdEgAEnkK",
            "LGFwcGxpY2F0aW9uU2VydmljZVJlY2VpdmVNZXNzYWdlTm90aWZpY2F0aW9u",
            "GAcgASgLMkEuaW9wLmhvbWVub2RlLkFwcGxpY2F0aW9uU2VydmljZVJlY2Vp",
            "dmVNZXNzYWdlTm90aWZpY2F0aW9uUmVxdWVzdEgAQg0KC1JlcXVlc3RUeXBl",
            "IoMECg5TaW5nbGVSZXNwb25zZRIPCgd2ZXJzaW9uGAEgASgMEioKBHBpbmcY",
            "AiABKAsyGi5pb3AuaG9tZW5vZGUuUGluZ1Jlc3BvbnNlSAASNAoJbGlzdFJv",
            "bGVzGAMgASgLMh8uaW9wLmhvbWVub2RlLkxpc3RSb2xlc1Jlc3BvbnNlSAAS",
            "RAoRbGlzdEhvbWVOb2RlUGxhbnMYBCABKAsyJy5pb3AuaG9tZW5vZGUuTGlz",
            "dEhvbWVOb2RlUGxhbnNSZXNwb25zZUgAEk4KFmdldElkZW50aXR5SW5mb3Jt",
            "YXRpb24YBSABKAsyLC5pb3AuaG9tZW5vZGUuR2V0SWRlbnRpdHlJbmZvcm1h",
            "dGlvblJlc3BvbnNlSAASXAodYXBwbGljYXRpb25TZXJ2aWNlU2VuZE1lc3Nh",
            "Z2UYBiABKAsyMy5pb3AuaG9tZW5vZGUuQXBwbGljYXRpb25TZXJ2aWNlU2Vu",
            "ZE1lc3NhZ2VSZXNwb25zZUgAEnoKLGFwcGxpY2F0aW9uU2VydmljZVJlY2Vp",
            "dmVNZXNzYWdlTm90aWZpY2F0aW9uGAcgASgLMkIuaW9wLmhvbWVub2RlLkFw",
            "cGxpY2F0aW9uU2VydmljZVJlY2VpdmVNZXNzYWdlTm90aWZpY2F0aW9uUmVz",
            "cG9uc2VIAEIOCgxSZXNwb25zZVR5cGUigQYKE0NvbnZlcnNhdGlvblJlcXVl",
            "c3QSEQoJc2lnbmF0dXJlGAEgASgMEjcKBXN0YXJ0GAIgASgLMiYuaW9wLmhv",
            "bWVub2RlLlN0YXJ0Q29udmVyc2F0aW9uUmVxdWVzdEgAEj8KD2hvbWVOb2Rl",
            "UmVxdWVzdBgDIAEoCzIkLmlvcC5ob21lbm9kZS5Ib21lTm9kZVJlcXVlc3RS",
            "ZXF1ZXN0SAASLwoHY2hlY2tJbhgEIAEoCzIcLmlvcC5ob21lbm9kZS5DaGVj",
            "a0luUmVxdWVzdEgAEj0KDnZlcmlmeUlkZW50aXR5GAUgASgLMiMuaW9wLmhv",
            "bWVub2RlLlZlcmlmeUlkZW50aXR5UmVxdWVzdEgAEjsKDXVwZGF0ZVByb2Zp",
            "bGUYBiABKAsyIi5pb3AuaG9tZW5vZGUuVXBkYXRlUHJvZmlsZVJlcXVlc3RI",
            "ABJPChdjYW5jZWxIb21lTm9kZUFncmVlbWVudBgHIAEoCzIsLmlvcC5ob21l",
            "bm9kZS5DYW5jZWxIb21lTm9kZUFncmVlbWVudFJlcXVlc3RIABJLChVhcHBs",
            "aWNhdGlvblNlcnZpY2VBZGQYCCABKAsyKi5pb3AuaG9tZW5vZGUuQXBwbGlj",
            "YXRpb25TZXJ2aWNlQWRkUmVxdWVzdEgAElEKGGFwcGxpY2F0aW9uU2Vydmlj",
            "ZVJlbW92ZRgJIAEoCzItLmlvcC5ob21lbm9kZS5BcHBsaWNhdGlvblNlcnZp",
            "Y2VSZW1vdmVSZXF1ZXN0SAASXQoeY2FsbElkZW50aXR5QXBwbGljYXRpb25T",
            "ZXJ2aWNlGAogASgLMjMuaW9wLmhvbWVub2RlLkNhbGxJZGVudGl0eUFwcGxp",
            "Y2F0aW9uU2VydmljZVJlcXVlc3RIABJRChhpbmNvbWluZ0NhbGxOb3RpZmlj",
            "YXRpb24YCyABKAsyLS5pb3AuaG9tZW5vZGUuSW5jb21pbmdDYWxsTm90aWZp",
            "Y2F0aW9uUmVxdWVzdEgAQg0KC1JlcXVlc3RUeXBlIowGChRDb252ZXJzYXRp",
            "b25SZXNwb25zZRIRCglzaWduYXR1cmUYASABKAwSOAoFc3RhcnQYAiABKAsy",
            "Jy5pb3AuaG9tZW5vZGUuU3RhcnRDb252ZXJzYXRpb25SZXNwb25zZUgAEkAK",
            "D2hvbWVOb2RlUmVxdWVzdBgDIAEoCzIlLmlvcC5ob21lbm9kZS5Ib21lTm9k",
            "ZVJlcXVlc3RSZXNwb25zZUgAEjAKB2NoZWNrSW4YBCABKAsyHS5pb3AuaG9t",
            "ZW5vZGUuQ2hlY2tJblJlc3BvbnNlSAASPgoOdmVyaWZ5SWRlbnRpdHkYBSAB",
            "KAsyJC5pb3AuaG9tZW5vZGUuVmVyaWZ5SWRlbnRpdHlSZXNwb25zZUgAEjwK",
            "DXVwZGF0ZVByb2ZpbGUYBiABKAsyIy5pb3AuaG9tZW5vZGUuVXBkYXRlUHJv",
            "ZmlsZVJlc3BvbnNlSAASUAoXY2FuY2VsSG9tZU5vZGVBZ3JlZW1lbnQYByAB",
            "KAsyLS5pb3AuaG9tZW5vZGUuQ2FuY2VsSG9tZU5vZGVBZ3JlZW1lbnRSZXNw",
            "b25zZUgAEkwKFWFwcGxpY2F0aW9uU2VydmljZUFkZBgIIAEoCzIrLmlvcC5o",
            "b21lbm9kZS5BcHBsaWNhdGlvblNlcnZpY2VBZGRSZXNwb25zZUgAElIKGGFw",
            "cGxpY2F0aW9uU2VydmljZVJlbW92ZRgJIAEoCzIuLmlvcC5ob21lbm9kZS5B",
            "cHBsaWNhdGlvblNlcnZpY2VSZW1vdmVSZXNwb25zZUgAEl4KHmNhbGxJZGVu",
            "dGl0eUFwcGxpY2F0aW9uU2VydmljZRgKIAEoCzI0LmlvcC5ob21lbm9kZS5D",
            "YWxsSWRlbnRpdHlBcHBsaWNhdGlvblNlcnZpY2VSZXNwb25zZUgAElIKGGlu",
            "Y29taW5nQ2FsbE5vdGlmaWNhdGlvbhgLIAEoCzIuLmlvcC5ob21lbm9kZS5J",
            "bmNvbWluZ0NhbGxOb3RpZmljYXRpb25SZXNwb25zZUgAQg0KC1JlcXVlc3RU",
            "eXBlIh4KC1BpbmdSZXF1ZXN0Eg8KB3BheWxvYWQYASABKAwiLgoMUGluZ1Jl",
            "c3BvbnNlEg8KB3BheWxvYWQYASABKAwSDQoFY2xvY2sYAiABKBIiEgoQTGlz",
            "dFJvbGVzUmVxdWVzdCI8ChFMaXN0Um9sZXNSZXNwb25zZRInCgVyb2xlcxgB",
            "IAMoCzIYLmlvcC5ob21lbm9kZS5TZXJ2ZXJSb2xlImQKClNlcnZlclJvbGUS",
            "KgoEcm9sZRgBIAEoDjIcLmlvcC5ob21lbm9kZS5TZXJ2ZXJSb2xlVHlwZRIM",
            "CgRwb3J0GAIgASgNEg0KBWlzVGNwGAMgASgIEg0KBWlzVGxzGAQgASgIIjAK",
            "GExpc3RIb21lTm9kZVBsYW5zUmVxdWVzdBIUCgxpZGVudGl0eVR5cGUYASAB",
            "KAkiRgoZTGlzdEhvbWVOb2RlUGxhbnNSZXNwb25zZRIpCgVwbGFucxgBIAMo",
            "CzIaLmlvcC5ob21lbm9kZS5Ib21lTm9kZVBsYW4isQEKDEhvbWVOb2RlUGxh",
            "bhIOCgZwbGFuSWQYASABKAwSFQoNbm9kZU5ldHdvcmtJZBgCIAEoDBIUCgxp",
            "ZGVudGl0eVR5cGUYAyABKAkSCwoDZmVlGAQgASgEEhwKFGJpbGxpbmdQZXJp",
            "b2RTZWNvbmRzGAUgASgNEjkKDnBsYW5QYXJhbWV0ZXJzGAkgAygLMiEuaW9w",
            "LmhvbWVub2RlLk5hbWVTdHJpbmdWYWx1ZVBhaXIiMgoTTmFtZVN0cmluZ1Zh",
            "bHVlUGFpchIMCgRuYW1lGAEgASgJEg0KBXZhbHVlGAIgASgJIkgKGFN0YXJ0",
            "Q29udmVyc2F0aW9uUmVxdWVzdBIZChFzdXBwb3J0ZWRWZXJzaW9ucxgBIAMo",
            "DBIRCglwdWJsaWNLZXkYAiABKAwiUgoZU3RhcnRDb252ZXJzYXRpb25SZXNw",
            "b25zZRIPCgd2ZXJzaW9uGAEgASgMEhEKCXB1YmxpY0tleRgCIAEoDBIRCglj",
            "aGFsbGVuZ2UYAyABKAwiTgoWSG9tZU5vZGVSZXF1ZXN0UmVxdWVzdBI0Cghj",
            "b250cmFjdBgBIAEoCzIiLmlvcC5ob21lbm9kZS5Ib21lTm9kZVBsYW5Db250",
            "cmFjdCJPChdIb21lTm9kZVJlcXVlc3RSZXNwb25zZRI0Cghjb250cmFjdBgB",
            "IAEoCzIiLmlvcC5ob21lbm9kZS5Ib21lTm9kZVBsYW5Db250cmFjdCJUChRI",
            "b21lTm9kZVBsYW5Db250cmFjdBIOCgZwbGFuSWQYASABKAwSGQoRaWRlbnRp",
            "dHlQdWJsaWNLZXkYAiABKAwSEQoJc3RhcnRUaW1lGAMgASgSIiMKDkNoZWNr",
            "SW5SZXF1ZXN0EhEKCWNoYWxsZW5nZRgBIAEoDCIRCg9DaGVja0luUmVzcG9u",
            "c2UiKgoVVmVyaWZ5SWRlbnRpdHlSZXF1ZXN0EhEKCWNoYWxsZW5nZRgBIAEo",
            "DCIYChZWZXJpZnlJZGVudGl0eVJlc3BvbnNlIssBChRVcGRhdGVQcm9maWxl",
            "UmVxdWVzdBISCgpzZXRWZXJzaW9uGAEgASgIEg8KB3NldE5hbWUYAiABKAgS",
            "EAoIc2V0SW1hZ2UYAyABKAgSEwoLc2V0TG9jYXRpb24YBCABKAgSFAoMc2V0",
            "RXh0cmFEYXRhGAUgASgIEg8KB3ZlcnNpb24YCCABKAwSDAoEbmFtZRgJIAEo",
            "CRINCgVpbWFnZRgKIAEoDBIQCghsb2NhdGlvbhgLIAEoBxIRCglleHRyYURh",
            "dGEYDCABKAkiFwoVVXBkYXRlUHJvZmlsZVJlc3BvbnNlIl0KHkNhbmNlbEhv",
            "bWVOb2RlQWdyZWVtZW50UmVxdWVzdBIdChVyZWRpcmVjdFRvTmV3SG9tZU5v",
            "ZGUYASABKAgSHAoUbmV3SG9tZU5vZGVOZXR3b3JrSWQYAiABKAwiIQofQ2Fu",
            "Y2VsSG9tZU5vZGVBZ3JlZW1lbnRSZXNwb25zZSI0ChxBcHBsaWNhdGlvblNl",
            "cnZpY2VBZGRSZXF1ZXN0EhQKDHNlcnZpY2VOYW1lcxgBIAMoCSIfCh1BcHBs",
            "aWNhdGlvblNlcnZpY2VBZGRSZXNwb25zZSI2Ch9BcHBsaWNhdGlvblNlcnZp",
            "Y2VSZW1vdmVSZXF1ZXN0EhMKC3NlcnZpY2VOYW1lGAEgASgJIiIKIEFwcGxp",
            "Y2F0aW9uU2VydmljZVJlbW92ZVJlc3BvbnNlIpoBCh1HZXRJZGVudGl0eUlu",
            "Zm9ybWF0aW9uUmVxdWVzdBIZChFpZGVudGl0eU5ldHdvcmtJZBgBIAEoDBIb",
            "ChNpbmNsdWRlUHJvZmlsZUltYWdlGAIgASgIEh0KFWluY2x1ZGVUaHVtYm5h",
            "aWxJbWFnZRgDIAEoCBIiChppbmNsdWRlQXBwbGljYXRpb25TZXJ2aWNlcxgE",
            "IAEoCCKLAgoeR2V0SWRlbnRpdHlJbmZvcm1hdGlvblJlc3BvbnNlEhAKCGlz",
            "SG9zdGVkGAEgASgIEh0KFWlzVGFyZ2V0SG9tZU5vZGVLbm93bhgCIAEoCBIf",
            "Chd0YXJnZXRIb21lTm9kZU5ldHdvcmtJZBgDIAEoDBIQCghpc09ubGluZRgE",
            "IAEoCBIZChFpZGVudGl0eVB1YmxpY0tleRgFIAEoDBIMCgRuYW1lGAYgASgJ",
            "EhEKCWV4dHJhRGF0YRgHIAEoCRIUCgxwcm9maWxlSW1hZ2UYCCABKAwSFgoO",
            "dGh1bWJuYWlsSW1hZ2UYCSABKAwSGwoTYXBwbGljYXRpb25TZXJ2aWNlcxgK",
            "IAMoCSJXCiVDYWxsSWRlbnRpdHlBcHBsaWNhdGlvblNlcnZpY2VSZXF1ZXN0",
            "EhkKEWlkZW50aXR5TmV0d29ya0lkGAEgASgMEhMKC3NlcnZpY2VOYW1lGAIg",
            "ASgJIj0KJkNhbGxJZGVudGl0eUFwcGxpY2F0aW9uU2VydmljZVJlc3BvbnNl",
            "EhMKC2NhbGxlclRva2VuGAEgASgMImQKH0luY29taW5nQ2FsbE5vdGlmaWNh",
            "dGlvblJlcXVlc3QSFwoPY2FsbGVyUHVibGljS2V5GAEgASgMEhMKC3NlcnZp",
            "Y2VOYW1lGAIgASgJEhMKC2NhbGxlZVRva2VuGAMgASgMIiIKIEluY29taW5n",
            "Q2FsbE5vdGlmaWNhdGlvblJlc3BvbnNlIkYKJEFwcGxpY2F0aW9uU2Vydmlj",
            "ZVNlbmRNZXNzYWdlUmVxdWVzdBINCgV0b2tlbhgBIAEoDBIPCgdtZXNzYWdl",
            "GAIgASgMIicKJUFwcGxpY2F0aW9uU2VydmljZVNlbmRNZXNzYWdlUmVzcG9u",
            "c2UiRgozQXBwbGljYXRpb25TZXJ2aWNlUmVjZWl2ZU1lc3NhZ2VOb3RpZmlj",
            "YXRpb25SZXF1ZXN0Eg8KB21lc3NhZ2UYASABKAwiNgo0QXBwbGljYXRpb25T",
            "ZXJ2aWNlUmVjZWl2ZU1lc3NhZ2VOb3RpZmljYXRpb25SZXNwb25zZSqWAwoG",
            "U3RhdHVzEg0KCVNUQVRVU19PSxAAEhwKGEVSUk9SX1BST1RPQ09MX1ZJT0xB",
            "VElPThABEhUKEUVSUk9SX1VOU1VQUE9SVEVEEAISEAoMRVJST1JfQkFOTkVE",
            "EAMSDgoKRVJST1JfQlVTWRAEEhYKEkVSUk9SX1VOQVVUSE9SSVpFRBAFEhIK",
            "DkVSUk9SX0JBRF9ST0xFEAYSIQodRVJST1JfQkFEX0NPTlZFUlNBVElPTl9T",
            "VEFUVVMQBxISCg5FUlJPUl9JTlRFUk5BTBAIEhgKFEVSUk9SX1FVT1RBX0VY",
            "Q0VFREVEEDMSGwoXRVJST1JfSU5WQUxJRF9TSUdOQVRVUkUQNBITCg9FUlJP",
            "Ul9OT1RfRk9VTkQQNRIXChNFUlJPUl9JTlZBTElEX1ZBTFVFEDYSGAoURVJS",
            "T1JfQUxSRUFEWV9FWElTVFMQNxIXChNFUlJPUl9OT1RfQVZBSUxBQkxFEDgS",
            "EgoORVJST1JfUkVKRUNURUQQORIXChNFUlJPUl9VTklOSVRJQUxJWkVEEDoq",
            "egoOU2VydmVyUm9sZVR5cGUSCwoHUFJJTUFSWRAAEg8KC05EX05FSUdIQk9S",
            "EAESEAoMTkRfQ09MTEVBR1VFEAISEwoPQ0xfTk9OX0NVU1RPTUVSEAMSDwoL",
            "Q0xfQ1VTVE9NRVIQBBISCg5DTF9BUFBfU0VSVklDRRAFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Iop.Homenode.Status), typeof(global::Iop.Homenode.ServerRoleType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.MessageWithHeader), global::Iop.Homenode.MessageWithHeader.Parser, new[]{ "Header", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.Message), global::Iop.Homenode.Message.Parser, new[]{ "Id", "Request", "Response" }, new[]{ "MessageType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.Request), global::Iop.Homenode.Request.Parser, new[]{ "SingleRequest", "ConversationRequest" }, new[]{ "ConversationType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.Response), global::Iop.Homenode.Response.Parser, new[]{ "Status", "Timestamp", "Details", "SingleResponse", "ConversationResponse" }, new[]{ "ConversationType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.SingleRequest), global::Iop.Homenode.SingleRequest.Parser, new[]{ "Version", "Ping", "ListRoles", "ListHomeNodePlans", "GetIdentityInformation", "ApplicationServiceSendMessage", "ApplicationServiceReceiveMessageNotification" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.SingleResponse), global::Iop.Homenode.SingleResponse.Parser, new[]{ "Version", "Ping", "ListRoles", "ListHomeNodePlans", "GetIdentityInformation", "ApplicationServiceSendMessage", "ApplicationServiceReceiveMessageNotification" }, new[]{ "ResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ConversationRequest), global::Iop.Homenode.ConversationRequest.Parser, new[]{ "Signature", "Start", "HomeNodeRequest", "CheckIn", "VerifyIdentity", "UpdateProfile", "CancelHomeNodeAgreement", "ApplicationServiceAdd", "ApplicationServiceRemove", "CallIdentityApplicationService", "IncomingCallNotification" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ConversationResponse), global::Iop.Homenode.ConversationResponse.Parser, new[]{ "Signature", "Start", "HomeNodeRequest", "CheckIn", "VerifyIdentity", "UpdateProfile", "CancelHomeNodeAgreement", "ApplicationServiceAdd", "ApplicationServiceRemove", "CallIdentityApplicationService", "IncomingCallNotification" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.PingRequest), global::Iop.Homenode.PingRequest.Parser, new[]{ "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.PingResponse), global::Iop.Homenode.PingResponse.Parser, new[]{ "Payload", "Clock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ListRolesRequest), global::Iop.Homenode.ListRolesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ListRolesResponse), global::Iop.Homenode.ListRolesResponse.Parser, new[]{ "Roles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ServerRole), global::Iop.Homenode.ServerRole.Parser, new[]{ "Role", "Port", "IsTcp", "IsTls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ListHomeNodePlansRequest), global::Iop.Homenode.ListHomeNodePlansRequest.Parser, new[]{ "IdentityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ListHomeNodePlansResponse), global::Iop.Homenode.ListHomeNodePlansResponse.Parser, new[]{ "Plans" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.HomeNodePlan), global::Iop.Homenode.HomeNodePlan.Parser, new[]{ "PlanId", "NodeNetworkId", "IdentityType", "Fee", "BillingPeriodSeconds", "PlanParameters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.NameStringValuePair), global::Iop.Homenode.NameStringValuePair.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.StartConversationRequest), global::Iop.Homenode.StartConversationRequest.Parser, new[]{ "SupportedVersions", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.StartConversationResponse), global::Iop.Homenode.StartConversationResponse.Parser, new[]{ "Version", "PublicKey", "Challenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.HomeNodeRequestRequest), global::Iop.Homenode.HomeNodeRequestRequest.Parser, new[]{ "Contract" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.HomeNodeRequestResponse), global::Iop.Homenode.HomeNodeRequestResponse.Parser, new[]{ "Contract" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.HomeNodePlanContract), global::Iop.Homenode.HomeNodePlanContract.Parser, new[]{ "PlanId", "IdentityPublicKey", "StartTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CheckInRequest), global::Iop.Homenode.CheckInRequest.Parser, new[]{ "Challenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CheckInResponse), global::Iop.Homenode.CheckInResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.VerifyIdentityRequest), global::Iop.Homenode.VerifyIdentityRequest.Parser, new[]{ "Challenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.VerifyIdentityResponse), global::Iop.Homenode.VerifyIdentityResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.UpdateProfileRequest), global::Iop.Homenode.UpdateProfileRequest.Parser, new[]{ "SetVersion", "SetName", "SetImage", "SetLocation", "SetExtraData", "Version", "Name", "Image", "Location", "ExtraData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.UpdateProfileResponse), global::Iop.Homenode.UpdateProfileResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CancelHomeNodeAgreementRequest), global::Iop.Homenode.CancelHomeNodeAgreementRequest.Parser, new[]{ "RedirectToNewHomeNode", "NewHomeNodeNetworkId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CancelHomeNodeAgreementResponse), global::Iop.Homenode.CancelHomeNodeAgreementResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceAddRequest), global::Iop.Homenode.ApplicationServiceAddRequest.Parser, new[]{ "ServiceNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceAddResponse), global::Iop.Homenode.ApplicationServiceAddResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceRemoveRequest), global::Iop.Homenode.ApplicationServiceRemoveRequest.Parser, new[]{ "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceRemoveResponse), global::Iop.Homenode.ApplicationServiceRemoveResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.GetIdentityInformationRequest), global::Iop.Homenode.GetIdentityInformationRequest.Parser, new[]{ "IdentityNetworkId", "IncludeProfileImage", "IncludeThumbnailImage", "IncludeApplicationServices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.GetIdentityInformationResponse), global::Iop.Homenode.GetIdentityInformationResponse.Parser, new[]{ "IsHosted", "IsTargetHomeNodeKnown", "TargetHomeNodeNetworkId", "IsOnline", "IdentityPublicKey", "Name", "ExtraData", "ProfileImage", "ThumbnailImage", "ApplicationServices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CallIdentityApplicationServiceRequest), global::Iop.Homenode.CallIdentityApplicationServiceRequest.Parser, new[]{ "IdentityNetworkId", "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CallIdentityApplicationServiceResponse), global::Iop.Homenode.CallIdentityApplicationServiceResponse.Parser, new[]{ "CallerToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.IncomingCallNotificationRequest), global::Iop.Homenode.IncomingCallNotificationRequest.Parser, new[]{ "CallerPublicKey", "ServiceName", "CalleeToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.IncomingCallNotificationResponse), global::Iop.Homenode.IncomingCallNotificationResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceSendMessageRequest), global::Iop.Homenode.ApplicationServiceSendMessageRequest.Parser, new[]{ "Token", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceSendMessageResponse), global::Iop.Homenode.ApplicationServiceSendMessageResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest), global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse), global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Return codes to requests that inform requestor about whether the operation completed successfully or which error occurred.
  /// </summary>
  public enum Status {
    /// <summary>
    ///  General codes that can be returned to any message.
    /// </summary>
    [pbr::OriginalName("STATUS_OK")] Ok = 0,
    /// <summary>
    ///  The incoming request does not follow the protocol.
    /// </summary>
    [pbr::OriginalName("ERROR_PROTOCOL_VIOLATION")] ErrorProtocolViolation = 1,
    /// <summary>
    ///  The peer does not support the request. This is returned when a peer sends a message with an unsupported protocol version.
    /// </summary>
    [pbr::OriginalName("ERROR_UNSUPPORTED")] ErrorUnsupported = 2,
    /// <summary>
    ///  The peer will not process the request bacause the requestor is on the blacklist. Information about the blacklist entry expiration is provided in 'Response.timestamp'.
    /// </summary>
    [pbr::OriginalName("ERROR_BANNED")] ErrorBanned = 3,
    /// <summary>
    ///  The peer will not process the request because it is too busy. The requestor can try later.
    /// </summary>
    [pbr::OriginalName("ERROR_BUSY")] ErrorBusy = 4,
    /// <summary>
    ///  Within conversation, some server roles require authorization of the peer before certain requests are allowed.
    /// </summary>
    [pbr::OriginalName("ERROR_UNAUTHORIZED")] ErrorUnauthorized = 5,
    /// <summary>
    ///  If a request is sent to a port that does not handle the specific role, this error is returned.
    /// </summary>
    [pbr::OriginalName("ERROR_BAD_ROLE")] ErrorBadRole = 6,
    /// <summary>
    ///  The conversation status is different from what the message requires.
    /// </summary>
    [pbr::OriginalName("ERROR_BAD_CONVERSATION_STATUS")] ErrorBadConversationStatus = 7,
    /// <summary>
    ///  Internal error occurred while processing the message.
    /// </summary>
    [pbr::OriginalName("ERROR_INTERNAL")] ErrorInternal = 8,
    /// <summary>
    ///  Return codes specific to a request.
    /// </summary>
    [pbr::OriginalName("ERROR_QUOTA_EXCEEDED")] ErrorQuotaExceeded = 51,
    /// <summary>
    ///  The signature provided be the peer does not correspond to the peer's key or the message being signed.
    /// </summary>
    [pbr::OriginalName("ERROR_INVALID_SIGNATURE")] ErrorInvalidSignature = 52,
    /// <summary>
    ///  A referenced object was not found.
    /// </summary>
    [pbr::OriginalName("ERROR_NOT_FOUND")] ErrorNotFound = 53,
    /// <summary>
    ///  One of the values provided is invalid.
    /// </summary>
    [pbr::OriginalName("ERROR_INVALID_VALUE")] ErrorInvalidValue = 54,
    /// <summary>
    ///  An object with the same identifier already exists.
    /// </summary>
    [pbr::OriginalName("ERROR_ALREADY_EXISTS")] ErrorAlreadyExists = 55,
    /// <summary>
    ///  A request object is not available.
    /// </summary>
    [pbr::OriginalName("ERROR_NOT_AVAILABLE")] ErrorNotAvailable = 56,
    /// <summary>
    ///  A third party rejected the requested action.
    /// </summary>
    [pbr::OriginalName("ERROR_REJECTED")] ErrorRejected = 57,
    /// <summary>
    ///  The requested object can not be obtained, queried or used as it is not initialized.
    /// </summary>
    [pbr::OriginalName("ERROR_UNINITIALIZED")] ErrorUninitialized = 58,
  }

  /// <summary>
  ///  Known server roles.
  /// </summary>
  public enum ServerRoleType {
    /// <summary>
    ///  Primary and Unrelated Nodes Interface server role.
    /// </summary>
    [pbr::OriginalName("PRIMARY")] Primary = 0,
    /// <summary>
    ///  Neighbors Interface server role.
    /// </summary>
    [pbr::OriginalName("ND_NEIGHBOR")] NdNeighbor = 1,
    /// <summary>
    ///  Colleagues Interface server role.
    /// </summary>
    [pbr::OriginalName("ND_COLLEAGUE")] NdColleague = 2,
    /// <summary>
    ///  Customer Clients Interface server role.
    /// </summary>
    [pbr::OriginalName("CL_NON_CUSTOMER")] ClNonCustomer = 3,
    /// <summary>
    ///  Non Customer Clients Interface server role.
    /// </summary>
    [pbr::OriginalName("CL_CUSTOMER")] ClCustomer = 4,
    /// <summary>
    ///  Application Service Interface server role.
    /// </summary>
    [pbr::OriginalName("CL_APP_SERVICE")] ClAppService = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  This is complete message as it goes over the wire. It includes the 32-bit header with message length.
  ///
  ///  There is a 1 byte prefix because of Google Protobuf protocol, so the actual binary data for a message
  ///  with body size 4660 bytes would be:
  ///
  ///    0D 34 12 00 00
  ///
  ///  where 0x0D means type 'fixed32' (which value is 5) + index of 'header', which is 1 &lt;&lt; 3,
  ///  this is followed be the 4 byte sequence 34 12 00 00, which is little endian of 0x00001234, which is 4660 decimal.
  ///  Thus the total number of bytes sent over the wire for this message would be 4665 bytes.
  /// </summary>
  public sealed partial class MessageWithHeader : pb::IMessage<MessageWithHeader> {
    private static readonly pb::MessageParser<MessageWithHeader> _parser = new pb::MessageParser<MessageWithHeader>(() => new MessageWithHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageWithHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader(MessageWithHeader other) : this() {
      header_ = other.header_;
      Body = other.body_ != null ? other.Body.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader Clone() {
      return new MessageWithHeader(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private uint header_;
    /// <summary>
    ///  Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Iop.Homenode.Message body_;
    /// <summary>
    ///  Message itself.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Message Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageWithHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageWithHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Header != 0) hash ^= Header.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Header != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Header);
      }
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Header != 0) {
        size += 1 + 4;
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageWithHeader other) {
      if (other == null) {
        return;
      }
      if (other.Header != 0) {
        Header = other.Header;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          body_ = new global::Iop.Homenode.Message();
        }
        Body.MergeFrom(other.Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Header = input.ReadFixed32();
            break;
          }
          case 18: {
            if (body_ == null) {
              body_ = new global::Iop.Homenode.Message();
            }
            input.ReadMessage(body_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Format of a single message.
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      id_ = other.id_;
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request.Clone();
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  Requestor defined message ID that the requestee has to return in the response. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    /// <summary>
    ///   * a new request,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Request Request {
      get { return messageTypeCase_ == MessageTypeOneofCase.Request ? (global::Iop.Homenode.Request) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Request;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    /// <summary>
    ///   * or response to a previous request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Response Response {
      get { return messageTypeCase_ == MessageTypeOneofCase.Response ? (global::Iop.Homenode.Response) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Response;
      }
    }

    private object messageType_;
    /// <summary>Enum of possible cases for the "MessageType" oneof.</summary>
    public enum MessageTypeOneofCase {
      None = 0,
      Request = 2,
      Response = 3,
    }
    private MessageTypeOneofCase messageTypeCase_ = MessageTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTypeOneofCase MessageTypeCase {
      get { return messageTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      messageTypeCase_ = MessageTypeOneofCase.None;
      messageType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      if (MessageTypeCase != other.MessageTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Request) hash ^= Request.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Response) hash ^= Response.GetHashCode();
      hash ^= (int) messageTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        output.WriteRawTag(26);
        output.WriteMessage(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request;
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Iop.Homenode.Request subBuilder = new global::Iop.Homenode.Request();
            if (messageTypeCase_ == MessageTypeOneofCase.Request) {
              subBuilder.MergeFrom(Request);
            }
            input.ReadMessage(subBuilder);
            Request = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.Response subBuilder = new global::Iop.Homenode.Response();
            if (messageTypeCase_ == MessageTypeOneofCase.Response) {
              subBuilder.MergeFrom(Response);
            }
            input.ReadMessage(subBuilder);
            Response = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Every conversation starts with a request of a requestor.
  ///  This can be either a single request, for which it is expected to receive a single response,
  ///  or this can be part of a longer conversation between the peers.
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleRequest:
          SingleRequest = other.SingleRequest.Clone();
          break;
        case ConversationTypeOneofCase.ConversationRequest:
          ConversationRequest = other.ConversationRequest.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "singleRequest" field.</summary>
    public const int SingleRequestFieldNumber = 1;
    /// <summary>
    ///  Single requests are requests that are supposed to be sent without further context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.SingleRequest SingleRequest {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest ? (global::Iop.Homenode.SingleRequest) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.SingleRequest;
      }
    }

    /// <summary>Field number for the "conversationRequest" field.</summary>
    public const int ConversationRequestFieldNumber = 2;
    /// <summary>
    ///  Conversation requests form a session with a context that has to be maintained by peers in order to correctly interpret the messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ConversationRequest ConversationRequest {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest ? (global::Iop.Homenode.ConversationRequest) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.ConversationRequest;
      }
    }

    private object conversationType_;
    /// <summary>Enum of possible cases for the "ConversationType" oneof.</summary>
    public enum ConversationTypeOneofCase {
      None = 0,
      SingleRequest = 1,
      ConversationRequest = 2,
    }
    private ConversationTypeOneofCase conversationTypeCase_ = ConversationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTypeOneofCase ConversationTypeCase {
      get { return conversationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversationType() {
      conversationTypeCase_ = ConversationTypeOneofCase.None;
      conversationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SingleRequest, other.SingleRequest)) return false;
      if (!object.Equals(ConversationRequest, other.ConversationRequest)) return false;
      if (ConversationTypeCase != other.ConversationTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) hash ^= SingleRequest.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) hash ^= ConversationRequest.GetHashCode();
      hash ^= (int) conversationTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(SingleRequest);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(ConversationRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleRequest);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationRequest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleRequest:
          SingleRequest = other.SingleRequest;
          break;
        case ConversationTypeOneofCase.ConversationRequest:
          ConversationRequest = other.ConversationRequest;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Homenode.SingleRequest subBuilder = new global::Iop.Homenode.SingleRequest();
            if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
              subBuilder.MergeFrom(SingleRequest);
            }
            input.ReadMessage(subBuilder);
            SingleRequest = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Homenode.ConversationRequest subBuilder = new global::Iop.Homenode.ConversationRequest();
            if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
              subBuilder.MergeFrom(ConversationRequest);
            }
            input.ReadMessage(subBuilder);
            ConversationRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  To every request there is a response.
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      status_ = other.status_;
      timestamp_ = other.timestamp_;
      details_ = other.details_;
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleResponse:
          SingleResponse = other.SingleResponse.Clone();
          break;
        case ConversationTypeOneofCase.ConversationResponse:
          ConversationResponse = other.ConversationResponse.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Iop.Homenode.Status status_ = 0;
    /// <summary>
    ///  Return code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    /// <summary>
    ///  TimestampType. If status is ERROR_BANNED, this field specifies when the blacklist entry expires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 3;
    private string details_ = "";
    /// <summary>
    ///  In case of an error, this field may contain additional details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Details {
      get { return details_; }
      set {
        details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "singleResponse" field.</summary>
    public const int SingleResponseFieldNumber = 8;
    /// <summary>
    ///  Responses to single requests are sent as single responses,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.SingleResponse SingleResponse {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse ? (global::Iop.Homenode.SingleResponse) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.SingleResponse;
      }
    }

    /// <summary>Field number for the "conversationResponse" field.</summary>
    public const int ConversationResponseFieldNumber = 9;
    /// <summary>
    ///  responses to conversation requests are sent as conversation responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ConversationResponse ConversationResponse {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse ? (global::Iop.Homenode.ConversationResponse) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.ConversationResponse;
      }
    }

    private object conversationType_;
    /// <summary>Enum of possible cases for the "ConversationType" oneof.</summary>
    public enum ConversationTypeOneofCase {
      None = 0,
      SingleResponse = 8,
      ConversationResponse = 9,
    }
    private ConversationTypeOneofCase conversationTypeCase_ = ConversationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTypeOneofCase ConversationTypeCase {
      get { return conversationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversationType() {
      conversationTypeCase_ = ConversationTypeOneofCase.None;
      conversationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Details != other.Details) return false;
      if (!object.Equals(SingleResponse, other.SingleResponse)) return false;
      if (!object.Equals(ConversationResponse, other.ConversationResponse)) return false;
      if (ConversationTypeCase != other.ConversationTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Details.Length != 0) hash ^= Details.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) hash ^= SingleResponse.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) hash ^= ConversationResponse.GetHashCode();
      hash ^= (int) conversationTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Timestamp);
      }
      if (Details.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Details);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
        output.WriteRawTag(66);
        output.WriteMessage(SingleResponse);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
        output.WriteRawTag(74);
        output.WriteMessage(ConversationResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Timestamp);
      }
      if (Details.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleResponse);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationResponse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Details.Length != 0) {
        Details = other.Details;
      }
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleResponse:
          SingleResponse = other.SingleResponse;
          break;
        case ConversationTypeOneofCase.ConversationResponse:
          ConversationResponse = other.ConversationResponse;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Iop.Homenode.Status) input.ReadEnum();
            break;
          }
          case 16: {
            Timestamp = input.ReadSInt64();
            break;
          }
          case 26: {
            Details = input.ReadString();
            break;
          }
          case 66: {
            global::Iop.Homenode.SingleResponse subBuilder = new global::Iop.Homenode.SingleResponse();
            if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
              subBuilder.MergeFrom(SingleResponse);
            }
            input.ReadMessage(subBuilder);
            SingleResponse = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Homenode.ConversationResponse subBuilder = new global::Iop.Homenode.ConversationResponse();
            if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
              subBuilder.MergeFrom(ConversationResponse);
            }
            input.ReadMessage(subBuilder);
            ConversationResponse = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Single requests live on their own without any session or context. 
  ///  It is always possible to process a single request without any additional informaiton.
  /// </summary>
  public sealed partial class SingleRequest : pb::IMessage<SingleRequest> {
    private static readonly pb::MessageParser<SingleRequest> _parser = new pb::MessageParser<SingleRequest>(() => new SingleRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest(SingleRequest other) : this() {
      version_ = other.version_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case RequestTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles.Clone();
          break;
        case RequestTypeOneofCase.ListHomeNodePlans:
          ListHomeNodePlans = other.ListHomeNodePlans.Clone();
          break;
        case RequestTypeOneofCase.GetIdentityInformation:
          GetIdentityInformation = other.GetIdentityInformation.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest Clone() {
      return new SingleRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. Protocol version specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.PingRequest Ping {
      get { return requestTypeCase_ == RequestTypeOneofCase.Ping ? (global::Iop.Homenode.PingRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "listRoles" field.</summary>
    public const int ListRolesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ListRolesRequest ListRoles {
      get { return requestTypeCase_ == RequestTypeOneofCase.ListRoles ? (global::Iop.Homenode.ListRolesRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ListRoles;
      }
    }

    /// <summary>Field number for the "listHomeNodePlans" field.</summary>
    public const int ListHomeNodePlansFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ListHomeNodePlansRequest ListHomeNodePlans {
      get { return requestTypeCase_ == RequestTypeOneofCase.ListHomeNodePlans ? (global::Iop.Homenode.ListHomeNodePlansRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ListHomeNodePlans;
      }
    }

    /// <summary>Field number for the "getIdentityInformation" field.</summary>
    public const int GetIdentityInformationFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.GetIdentityInformationRequest GetIdentityInformation {
      get { return requestTypeCase_ == RequestTypeOneofCase.GetIdentityInformation ? (global::Iop.Homenode.GetIdentityInformationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.GetIdentityInformation;
      }
    }

    /// <summary>Field number for the "applicationServiceSendMessage" field.</summary>
    public const int ApplicationServiceSendMessageFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceSendMessageRequest ApplicationServiceSendMessage {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage ? (global::Iop.Homenode.ApplicationServiceSendMessageRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceSendMessage;
      }
    }

    /// <summary>Field number for the "applicationServiceReceiveMessageNotification" field.</summary>
    public const int ApplicationServiceReceiveMessageNotificationFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest ApplicationServiceReceiveMessageNotification {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification ? (global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Ping = 2,
      ListRoles = 3,
      ListHomeNodePlans = 4,
      GetIdentityInformation = 5,
      ApplicationServiceSendMessage = 6,
      ApplicationServiceReceiveMessageNotification = 7,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(ListRoles, other.ListRoles)) return false;
      if (!object.Equals(ListHomeNodePlans, other.ListHomeNodePlans)) return false;
      if (!object.Equals(GetIdentityInformation, other.GetIdentityInformation)) return false;
      if (!object.Equals(ApplicationServiceSendMessage, other.ApplicationServiceSendMessage)) return false;
      if (!object.Equals(ApplicationServiceReceiveMessageNotification, other.ApplicationServiceReceiveMessageNotification)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) hash ^= ListRoles.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ListHomeNodePlans) hash ^= ListHomeNodePlans.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityInformation) hash ^= GetIdentityInformation.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) hash ^= ApplicationServiceSendMessage.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) hash ^= ApplicationServiceReceiveMessageNotification.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
        output.WriteRawTag(18);
        output.WriteMessage(Ping);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
        output.WriteRawTag(26);
        output.WriteMessage(ListRoles);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListHomeNodePlans) {
        output.WriteRawTag(34);
        output.WriteMessage(ListHomeNodePlans);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityInformation) {
        output.WriteRawTag(42);
        output.WriteMessage(GetIdentityInformation);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) {
        output.WriteRawTag(50);
        output.WriteMessage(ApplicationServiceSendMessage);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        output.WriteRawTag(58);
        output.WriteMessage(ApplicationServiceReceiveMessageNotification);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListRoles);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListHomeNodePlans) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListHomeNodePlans);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityInformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetIdentityInformation);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceSendMessage);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceReceiveMessageNotification);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Ping:
          Ping = other.Ping;
          break;
        case RequestTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles;
          break;
        case RequestTypeOneofCase.ListHomeNodePlans:
          ListHomeNodePlans = other.ListHomeNodePlans;
          break;
        case RequestTypeOneofCase.GetIdentityInformation:
          GetIdentityInformation = other.GetIdentityInformation;
          break;
        case RequestTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage;
          break;
        case RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Homenode.PingRequest subBuilder = new global::Iop.Homenode.PingRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.ListRolesRequest subBuilder = new global::Iop.Homenode.ListRolesRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
              subBuilder.MergeFrom(ListRoles);
            }
            input.ReadMessage(subBuilder);
            ListRoles = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Homenode.ListHomeNodePlansRequest subBuilder = new global::Iop.Homenode.ListHomeNodePlansRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ListHomeNodePlans) {
              subBuilder.MergeFrom(ListHomeNodePlans);
            }
            input.ReadMessage(subBuilder);
            ListHomeNodePlans = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Homenode.GetIdentityInformationRequest subBuilder = new global::Iop.Homenode.GetIdentityInformationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityInformation) {
              subBuilder.MergeFrom(GetIdentityInformation);
            }
            input.ReadMessage(subBuilder);
            GetIdentityInformation = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Homenode.ApplicationServiceSendMessageRequest subBuilder = new global::Iop.Homenode.ApplicationServiceSendMessageRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) {
              subBuilder.MergeFrom(ApplicationServiceSendMessage);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceSendMessage = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest subBuilder = new global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
              subBuilder.MergeFrom(ApplicationServiceReceiveMessageNotification);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceReceiveMessageNotification = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Single response is a reaction to single request. 
  /// </summary>
  public sealed partial class SingleResponse : pb::IMessage<SingleResponse> {
    private static readonly pb::MessageParser<SingleResponse> _parser = new pb::MessageParser<SingleResponse>(() => new SingleResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse(SingleResponse other) : this() {
      version_ = other.version_;
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case ResponseTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles.Clone();
          break;
        case ResponseTypeOneofCase.ListHomeNodePlans:
          ListHomeNodePlans = other.ListHomeNodePlans.Clone();
          break;
        case ResponseTypeOneofCase.GetIdentityInformation:
          GetIdentityInformation = other.GetIdentityInformation.Clone();
          break;
        case ResponseTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage.Clone();
          break;
        case ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse Clone() {
      return new SingleResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. See 'SingleRequest.version'. The version of response can be different than the version in request, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.PingResponse Ping {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Ping ? (global::Iop.Homenode.PingResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "listRoles" field.</summary>
    public const int ListRolesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ListRolesResponse ListRoles {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ListRoles ? (global::Iop.Homenode.ListRolesResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ListRoles;
      }
    }

    /// <summary>Field number for the "listHomeNodePlans" field.</summary>
    public const int ListHomeNodePlansFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ListHomeNodePlansResponse ListHomeNodePlans {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ListHomeNodePlans ? (global::Iop.Homenode.ListHomeNodePlansResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ListHomeNodePlans;
      }
    }

    /// <summary>Field number for the "getIdentityInformation" field.</summary>
    public const int GetIdentityInformationFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.GetIdentityInformationResponse GetIdentityInformation {
      get { return responseTypeCase_ == ResponseTypeOneofCase.GetIdentityInformation ? (global::Iop.Homenode.GetIdentityInformationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.GetIdentityInformation;
      }
    }

    /// <summary>Field number for the "applicationServiceSendMessage" field.</summary>
    public const int ApplicationServiceSendMessageFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceSendMessageResponse ApplicationServiceSendMessage {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage ? (global::Iop.Homenode.ApplicationServiceSendMessageResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ApplicationServiceSendMessage;
      }
    }

    /// <summary>Field number for the "applicationServiceReceiveMessageNotification" field.</summary>
    public const int ApplicationServiceReceiveMessageNotificationFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse ApplicationServiceReceiveMessageNotification {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification ? (global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "ResponseType" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      Ping = 2,
      ListRoles = 3,
      ListHomeNodePlans = 4,
      GetIdentityInformation = 5,
      ApplicationServiceSendMessage = 6,
      ApplicationServiceReceiveMessageNotification = 7,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(ListRoles, other.ListRoles)) return false;
      if (!object.Equals(ListHomeNodePlans, other.ListHomeNodePlans)) return false;
      if (!object.Equals(GetIdentityInformation, other.GetIdentityInformation)) return false;
      if (!object.Equals(ApplicationServiceSendMessage, other.ApplicationServiceSendMessage)) return false;
      if (!object.Equals(ApplicationServiceReceiveMessageNotification, other.ApplicationServiceReceiveMessageNotification)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) hash ^= ListRoles.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ListHomeNodePlans) hash ^= ListHomeNodePlans.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityInformation) hash ^= GetIdentityInformation.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) hash ^= ApplicationServiceSendMessage.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) hash ^= ApplicationServiceReceiveMessageNotification.GetHashCode();
      hash ^= (int) responseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
        output.WriteRawTag(18);
        output.WriteMessage(Ping);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
        output.WriteRawTag(26);
        output.WriteMessage(ListRoles);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListHomeNodePlans) {
        output.WriteRawTag(34);
        output.WriteMessage(ListHomeNodePlans);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityInformation) {
        output.WriteRawTag(42);
        output.WriteMessage(GetIdentityInformation);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) {
        output.WriteRawTag(50);
        output.WriteMessage(ApplicationServiceSendMessage);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        output.WriteRawTag(58);
        output.WriteMessage(ApplicationServiceReceiveMessageNotification);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListRoles);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListHomeNodePlans) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListHomeNodePlans);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityInformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetIdentityInformation);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceSendMessage);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceReceiveMessageNotification);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Ping:
          Ping = other.Ping;
          break;
        case ResponseTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles;
          break;
        case ResponseTypeOneofCase.ListHomeNodePlans:
          ListHomeNodePlans = other.ListHomeNodePlans;
          break;
        case ResponseTypeOneofCase.GetIdentityInformation:
          GetIdentityInformation = other.GetIdentityInformation;
          break;
        case ResponseTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage;
          break;
        case ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Homenode.PingResponse subBuilder = new global::Iop.Homenode.PingResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.ListRolesResponse subBuilder = new global::Iop.Homenode.ListRolesResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
              subBuilder.MergeFrom(ListRoles);
            }
            input.ReadMessage(subBuilder);
            ListRoles = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Homenode.ListHomeNodePlansResponse subBuilder = new global::Iop.Homenode.ListHomeNodePlansResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ListHomeNodePlans) {
              subBuilder.MergeFrom(ListHomeNodePlans);
            }
            input.ReadMessage(subBuilder);
            ListHomeNodePlans = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Homenode.GetIdentityInformationResponse subBuilder = new global::Iop.Homenode.GetIdentityInformationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityInformation) {
              subBuilder.MergeFrom(GetIdentityInformation);
            }
            input.ReadMessage(subBuilder);
            GetIdentityInformation = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Homenode.ApplicationServiceSendMessageResponse subBuilder = new global::Iop.Homenode.ApplicationServiceSendMessageResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) {
              subBuilder.MergeFrom(ApplicationServiceSendMessage);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceSendMessage = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse subBuilder = new global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
              subBuilder.MergeFrom(ApplicationServiceReceiveMessageNotification);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceReceiveMessageNotification = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Conversation requests live in a session with a context that is important for the interpretation of the requests.
  ///  Unlike single requests, the order of messages is very important as each message may change the session context.
  /// </summary>
  public sealed partial class ConversationRequest : pb::IMessage<ConversationRequest> {
    private static readonly pb::MessageParser<ConversationRequest> _parser = new pb::MessageParser<ConversationRequest>(() => new ConversationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest(ConversationRequest other) : this() {
      signature_ = other.signature_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Start:
          Start = other.Start.Clone();
          break;
        case RequestTypeOneofCase.HomeNodeRequest:
          HomeNodeRequest = other.HomeNodeRequest.Clone();
          break;
        case RequestTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn.Clone();
          break;
        case RequestTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity.Clone();
          break;
        case RequestTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile.Clone();
          break;
        case RequestTypeOneofCase.CancelHomeNodeAgreement:
          CancelHomeNodeAgreement = other.CancelHomeNodeAgreement.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove.Clone();
          break;
        case RequestTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService.Clone();
          break;
        case RequestTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest Clone() {
      return new ConversationRequest(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    ///  Optional (request specific) signature that signs the Protobuf binary form of the included request body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    /// <summary>
    ///  Request body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.StartConversationRequest Start {
      get { return requestTypeCase_ == RequestTypeOneofCase.Start ? (global::Iop.Homenode.StartConversationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Start;
      }
    }

    /// <summary>Field number for the "homeNodeRequest" field.</summary>
    public const int HomeNodeRequestFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.HomeNodeRequestRequest HomeNodeRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest ? (global::Iop.Homenode.HomeNodeRequestRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.HomeNodeRequest;
      }
    }

    /// <summary>Field number for the "checkIn" field.</summary>
    public const int CheckInFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CheckInRequest CheckIn {
      get { return requestTypeCase_ == RequestTypeOneofCase.CheckIn ? (global::Iop.Homenode.CheckInRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CheckIn;
      }
    }

    /// <summary>Field number for the "verifyIdentity" field.</summary>
    public const int VerifyIdentityFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.VerifyIdentityRequest VerifyIdentity {
      get { return requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity ? (global::Iop.Homenode.VerifyIdentityRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.VerifyIdentity;
      }
    }

    /// <summary>Field number for the "updateProfile" field.</summary>
    public const int UpdateProfileFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.UpdateProfileRequest UpdateProfile {
      get { return requestTypeCase_ == RequestTypeOneofCase.UpdateProfile ? (global::Iop.Homenode.UpdateProfileRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.UpdateProfile;
      }
    }

    /// <summary>Field number for the "cancelHomeNodeAgreement" field.</summary>
    public const int CancelHomeNodeAgreementFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CancelHomeNodeAgreementRequest CancelHomeNodeAgreement {
      get { return requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement ? (global::Iop.Homenode.CancelHomeNodeAgreementRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CancelHomeNodeAgreement;
      }
    }

    /// <summary>Field number for the "applicationServiceAdd" field.</summary>
    public const int ApplicationServiceAddFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceAddRequest ApplicationServiceAdd {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd ? (global::Iop.Homenode.ApplicationServiceAddRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceAdd;
      }
    }

    /// <summary>Field number for the "applicationServiceRemove" field.</summary>
    public const int ApplicationServiceRemoveFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceRemoveRequest ApplicationServiceRemove {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove ? (global::Iop.Homenode.ApplicationServiceRemoveRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceRemove;
      }
    }

    /// <summary>Field number for the "callIdentityApplicationService" field.</summary>
    public const int CallIdentityApplicationServiceFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CallIdentityApplicationServiceRequest CallIdentityApplicationService {
      get { return requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService ? (global::Iop.Homenode.CallIdentityApplicationServiceRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CallIdentityApplicationService;
      }
    }

    /// <summary>Field number for the "incomingCallNotification" field.</summary>
    public const int IncomingCallNotificationFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.IncomingCallNotificationRequest IncomingCallNotification {
      get { return requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification ? (global::Iop.Homenode.IncomingCallNotificationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.IncomingCallNotification;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Start = 2,
      HomeNodeRequest = 3,
      CheckIn = 4,
      VerifyIdentity = 5,
      UpdateProfile = 6,
      CancelHomeNodeAgreement = 7,
      ApplicationServiceAdd = 8,
      ApplicationServiceRemove = 9,
      CallIdentityApplicationService = 10,
      IncomingCallNotification = 11,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(HomeNodeRequest, other.HomeNodeRequest)) return false;
      if (!object.Equals(CheckIn, other.CheckIn)) return false;
      if (!object.Equals(VerifyIdentity, other.VerifyIdentity)) return false;
      if (!object.Equals(UpdateProfile, other.UpdateProfile)) return false;
      if (!object.Equals(CancelHomeNodeAgreement, other.CancelHomeNodeAgreement)) return false;
      if (!object.Equals(ApplicationServiceAdd, other.ApplicationServiceAdd)) return false;
      if (!object.Equals(ApplicationServiceRemove, other.ApplicationServiceRemove)) return false;
      if (!object.Equals(CallIdentityApplicationService, other.CallIdentityApplicationService)) return false;
      if (!object.Equals(IncomingCallNotification, other.IncomingCallNotification)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Start) hash ^= Start.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) hash ^= HomeNodeRequest.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) hash ^= CheckIn.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) hash ^= VerifyIdentity.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) hash ^= UpdateProfile.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) hash ^= CancelHomeNodeAgreement.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) hash ^= ApplicationServiceAdd.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) hash ^= ApplicationServiceRemove.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) hash ^= CallIdentityApplicationService.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) hash ^= IncomingCallNotification.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Start) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(HomeNodeRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
        output.WriteRawTag(34);
        output.WriteMessage(CheckIn);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
        output.WriteRawTag(42);
        output.WriteMessage(VerifyIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdateProfile);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) {
        output.WriteRawTag(58);
        output.WriteMessage(CancelHomeNodeAgreement);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
        output.WriteRawTag(66);
        output.WriteMessage(ApplicationServiceAdd);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
        output.WriteRawTag(74);
        output.WriteMessage(ApplicationServiceRemove);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
        output.WriteRawTag(82);
        output.WriteMessage(CallIdentityApplicationService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
        output.WriteRawTag(90);
        output.WriteMessage(IncomingCallNotification);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HomeNodeRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckIn);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VerifyIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateProfile);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelHomeNodeAgreement);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceAdd);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceRemove);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallIdentityApplicationService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncomingCallNotification);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Start:
          Start = other.Start;
          break;
        case RequestTypeOneofCase.HomeNodeRequest:
          HomeNodeRequest = other.HomeNodeRequest;
          break;
        case RequestTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn;
          break;
        case RequestTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity;
          break;
        case RequestTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile;
          break;
        case RequestTypeOneofCase.CancelHomeNodeAgreement:
          CancelHomeNodeAgreement = other.CancelHomeNodeAgreement;
          break;
        case RequestTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd;
          break;
        case RequestTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove;
          break;
        case RequestTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService;
          break;
        case RequestTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Homenode.StartConversationRequest subBuilder = new global::Iop.Homenode.StartConversationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.HomeNodeRequestRequest subBuilder = new global::Iop.Homenode.HomeNodeRequestRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) {
              subBuilder.MergeFrom(HomeNodeRequest);
            }
            input.ReadMessage(subBuilder);
            HomeNodeRequest = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Homenode.CheckInRequest subBuilder = new global::Iop.Homenode.CheckInRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
              subBuilder.MergeFrom(CheckIn);
            }
            input.ReadMessage(subBuilder);
            CheckIn = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Homenode.VerifyIdentityRequest subBuilder = new global::Iop.Homenode.VerifyIdentityRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
              subBuilder.MergeFrom(VerifyIdentity);
            }
            input.ReadMessage(subBuilder);
            VerifyIdentity = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Homenode.UpdateProfileRequest subBuilder = new global::Iop.Homenode.UpdateProfileRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
              subBuilder.MergeFrom(UpdateProfile);
            }
            input.ReadMessage(subBuilder);
            UpdateProfile = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Homenode.CancelHomeNodeAgreementRequest subBuilder = new global::Iop.Homenode.CancelHomeNodeAgreementRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) {
              subBuilder.MergeFrom(CancelHomeNodeAgreement);
            }
            input.ReadMessage(subBuilder);
            CancelHomeNodeAgreement = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Homenode.ApplicationServiceAddRequest subBuilder = new global::Iop.Homenode.ApplicationServiceAddRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
              subBuilder.MergeFrom(ApplicationServiceAdd);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceAdd = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Homenode.ApplicationServiceRemoveRequest subBuilder = new global::Iop.Homenode.ApplicationServiceRemoveRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
              subBuilder.MergeFrom(ApplicationServiceRemove);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceRemove = subBuilder;
            break;
          }
          case 82: {
            global::Iop.Homenode.CallIdentityApplicationServiceRequest subBuilder = new global::Iop.Homenode.CallIdentityApplicationServiceRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
              subBuilder.MergeFrom(CallIdentityApplicationService);
            }
            input.ReadMessage(subBuilder);
            CallIdentityApplicationService = subBuilder;
            break;
          }
          case 90: {
            global::Iop.Homenode.IncomingCallNotificationRequest subBuilder = new global::Iop.Homenode.IncomingCallNotificationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
              subBuilder.MergeFrom(IncomingCallNotification);
            }
            input.ReadMessage(subBuilder);
            IncomingCallNotification = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Conversation response is a reaction to a conversation request.
  /// </summary>
  public sealed partial class ConversationResponse : pb::IMessage<ConversationResponse> {
    private static readonly pb::MessageParser<ConversationResponse> _parser = new pb::MessageParser<ConversationResponse>(() => new ConversationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse(ConversationResponse other) : this() {
      signature_ = other.signature_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Start:
          Start = other.Start.Clone();
          break;
        case RequestTypeOneofCase.HomeNodeRequest:
          HomeNodeRequest = other.HomeNodeRequest.Clone();
          break;
        case RequestTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn.Clone();
          break;
        case RequestTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity.Clone();
          break;
        case RequestTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile.Clone();
          break;
        case RequestTypeOneofCase.CancelHomeNodeAgreement:
          CancelHomeNodeAgreement = other.CancelHomeNodeAgreement.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove.Clone();
          break;
        case RequestTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService.Clone();
          break;
        case RequestTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse Clone() {
      return new ConversationResponse(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    ///  Optional (response specific) signature that signs the Protobuf binary form of the included response body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    /// <summary>
    ///  Response body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.StartConversationResponse Start {
      get { return requestTypeCase_ == RequestTypeOneofCase.Start ? (global::Iop.Homenode.StartConversationResponse) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Start;
      }
    }

    /// <summary>Field number for the "homeNodeRequest" field.</summary>
    public const int HomeNodeRequestFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.HomeNodeRequestResponse HomeNodeRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest ? (global::Iop.Homenode.HomeNodeRequestResponse) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.HomeNodeRequest;
      }
    }

    /// <summary>Field number for the "checkIn" field.</summary>
    public const int CheckInFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CheckInResponse CheckIn {
      get { return requestTypeCase_ == RequestTypeOneofCase.CheckIn ? (global::Iop.Homenode.CheckInResponse) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CheckIn;
      }
    }

    /// <summary>Field number for the "verifyIdentity" field.</summary>
    public const int VerifyIdentityFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.VerifyIdentityResponse VerifyIdentity {
      get { return requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity ? (global::Iop.Homenode.VerifyIdentityResponse) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.VerifyIdentity;
      }
    }

    /// <summary>Field number for the "updateProfile" field.</summary>
    public const int UpdateProfileFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.UpdateProfileResponse UpdateProfile {
      get { return requestTypeCase_ == RequestTypeOneofCase.UpdateProfile ? (global::Iop.Homenode.UpdateProfileResponse) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.UpdateProfile;
      }
    }

    /// <summary>Field number for the "cancelHomeNodeAgreement" field.</summary>
    public const int CancelHomeNodeAgreementFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CancelHomeNodeAgreementResponse CancelHomeNodeAgreement {
      get { return requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement ? (global::Iop.Homenode.CancelHomeNodeAgreementResponse) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CancelHomeNodeAgreement;
      }
    }

    /// <summary>Field number for the "applicationServiceAdd" field.</summary>
    public const int ApplicationServiceAddFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceAddResponse ApplicationServiceAdd {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd ? (global::Iop.Homenode.ApplicationServiceAddResponse) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceAdd;
      }
    }

    /// <summary>Field number for the "applicationServiceRemove" field.</summary>
    public const int ApplicationServiceRemoveFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceRemoveResponse ApplicationServiceRemove {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove ? (global::Iop.Homenode.ApplicationServiceRemoveResponse) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceRemove;
      }
    }

    /// <summary>Field number for the "callIdentityApplicationService" field.</summary>
    public const int CallIdentityApplicationServiceFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CallIdentityApplicationServiceResponse CallIdentityApplicationService {
      get { return requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService ? (global::Iop.Homenode.CallIdentityApplicationServiceResponse) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CallIdentityApplicationService;
      }
    }

    /// <summary>Field number for the "incomingCallNotification" field.</summary>
    public const int IncomingCallNotificationFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.IncomingCallNotificationResponse IncomingCallNotification {
      get { return requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification ? (global::Iop.Homenode.IncomingCallNotificationResponse) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.IncomingCallNotification;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Start = 2,
      HomeNodeRequest = 3,
      CheckIn = 4,
      VerifyIdentity = 5,
      UpdateProfile = 6,
      CancelHomeNodeAgreement = 7,
      ApplicationServiceAdd = 8,
      ApplicationServiceRemove = 9,
      CallIdentityApplicationService = 10,
      IncomingCallNotification = 11,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(HomeNodeRequest, other.HomeNodeRequest)) return false;
      if (!object.Equals(CheckIn, other.CheckIn)) return false;
      if (!object.Equals(VerifyIdentity, other.VerifyIdentity)) return false;
      if (!object.Equals(UpdateProfile, other.UpdateProfile)) return false;
      if (!object.Equals(CancelHomeNodeAgreement, other.CancelHomeNodeAgreement)) return false;
      if (!object.Equals(ApplicationServiceAdd, other.ApplicationServiceAdd)) return false;
      if (!object.Equals(ApplicationServiceRemove, other.ApplicationServiceRemove)) return false;
      if (!object.Equals(CallIdentityApplicationService, other.CallIdentityApplicationService)) return false;
      if (!object.Equals(IncomingCallNotification, other.IncomingCallNotification)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Start) hash ^= Start.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) hash ^= HomeNodeRequest.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) hash ^= CheckIn.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) hash ^= VerifyIdentity.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) hash ^= UpdateProfile.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) hash ^= CancelHomeNodeAgreement.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) hash ^= ApplicationServiceAdd.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) hash ^= ApplicationServiceRemove.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) hash ^= CallIdentityApplicationService.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) hash ^= IncomingCallNotification.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Start) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(HomeNodeRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
        output.WriteRawTag(34);
        output.WriteMessage(CheckIn);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
        output.WriteRawTag(42);
        output.WriteMessage(VerifyIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdateProfile);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) {
        output.WriteRawTag(58);
        output.WriteMessage(CancelHomeNodeAgreement);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
        output.WriteRawTag(66);
        output.WriteMessage(ApplicationServiceAdd);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
        output.WriteRawTag(74);
        output.WriteMessage(ApplicationServiceRemove);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
        output.WriteRawTag(82);
        output.WriteMessage(CallIdentityApplicationService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
        output.WriteRawTag(90);
        output.WriteMessage(IncomingCallNotification);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HomeNodeRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckIn);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VerifyIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateProfile);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelHomeNodeAgreement);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceAdd);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceRemove);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallIdentityApplicationService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncomingCallNotification);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Start:
          Start = other.Start;
          break;
        case RequestTypeOneofCase.HomeNodeRequest:
          HomeNodeRequest = other.HomeNodeRequest;
          break;
        case RequestTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn;
          break;
        case RequestTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity;
          break;
        case RequestTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile;
          break;
        case RequestTypeOneofCase.CancelHomeNodeAgreement:
          CancelHomeNodeAgreement = other.CancelHomeNodeAgreement;
          break;
        case RequestTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd;
          break;
        case RequestTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove;
          break;
        case RequestTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService;
          break;
        case RequestTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Homenode.StartConversationResponse subBuilder = new global::Iop.Homenode.StartConversationResponse();
            if (requestTypeCase_ == RequestTypeOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.HomeNodeRequestResponse subBuilder = new global::Iop.Homenode.HomeNodeRequestResponse();
            if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) {
              subBuilder.MergeFrom(HomeNodeRequest);
            }
            input.ReadMessage(subBuilder);
            HomeNodeRequest = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Homenode.CheckInResponse subBuilder = new global::Iop.Homenode.CheckInResponse();
            if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
              subBuilder.MergeFrom(CheckIn);
            }
            input.ReadMessage(subBuilder);
            CheckIn = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Homenode.VerifyIdentityResponse subBuilder = new global::Iop.Homenode.VerifyIdentityResponse();
            if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
              subBuilder.MergeFrom(VerifyIdentity);
            }
            input.ReadMessage(subBuilder);
            VerifyIdentity = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Homenode.UpdateProfileResponse subBuilder = new global::Iop.Homenode.UpdateProfileResponse();
            if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
              subBuilder.MergeFrom(UpdateProfile);
            }
            input.ReadMessage(subBuilder);
            UpdateProfile = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Homenode.CancelHomeNodeAgreementResponse subBuilder = new global::Iop.Homenode.CancelHomeNodeAgreementResponse();
            if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) {
              subBuilder.MergeFrom(CancelHomeNodeAgreement);
            }
            input.ReadMessage(subBuilder);
            CancelHomeNodeAgreement = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Homenode.ApplicationServiceAddResponse subBuilder = new global::Iop.Homenode.ApplicationServiceAddResponse();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
              subBuilder.MergeFrom(ApplicationServiceAdd);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceAdd = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Homenode.ApplicationServiceRemoveResponse subBuilder = new global::Iop.Homenode.ApplicationServiceRemoveResponse();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
              subBuilder.MergeFrom(ApplicationServiceRemove);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceRemove = subBuilder;
            break;
          }
          case 82: {
            global::Iop.Homenode.CallIdentityApplicationServiceResponse subBuilder = new global::Iop.Homenode.CallIdentityApplicationServiceResponse();
            if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
              subBuilder.MergeFrom(CallIdentityApplicationService);
            }
            input.ReadMessage(subBuilder);
            CallIdentityApplicationService = subBuilder;
            break;
          }
          case 90: {
            global::Iop.Homenode.IncomingCallNotificationResponse subBuilder = new global::Iop.Homenode.IncomingCallNotificationResponse();
            if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
              subBuilder.MergeFrom(IncomingCallNotification);
            }
            input.ReadMessage(subBuilder);
            IncomingCallNotification = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  An administrative message to test whether the peer is there and responds to requests.
  ///
  ///  Each identity client is required to send a message not more than 60 seconds after the connection 
  ///  was established, or after the last message has been send over the connection. For node clients,
  ///  this limit is 300 seconds. Clients should use PingRequest if they have nothing else to send
  ///  and want to keep the connection open.
  ///
  ///  Roles: any
  /// </summary>
  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest(PingRequest other) : this() {
      payload_ = other.payload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest Clone() {
      return new PingRequest(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    ///  At most 64 bytes of arbitrary data that will be sent back by the peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A response to PingRequest to reassure the connection works fine.
  /// </summary>
  public sealed partial class PingResponse : pb::IMessage<PingResponse> {
    private static readonly pb::MessageParser<PingResponse> _parser = new pb::MessageParser<PingResponse>(() => new PingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse(PingResponse other) : this() {
      payload_ = other.payload_;
      clock_ = other.clock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse Clone() {
      return new PingResponse(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    ///  See 'PingRequest.payload'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clock" field.</summary>
    public const int ClockFieldNumber = 2;
    private long clock_;
    /// <summary>
    ///  64-bit signed Unix UTC time on the requestee's machine.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Clock {
      get { return clock_; }
      set {
        clock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if (Clock != other.Clock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (Clock != 0L) hash ^= Clock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (Clock != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Clock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (Clock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Clock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingResponse other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.Clock != 0L) {
        Clock = other.Clock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 16: {
            Clock = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Request server to provide a mapping between ports and roles.
  ///
  ///  Roles: primary
  /// </summary>
  public sealed partial class ListRolesRequest : pb::IMessage<ListRolesRequest> {
    private static readonly pb::MessageParser<ListRolesRequest> _parser = new pb::MessageParser<ListRolesRequest>(() => new ListRolesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRolesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest(ListRolesRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest Clone() {
      return new ListRolesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRolesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRolesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRolesRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  A response to ListRolesRequest with a list of all open ports and associated roles.
  /// </summary>
  public sealed partial class ListRolesResponse : pb::IMessage<ListRolesResponse> {
    private static readonly pb::MessageParser<ListRolesResponse> _parser = new pb::MessageParser<ListRolesResponse>(() => new ListRolesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRolesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse(ListRolesResponse other) : this() {
      roles_ = other.roles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse Clone() {
      return new ListRolesResponse(this);
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Homenode.ServerRole> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Homenode.ServerRole.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.ServerRole> roles_ = new pbc::RepeatedField<global::Iop.Homenode.ServerRole>();
    /// <summary>
    ///  List of server roles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.ServerRole> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRolesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRolesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roles_.Equals(other.roles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRolesResponse other) {
      if (other == null) {
        return;
      }
      roles_.Add(other.roles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Description of a single server role.
  /// </summary>
  public sealed partial class ServerRole : pb::IMessage<ServerRole> {
    private static readonly pb::MessageParser<ServerRole> _parser = new pb::MessageParser<ServerRole>(() => new ServerRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole(ServerRole other) : this() {
      role_ = other.role_;
      port_ = other.port_;
      isTcp_ = other.isTcp_;
      isTls_ = other.isTls_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole Clone() {
      return new ServerRole(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private global::Iop.Homenode.ServerRoleType role_ = 0;
    /// <summary>
    ///  Server role type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ServerRoleType Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    /// <summary>
    ///  On which port is this server role provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "isTcp" field.</summary>
    public const int IsTcpFieldNumber = 3;
    private bool isTcp_;
    /// <summary>
    ///  true if the port is TCP port, false means UDP.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTcp {
      get { return isTcp_; }
      set {
        isTcp_ = value;
      }
    }

    /// <summary>Field number for the "isTls" field.</summary>
    public const int IsTlsFieldNumber = 4;
    private bool isTls_;
    /// <summary>
    ///  true if the port is TLS encrypted, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTls {
      get { return isTls_; }
      set {
        isTls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Role != other.Role) return false;
      if (Port != other.Port) return false;
      if (IsTcp != other.IsTcp) return false;
      if (IsTls != other.IsTls) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Role != 0) hash ^= Role.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (IsTcp != false) hash ^= IsTcp.GetHashCode();
      if (IsTls != false) hash ^= IsTls.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Role != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Role);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (IsTcp != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTcp);
      }
      if (IsTls != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsTls);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (IsTcp != false) {
        size += 1 + 1;
      }
      if (IsTls != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerRole other) {
      if (other == null) {
        return;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.IsTcp != false) {
        IsTcp = other.IsTcp;
      }
      if (other.IsTls != false) {
        IsTls = other.IsTls;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            role_ = (global::Iop.Homenode.ServerRoleType) input.ReadEnum();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 24: {
            IsTcp = input.ReadBool();
            break;
          }
          case 32: {
            IsTls = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A client asks node for its home node plans that match the given criteria.
  ///
  ///  Roles: clNonCustomer
  /// </summary>
  public sealed partial class ListHomeNodePlansRequest : pb::IMessage<ListHomeNodePlansRequest> {
    private static readonly pb::MessageParser<ListHomeNodePlansRequest> _parser = new pb::MessageParser<ListHomeNodePlansRequest>(() => new ListHomeNodePlansRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListHomeNodePlansRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansRequest(ListHomeNodePlansRequest other) : this() {
      identityType_ = other.identityType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansRequest Clone() {
      return new ListHomeNodePlansRequest(this);
    }

    /// <summary>Field number for the "identityType" field.</summary>
    public const int IdentityTypeFieldNumber = 1;
    private string identityType_ = "";
    /// <summary>
    ///  A specific identity type, for which the client searches the plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityType {
      get { return identityType_; }
      set {
        identityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListHomeNodePlansRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListHomeNodePlansRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityType != other.IdentityType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityType.Length != 0) hash ^= IdentityType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IdentityType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListHomeNodePlansRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdentityType.Length != 0) {
        IdentityType = other.IdentityType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ListHomeNodePlansRequest that contains a list of matching plans.
  ///
  ///  Specific Error Responses: 
  ///    * ERROR_QUOTA_EXCEEDED - A node users this error code in case it wants to express that it will not accept any new clients because it has no free slots.
  /// </summary>
  public sealed partial class ListHomeNodePlansResponse : pb::IMessage<ListHomeNodePlansResponse> {
    private static readonly pb::MessageParser<ListHomeNodePlansResponse> _parser = new pb::MessageParser<ListHomeNodePlansResponse>(() => new ListHomeNodePlansResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListHomeNodePlansResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansResponse(ListHomeNodePlansResponse other) : this() {
      plans_ = other.plans_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansResponse Clone() {
      return new ListHomeNodePlansResponse(this);
    }

    /// <summary>Field number for the "plans" field.</summary>
    public const int PlansFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Homenode.HomeNodePlan> _repeated_plans_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Homenode.HomeNodePlan.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.HomeNodePlan> plans_ = new pbc::RepeatedField<global::Iop.Homenode.HomeNodePlan>();
    /// <summary>
    ///  List of matching plans.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.HomeNodePlan> Plans {
      get { return plans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListHomeNodePlansResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListHomeNodePlansResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plans_.Equals(other.plans_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plans_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      plans_.WriteTo(output, _repeated_plans_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plans_.CalculateSize(_repeated_plans_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListHomeNodePlansResponse other) {
      if (other == null) {
        return;
      }
      plans_.Add(other.plans_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            plans_.AddEntriesFrom(input, _repeated_plans_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Description of a home node hosting plan.
  /// </summary>
  public sealed partial class HomeNodePlan : pb::IMessage<HomeNodePlan> {
    private static readonly pb::MessageParser<HomeNodePlan> _parser = new pb::MessageParser<HomeNodePlan>(() => new HomeNodePlan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HomeNodePlan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlan(HomeNodePlan other) : this() {
      planId_ = other.planId_;
      nodeNetworkId_ = other.nodeNetworkId_;
      identityType_ = other.identityType_;
      fee_ = other.fee_;
      billingPeriodSeconds_ = other.billingPeriodSeconds_;
      planParameters_ = other.planParameters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlan Clone() {
      return new HomeNodePlan(this);
    }

    /// <summary>Field number for the "planId" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private pb::ByteString planId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Identifier of the plan is an SHA1 hash of the HomeNodePlan structure in Google Protobuf v3 encoding 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanId {
      get { return planId_; }
      set {
        planId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodeNetworkId" field.</summary>
    public const int NodeNetworkIdFieldNumber = 2;
    private pb::ByteString nodeNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  with planId initialized to a byte array of 20 zero bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodeNetworkId {
      get { return nodeNetworkId_; }
      set {
        nodeNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identityType" field.</summary>
    public const int IdentityTypeFieldNumber = 3;
    private string identityType_ = "";
    /// <summary>
    ///  Type of identity this plan is created for. This can include "*" as a wildcard character
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityType {
      get { return identityType_; }
      set {
        identityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 4;
    private ulong fee_;
    /// <summary>
    ///  at the end of the type to support multiple types to be served with a single plan. 
    ///  For example, the value "*" would mean that any identity type is supported,
    ///  and the value "Taxi *" would mean that any identity type that starts with "Taxi *"
    ///  would match this plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "billingPeriodSeconds" field.</summary>
    public const int BillingPeriodSecondsFieldNumber = 5;
    private uint billingPeriodSeconds_;
    /// <summary>
    ///  Length of the billing period in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BillingPeriodSeconds {
      get { return billingPeriodSeconds_; }
      set {
        billingPeriodSeconds_ = value;
      }
    }

    /// <summary>Field number for the "planParameters" field.</summary>
    public const int PlanParametersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Iop.Homenode.NameStringValuePair> _repeated_planParameters_codec
        = pb::FieldCodec.ForMessage(74, global::Iop.Homenode.NameStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.NameStringValuePair> planParameters_ = new pbc::RepeatedField<global::Iop.Homenode.NameStringValuePair>();
    /// <summary>
    ///  List of additional service parameters that define the plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.NameStringValuePair> PlanParameters {
      get { return planParameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HomeNodePlan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HomeNodePlan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlanId != other.PlanId) return false;
      if (NodeNetworkId != other.NodeNetworkId) return false;
      if (IdentityType != other.IdentityType) return false;
      if (Fee != other.Fee) return false;
      if (BillingPeriodSeconds != other.BillingPeriodSeconds) return false;
      if(!planParameters_.Equals(other.planParameters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlanId.Length != 0) hash ^= PlanId.GetHashCode();
      if (NodeNetworkId.Length != 0) hash ^= NodeNetworkId.GetHashCode();
      if (IdentityType.Length != 0) hash ^= IdentityType.GetHashCode();
      if (Fee != 0UL) hash ^= Fee.GetHashCode();
      if (BillingPeriodSeconds != 0) hash ^= BillingPeriodSeconds.GetHashCode();
      hash ^= planParameters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PlanId);
      }
      if (NodeNetworkId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NodeNetworkId);
      }
      if (IdentityType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IdentityType);
      }
      if (Fee != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Fee);
      }
      if (BillingPeriodSeconds != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BillingPeriodSeconds);
      }
      planParameters_.WriteTo(output, _repeated_planParameters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanId);
      }
      if (NodeNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodeNetworkId);
      }
      if (IdentityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityType);
      }
      if (Fee != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fee);
      }
      if (BillingPeriodSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BillingPeriodSeconds);
      }
      size += planParameters_.CalculateSize(_repeated_planParameters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HomeNodePlan other) {
      if (other == null) {
        return;
      }
      if (other.PlanId.Length != 0) {
        PlanId = other.PlanId;
      }
      if (other.NodeNetworkId.Length != 0) {
        NodeNetworkId = other.NodeNetworkId;
      }
      if (other.IdentityType.Length != 0) {
        IdentityType = other.IdentityType;
      }
      if (other.Fee != 0UL) {
        Fee = other.Fee;
      }
      if (other.BillingPeriodSeconds != 0) {
        BillingPeriodSeconds = other.BillingPeriodSeconds;
      }
      planParameters_.Add(other.planParameters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlanId = input.ReadBytes();
            break;
          }
          case 18: {
            NodeNetworkId = input.ReadBytes();
            break;
          }
          case 26: {
            IdentityType = input.ReadString();
            break;
          }
          case 32: {
            Fee = input.ReadUInt64();
            break;
          }
          case 40: {
            BillingPeriodSeconds = input.ReadUInt32();
            break;
          }
          case 74: {
            planParameters_.AddEntriesFrom(input, _repeated_planParameters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Description of name-value structure with string values.
  /// </summary>
  public sealed partial class NameStringValuePair : pb::IMessage<NameStringValuePair> {
    private static readonly pb::MessageParser<NameStringValuePair> _parser = new pb::MessageParser<NameStringValuePair>(() => new NameStringValuePair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NameStringValuePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameStringValuePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameStringValuePair(NameStringValuePair other) : this() {
      name_ = other.name_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameStringValuePair Clone() {
      return new NameStringValuePair(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  Name of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    ///  String value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NameStringValuePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NameStringValuePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NameStringValuePair other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Every conversation starts with this request, in which the requestor sends a list of protocol versions 
  ///  it supports and its public key that identifies it.
  ///
  ///  Roles: any
  ///
  ///  Conversation status: NoConversation
  /// </summary>
  public sealed partial class StartConversationRequest : pb::IMessage<StartConversationRequest> {
    private static readonly pb::MessageParser<StartConversationRequest> _parser = new pb::MessageParser<StartConversationRequest>(() => new StartConversationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartConversationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest(StartConversationRequest other) : this() {
      supportedVersions_ = other.supportedVersions_.Clone();
      publicKey_ = other.publicKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest Clone() {
      return new StartConversationRequest(this);
    }

    /// <summary>Field number for the "supportedVersions" field.</summary>
    public const int SupportedVersionsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_supportedVersions_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> supportedVersions_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///  List of VersionType items. Ordered by requestor's preference. See 'SingleRequest.version'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> SupportedVersions {
      get { return supportedVersions_; }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the requestor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartConversationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartConversationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!supportedVersions_.Equals(other.supportedVersions_)) return false;
      if (PublicKey != other.PublicKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= supportedVersions_.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      supportedVersions_.WriteTo(output, _repeated_supportedVersions_codec);
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += supportedVersions_.CalculateSize(_repeated_supportedVersions_codec);
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartConversationRequest other) {
      if (other == null) {
        return;
      }
      supportedVersions_.Add(other.supportedVersions_);
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            supportedVersions_.AddEntriesFrom(input, _repeated_supportedVersions_codec);
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to StartConversationRequest in case the requestee found at least one protocol version that 
  ///  both peers are willing to use. 
  ///  
  ///
  ///  After StartConversationResponse is sent, the conversation context includes version and keys of both peers.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_UNSUPPORTED - If the requestee does not support any of the requestor's versions, it replies with this error code.
  /// </summary>
  public sealed partial class StartConversationResponse : pb::IMessage<StartConversationResponse> {
    private static readonly pb::MessageParser<StartConversationResponse> _parser = new pb::MessageParser<StartConversationResponse>(() => new StartConversationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartConversationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse(StartConversationResponse other) : this() {
      version_ = other.version_;
      publicKey_ = other.publicKey_;
      challenge_ = other.challenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse Clone() {
      return new StartConversationResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. The version that the requestee selected from the offered set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the requestee.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 3;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  32 byte challenge data (random bytes generated by the requestee) that is used for later authentication purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartConversationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartConversationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (PublicKey != other.PublicKey) return false;
      if (Challenge != other.Challenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
      if (Challenge.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Challenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartConversationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 26: {
            Challenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A client asks node to become its home node by sending HomeNodeRequestRequest
  ///  with a signed contract. The signature is provided in 'ConversationRequest.signature'.
  ///
  ///  Roles: clNonCustomer
  ///
  ///  Conversation status: ConversationStarted
  /// </summary>
  public sealed partial class HomeNodeRequestRequest : pb::IMessage<HomeNodeRequestRequest> {
    private static readonly pb::MessageParser<HomeNodeRequestRequest> _parser = new pb::MessageParser<HomeNodeRequestRequest>(() => new HomeNodeRequestRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HomeNodeRequestRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestRequest(HomeNodeRequestRequest other) : this() {
      Contract = other.contract_ != null ? other.Contract.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestRequest Clone() {
      return new HomeNodeRequestRequest(this);
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 1;
    private global::Iop.Homenode.HomeNodePlanContract contract_;
    /// <summary>
    ///  Description of the contract that the client wants to have with the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.HomeNodePlanContract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HomeNodeRequestRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HomeNodeRequestRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Contract, other.Contract)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contract_ != null) hash ^= Contract.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contract_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HomeNodeRequestRequest other) {
      if (other == null) {
        return;
      }
      if (other.contract_ != null) {
        if (contract_ == null) {
          contract_ = new global::Iop.Homenode.HomeNodePlanContract();
        }
        Contract.MergeFrom(other.Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (contract_ == null) {
              contract_ = new global::Iop.Homenode.HomeNodePlanContract();
            }
            input.ReadMessage(contract_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to HomeNodeRequestRequest in case the node wants to accept the request.
  ///  The contract is signed with a signature in ConversationResponse.signature.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_QUOTA_EXCEEDED - A node uses this error code in case it wants to express that it will not accept any new clients because it has no free slots.
  ///    * ERROR_NOT_FOUND - 'HomeNodePlanContract.contract.planId' does not correspond to a node's plan, or the plan values are different from what the node offers.
  ///    * ERROR_INVALID_SIGNATURE - The client's signature of the contract is not valid.
  ///    * ERROR_ALREADY_EXISTS - The identity is hosted by the node already.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "contract.startTime" - 'HomeNodeRequestRequest.contract.startTime' is more than 1 hour in the past. 
  ///      * Response.details == "contract.identityPublicKey" - 'HomeNodeRequestRequest.contract.identityPublicKey' does not match identity's public key.
  /// </summary>
  public sealed partial class HomeNodeRequestResponse : pb::IMessage<HomeNodeRequestResponse> {
    private static readonly pb::MessageParser<HomeNodeRequestResponse> _parser = new pb::MessageParser<HomeNodeRequestResponse>(() => new HomeNodeRequestResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HomeNodeRequestResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestResponse(HomeNodeRequestResponse other) : this() {
      Contract = other.contract_ != null ? other.Contract.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestResponse Clone() {
      return new HomeNodeRequestResponse(this);
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 1;
    private global::Iop.Homenode.HomeNodePlanContract contract_;
    /// <summary>
    ///  Description of the contract that the client wants to have with the node and the node accepted it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.HomeNodePlanContract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HomeNodeRequestResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HomeNodeRequestResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Contract, other.Contract)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contract_ != null) hash ^= Contract.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contract_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HomeNodeRequestResponse other) {
      if (other == null) {
        return;
      }
      if (other.contract_ != null) {
        if (contract_ == null) {
          contract_ = new global::Iop.Homenode.HomeNodePlanContract();
        }
        Contract.MergeFrom(other.Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (contract_ == null) {
              contract_ = new global::Iop.Homenode.HomeNodePlanContract();
            }
            input.ReadMessage(contract_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A description of the contract between a client and a home node.
  /// </summary>
  public sealed partial class HomeNodePlanContract : pb::IMessage<HomeNodePlanContract> {
    private static readonly pb::MessageParser<HomeNodePlanContract> _parser = new pb::MessageParser<HomeNodePlanContract>(() => new HomeNodePlanContract());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HomeNodePlanContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlanContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlanContract(HomeNodePlanContract other) : this() {
      planId_ = other.planId_;
      identityPublicKey_ = other.identityPublicKey_;
      startTime_ = other.startTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlanContract Clone() {
      return new HomeNodePlanContract(this);
    }

    /// <summary>Field number for the "planId" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private pb::ByteString planId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Identifier of the home node hosting plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanId {
      get { return planId_; }
      set {
        planId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identityPublicKey" field.</summary>
    public const int IdentityPublicKeyFieldNumber = 2;
    private pb::ByteString identityPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the client's identity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityPublicKey {
      get { return identityPublicKey_; }
      set {
        identityPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private long startTime_;
    /// <summary>
    ///  TimestampType. Specifies the start time of the contract.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HomeNodePlanContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HomeNodePlanContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlanId != other.PlanId) return false;
      if (IdentityPublicKey != other.IdentityPublicKey) return false;
      if (StartTime != other.StartTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlanId.Length != 0) hash ^= PlanId.GetHashCode();
      if (IdentityPublicKey.Length != 0) hash ^= IdentityPublicKey.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PlanId);
      }
      if (IdentityPublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(IdentityPublicKey);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(StartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanId);
      }
      if (IdentityPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityPublicKey);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StartTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HomeNodePlanContract other) {
      if (other == null) {
        return;
      }
      if (other.PlanId.Length != 0) {
        PlanId = other.PlanId;
      }
      if (other.IdentityPublicKey.Length != 0) {
        IdentityPublicKey = other.IdentityPublicKey;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlanId = input.ReadBytes();
            break;
          }
          case 18: {
            IdentityPublicKey = input.ReadBytes();
            break;
          }
          case 24: {
            StartTime = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  A customer client announces it is online and it "logs in".
  ///  The client has to provide a signature in 'ConversationRequest.signature'.
  ///
  ///  Note that if a customer client that is authenticated already creates a second connection
  ///  and performs the check-in process in it, the first connection has to be disconnected
  ///  as there can not be multiple parallel connections in Authenticated state for a single identity.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: ConversationStarted
  /// </summary>
  public sealed partial class CheckInRequest : pb::IMessage<CheckInRequest> {
    private static readonly pb::MessageParser<CheckInRequest> _parser = new pb::MessageParser<CheckInRequest>(() => new CheckInRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckInRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInRequest(CheckInRequest other) : this() {
      challenge_ = other.challenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInRequest Clone() {
      return new CheckInRequest(this);
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 1;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  The exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckInRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckInRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Challenge != other.Challenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Challenge.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Challenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckInRequest other) {
      if (other == null) {
        return;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Challenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to CheckInRequest. If no error occurs, the conversation status is upgraded to Authenticated.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_INVALID_SIGNATURE - The client's signature of the challenge is not valid.
  ///    * ERROR_NOT_FOUND - The identity is not a client of the node.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "challenge" - 'CheckInRequest.challenge' is not the exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
  /// </summary>
  public sealed partial class CheckInResponse : pb::IMessage<CheckInResponse> {
    private static readonly pb::MessageParser<CheckInResponse> _parser = new pb::MessageParser<CheckInResponse>(() => new CheckInResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckInResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInResponse(CheckInResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInResponse Clone() {
      return new CheckInResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckInResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckInResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckInResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  A non-customer client verifies its public key by signing the challenge. This request is similar to CheckInRequest, 
  ///  but it is intended for non-customer clients. The client has to provide a signature in 'ConversationRequest.signature'.
  ///
  ///  Roles: clNonCustomer
  ///
  ///  Conversation status: ConversationStarted
  /// </summary>
  public sealed partial class VerifyIdentityRequest : pb::IMessage<VerifyIdentityRequest> {
    private static readonly pb::MessageParser<VerifyIdentityRequest> _parser = new pb::MessageParser<VerifyIdentityRequest>(() => new VerifyIdentityRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyIdentityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest(VerifyIdentityRequest other) : this() {
      challenge_ = other.challenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest Clone() {
      return new VerifyIdentityRequest(this);
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 1;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  The exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyIdentityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyIdentityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Challenge != other.Challenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Challenge.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Challenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyIdentityRequest other) {
      if (other == null) {
        return;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Challenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to VerifyIdentityRequest. If no error occurs, the conversation status is upgraded to Verified.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_INVALID_SIGNATURE - The client's signature of the challenge is not valid.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "challenge" - 'VerifyIdentityRequest.challenge' is not the exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
  /// </summary>
  public sealed partial class VerifyIdentityResponse : pb::IMessage<VerifyIdentityResponse> {
    private static readonly pb::MessageParser<VerifyIdentityResponse> _parser = new pb::MessageParser<VerifyIdentityResponse>(() => new VerifyIdentityResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyIdentityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse(VerifyIdentityResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse Clone() {
      return new VerifyIdentityResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyIdentityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyIdentityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyIdentityResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A customer client updates its profile hosted at the node.
  ///  The client must make sure that its profile is complete after processing the request.
  ///  After sending HomeNodeRequestRequest, its profile is almost empty - only identity type 
  ///  and public key are known. This means that the first call of this request 
  ///  has to contain all required information to make the profile complete. Namely the first 
  ///  UpdateProfileRequest has to have setVersion, setName, and setLocation set to true.
  ///
  ///  The customer client is required to initialize its profile just after finishing 
  ///  the HomeNodeRequestRequest. Until the initialization of the profile is made, the identity 
  ///  is not considered as being fully initialized and can not be queried or called by other 
  ///  identities.
  ///  
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class UpdateProfileRequest : pb::IMessage<UpdateProfileRequest> {
    private static readonly pb::MessageParser<UpdateProfileRequest> _parser = new pb::MessageParser<UpdateProfileRequest>(() => new UpdateProfileRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateProfileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileRequest(UpdateProfileRequest other) : this() {
      setVersion_ = other.setVersion_;
      setName_ = other.setName_;
      setImage_ = other.setImage_;
      setLocation_ = other.setLocation_;
      setExtraData_ = other.setExtraData_;
      version_ = other.version_;
      name_ = other.name_;
      image_ = other.image_;
      location_ = other.location_;
      extraData_ = other.extraData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileRequest Clone() {
      return new UpdateProfileRequest(this);
    }

    /// <summary>Field number for the "setVersion" field.</summary>
    public const int SetVersionFieldNumber = 1;
    private bool setVersion_;
    /// <summary>
    ///  Profile version should be updated. 'version' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetVersion {
      get { return setVersion_; }
      set {
        setVersion_ = value;
      }
    }

    /// <summary>Field number for the "setName" field.</summary>
    public const int SetNameFieldNumber = 2;
    private bool setName_;
    /// <summary>
    ///  Profile name should be updated. 'name' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetName {
      get { return setName_; }
      set {
        setName_ = value;
      }
    }

    /// <summary>Field number for the "setImage" field.</summary>
    public const int SetImageFieldNumber = 3;
    private bool setImage_;
    /// <summary>
    ///  Profile image should be updated. 'image' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetImage {
      get { return setImage_; }
      set {
        setImage_ = value;
      }
    }

    /// <summary>Field number for the "setLocation" field.</summary>
    public const int SetLocationFieldNumber = 4;
    private bool setLocation_;
    /// <summary>
    ///  Profile location should be updated. 'location' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetLocation {
      get { return setLocation_; }
      set {
        setLocation_ = value;
      }
    }

    /// <summary>Field number for the "setExtraData" field.</summary>
    public const int SetExtraDataFieldNumber = 5;
    private bool setExtraData_;
    /// <summary>
    ///  Profile extra data should be updated. 'extraData' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetExtraData {
      get { return setExtraData_; }
      set {
        setExtraData_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 8;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. Version of the profile structure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 9;
    private string name_ = "";
    /// <summary>
    ///  Name of the profile, non-empty string, max 64 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 10;
    private pb::ByteString image_ = pb::ByteString.Empty;
    /// <summary>
    ///  Profile image in PNG or JPEG format, non-empty binary data, max 20,480 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 11;
    private uint location_;
    /// <summary>
    ///  Encoded GPS location information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 12;
    private string extraData_ = "";
    /// <summary>
    ///  Semicolon separated 'key=value' list, max 200 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateProfileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateProfileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SetVersion != other.SetVersion) return false;
      if (SetName != other.SetName) return false;
      if (SetImage != other.SetImage) return false;
      if (SetLocation != other.SetLocation) return false;
      if (SetExtraData != other.SetExtraData) return false;
      if (Version != other.Version) return false;
      if (Name != other.Name) return false;
      if (Image != other.Image) return false;
      if (Location != other.Location) return false;
      if (ExtraData != other.ExtraData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SetVersion != false) hash ^= SetVersion.GetHashCode();
      if (SetName != false) hash ^= SetName.GetHashCode();
      if (SetImage != false) hash ^= SetImage.GetHashCode();
      if (SetLocation != false) hash ^= SetLocation.GetHashCode();
      if (SetExtraData != false) hash ^= SetExtraData.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (Location != 0) hash ^= Location.GetHashCode();
      if (ExtraData.Length != 0) hash ^= ExtraData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SetVersion != false) {
        output.WriteRawTag(8);
        output.WriteBool(SetVersion);
      }
      if (SetName != false) {
        output.WriteRawTag(16);
        output.WriteBool(SetName);
      }
      if (SetImage != false) {
        output.WriteRawTag(24);
        output.WriteBool(SetImage);
      }
      if (SetLocation != false) {
        output.WriteRawTag(32);
        output.WriteBool(SetLocation);
      }
      if (SetExtraData != false) {
        output.WriteRawTag(40);
        output.WriteBool(SetExtraData);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Version);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Image);
      }
      if (Location != 0) {
        output.WriteRawTag(93);
        output.WriteFixed32(Location);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ExtraData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SetVersion != false) {
        size += 1 + 1;
      }
      if (SetName != false) {
        size += 1 + 1;
      }
      if (SetImage != false) {
        size += 1 + 1;
      }
      if (SetLocation != false) {
        size += 1 + 1;
      }
      if (SetExtraData != false) {
        size += 1 + 1;
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
      }
      if (Location != 0) {
        size += 1 + 4;
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateProfileRequest other) {
      if (other == null) {
        return;
      }
      if (other.SetVersion != false) {
        SetVersion = other.SetVersion;
      }
      if (other.SetName != false) {
        SetName = other.SetName;
      }
      if (other.SetImage != false) {
        SetImage = other.SetImage;
      }
      if (other.SetLocation != false) {
        SetLocation = other.SetLocation;
      }
      if (other.SetExtraData != false) {
        SetExtraData = other.SetExtraData;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.Location != 0) {
        Location = other.Location;
      }
      if (other.ExtraData.Length != 0) {
        ExtraData = other.ExtraData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SetVersion = input.ReadBool();
            break;
          }
          case 16: {
            SetName = input.ReadBool();
            break;
          }
          case 24: {
            SetImage = input.ReadBool();
            break;
          }
          case 32: {
            SetLocation = input.ReadBool();
            break;
          }
          case 40: {
            SetExtraData = input.ReadBool();
            break;
          }
          case 66: {
            Version = input.ReadBytes();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
          case 82: {
            Image = input.ReadBytes();
            break;
          }
          case 93: {
            Location = input.ReadFixed32();
            break;
          }
          case 98: {
            ExtraData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to UpdateProfileRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_FOUND - The identity is not a client of the node.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "setVersion" - 'UpdateProfileRequest.setVersion' is not set during the first request.
  ///      * Response.details == "setName" - 'UpdateProfileRequest.setName' is not set during the firts request.
  ///      * Response.details == "setLocation" - 'UpdateProfileRequest.setLocation' is not set during the firts request.
  ///      * Response.details == "set*" - Nothing was set to be updated.
  ///      * Response.details == "version" - 'UpdateProfileRequest.version' does not contain a valid version information.
  ///      * Response.details == "name" - 'UpdateProfileRequest.name' does not contain a valid name.
  ///      * Response.details == "image" - 'UpdateProfileRequest.image' does not contain a valid PNG or JPEG image.
  ///      * Response.details == "location" - 'UpdateProfileRequest.image' does not contain a valid location information.
  ///      * Response.details == "extraData" - 'UpdateProfileRequest.extraData' does not contain a valid extra data information.
  /// </summary>
  public sealed partial class UpdateProfileResponse : pb::IMessage<UpdateProfileResponse> {
    private static readonly pb::MessageParser<UpdateProfileResponse> _parser = new pb::MessageParser<UpdateProfileResponse>(() => new UpdateProfileResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateProfileResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileResponse(UpdateProfileResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileResponse Clone() {
      return new UpdateProfileResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateProfileResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateProfileResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateProfileResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  A customer client cancels the home node agreement and optionally informs 
  ///  the node about its new home node location. The node will keep the information 
  ///  about identity's new location for some time.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class CancelHomeNodeAgreementRequest : pb::IMessage<CancelHomeNodeAgreementRequest> {
    private static readonly pb::MessageParser<CancelHomeNodeAgreementRequest> _parser = new pb::MessageParser<CancelHomeNodeAgreementRequest>(() => new CancelHomeNodeAgreementRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelHomeNodeAgreementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementRequest(CancelHomeNodeAgreementRequest other) : this() {
      redirectToNewHomeNode_ = other.redirectToNewHomeNode_;
      newHomeNodeNetworkId_ = other.newHomeNodeNetworkId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementRequest Clone() {
      return new CancelHomeNodeAgreementRequest(this);
    }

    /// <summary>Field number for the "redirectToNewHomeNode" field.</summary>
    public const int RedirectToNewHomeNodeFieldNumber = 1;
    private bool redirectToNewHomeNode_;
    /// <summary>
    ///  true, if the client wants to inform the home node about its new home node location, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RedirectToNewHomeNode {
      get { return redirectToNewHomeNode_; }
      set {
        redirectToNewHomeNode_ = value;
      }
    }

    /// <summary>Field number for the "newHomeNodeNetworkId" field.</summary>
    public const int NewHomeNodeNetworkIdFieldNumber = 2;
    private pb::ByteString newHomeNodeNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'redirectToNewHomeNode' is true, an identifier of the new home node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewHomeNodeNetworkId {
      get { return newHomeNodeNetworkId_; }
      set {
        newHomeNodeNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelHomeNodeAgreementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelHomeNodeAgreementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RedirectToNewHomeNode != other.RedirectToNewHomeNode) return false;
      if (NewHomeNodeNetworkId != other.NewHomeNodeNetworkId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RedirectToNewHomeNode != false) hash ^= RedirectToNewHomeNode.GetHashCode();
      if (NewHomeNodeNetworkId.Length != 0) hash ^= NewHomeNodeNetworkId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RedirectToNewHomeNode != false) {
        output.WriteRawTag(8);
        output.WriteBool(RedirectToNewHomeNode);
      }
      if (NewHomeNodeNetworkId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewHomeNodeNetworkId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RedirectToNewHomeNode != false) {
        size += 1 + 1;
      }
      if (NewHomeNodeNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewHomeNodeNetworkId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelHomeNodeAgreementRequest other) {
      if (other == null) {
        return;
      }
      if (other.RedirectToNewHomeNode != false) {
        RedirectToNewHomeNode = other.RedirectToNewHomeNode;
      }
      if (other.NewHomeNodeNetworkId.Length != 0) {
        NewHomeNodeNetworkId = other.NewHomeNodeNetworkId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RedirectToNewHomeNode = input.ReadBool();
            break;
          }
          case 18: {
            NewHomeNodeNetworkId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to CancelHomeNodeAgreementRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_FOUND - The identity is not a client of the node.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "newHomeNodeNetworkId" - 'CancelHomeNodeAgreementRequest.newHomeNodeNetworkId' is not a valid node network identifier.
  /// </summary>
  public sealed partial class CancelHomeNodeAgreementResponse : pb::IMessage<CancelHomeNodeAgreementResponse> {
    private static readonly pb::MessageParser<CancelHomeNodeAgreementResponse> _parser = new pb::MessageParser<CancelHomeNodeAgreementResponse>(() => new CancelHomeNodeAgreementResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelHomeNodeAgreementResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementResponse(CancelHomeNodeAgreementResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementResponse Clone() {
      return new CancelHomeNodeAgreementResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelHomeNodeAgreementResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelHomeNodeAgreementResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelHomeNodeAgreementResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  Adds (checks-in) one or more application services to the list of services that the customer 
  ///  client supports in the current session.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class ApplicationServiceAddRequest : pb::IMessage<ApplicationServiceAddRequest> {
    private static readonly pb::MessageParser<ApplicationServiceAddRequest> _parser = new pb::MessageParser<ApplicationServiceAddRequest>(() => new ApplicationServiceAddRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceAddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddRequest(ApplicationServiceAddRequest other) : this() {
      serviceNames_ = other.serviceNames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddRequest Clone() {
      return new ApplicationServiceAddRequest(this);
    }

    /// <summary>Field number for the "serviceNames" field.</summary>
    public const int ServiceNamesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_serviceNames_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> serviceNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  List of application service names to add to the list. If a service name is already 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServiceNames {
      get { return serviceNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceAddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceAddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serviceNames_.Equals(other.serviceNames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serviceNames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serviceNames_.WriteTo(output, _repeated_serviceNames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serviceNames_.CalculateSize(_repeated_serviceNames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceAddRequest other) {
      if (other == null) {
        return;
      }
      serviceNames_.Add(other.serviceNames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            serviceNames_.AddEntriesFrom(input, _repeated_serviceNames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ApplicationServiceAddRequest.
  ///
  ///    * ERROR_QUOTA_EXCEEDED - The given set of application services can not be added because the client would have more than the maximum number of enabled services.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "serviceNames[i]" - 'ApplicationServiceAddRequest.serviceNames[i]' is not a valid service name, where 'i' is a zero-based index.
  /// </summary>
  public sealed partial class ApplicationServiceAddResponse : pb::IMessage<ApplicationServiceAddResponse> {
    private static readonly pb::MessageParser<ApplicationServiceAddResponse> _parser = new pb::MessageParser<ApplicationServiceAddResponse>(() => new ApplicationServiceAddResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceAddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddResponse(ApplicationServiceAddResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddResponse Clone() {
      return new ApplicationServiceAddResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceAddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceAddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceAddResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  Removes (checks-out) a single application service from the list of services that the customer 
  ///  client supports in the current session.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class ApplicationServiceRemoveRequest : pb::IMessage<ApplicationServiceRemoveRequest> {
    private static readonly pb::MessageParser<ApplicationServiceRemoveRequest> _parser = new pb::MessageParser<ApplicationServiceRemoveRequest>(() => new ApplicationServiceRemoveRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceRemoveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveRequest(ApplicationServiceRemoveRequest other) : this() {
      serviceName_ = other.serviceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveRequest Clone() {
      return new ApplicationServiceRemoveRequest(this);
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  Name of the application service to remove. The service must be in the customer client's list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceRemoveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceRemoveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceRemoveRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ApplicationServiceRemoveRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_FOUND - 'ApplicationServiceRemoveRequest.serviceName' does not refer to an application service that was previously added using ApplicationServiceAddRequest.
  /// </summary>
  public sealed partial class ApplicationServiceRemoveResponse : pb::IMessage<ApplicationServiceRemoveResponse> {
    private static readonly pb::MessageParser<ApplicationServiceRemoveResponse> _parser = new pb::MessageParser<ApplicationServiceRemoveResponse>(() => new ApplicationServiceRemoveResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceRemoveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveResponse(ApplicationServiceRemoveResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveResponse Clone() {
      return new ApplicationServiceRemoveResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceRemoveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceRemoveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceRemoveResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  Obtains a basic information about an identity hosted on the node.
  ///  If the identity is online, the information includes a list of application services 
  ///  that the identity supports in the currently active session.
  ///
  ///  Roles: clNonCustomer, clCustomer
  /// </summary>
  public sealed partial class GetIdentityInformationRequest : pb::IMessage<GetIdentityInformationRequest> {
    private static readonly pb::MessageParser<GetIdentityInformationRequest> _parser = new pb::MessageParser<GetIdentityInformationRequest>(() => new GetIdentityInformationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetIdentityInformationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationRequest(GetIdentityInformationRequest other) : this() {
      identityNetworkId_ = other.identityNetworkId_;
      includeProfileImage_ = other.includeProfileImage_;
      includeThumbnailImage_ = other.includeThumbnailImage_;
      includeApplicationServices_ = other.includeApplicationServices_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationRequest Clone() {
      return new GetIdentityInformationRequest(this);
    }

    /// <summary>Field number for the "identityNetworkId" field.</summary>
    public const int IdentityNetworkIdFieldNumber = 1;
    private pb::ByteString identityNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Identity's network identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityNetworkId {
      get { return identityNetworkId_; }
      set {
        identityNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "includeProfileImage" field.</summary>
    public const int IncludeProfileImageFieldNumber = 2;
    private bool includeProfileImage_;
    /// <summary>
    ///  If set to true, the response will include a profile image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeProfileImage {
      get { return includeProfileImage_; }
      set {
        includeProfileImage_ = value;
      }
    }

    /// <summary>Field number for the "includeThumbnailImage" field.</summary>
    public const int IncludeThumbnailImageFieldNumber = 3;
    private bool includeThumbnailImage_;
    /// <summary>
    ///  If set to true, the response will include a thumbnail image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeThumbnailImage {
      get { return includeThumbnailImage_; }
      set {
        includeThumbnailImage_ = value;
      }
    }

    /// <summary>Field number for the "includeApplicationServices" field.</summary>
    public const int IncludeApplicationServicesFieldNumber = 4;
    private bool includeApplicationServices_;
    /// <summary>
    ///  If set to true and the given identity is online, the response will include 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeApplicationServices {
      get { return includeApplicationServices_; }
      set {
        includeApplicationServices_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetIdentityInformationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetIdentityInformationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityNetworkId != other.IdentityNetworkId) return false;
      if (IncludeProfileImage != other.IncludeProfileImage) return false;
      if (IncludeThumbnailImage != other.IncludeThumbnailImage) return false;
      if (IncludeApplicationServices != other.IncludeApplicationServices) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityNetworkId.Length != 0) hash ^= IdentityNetworkId.GetHashCode();
      if (IncludeProfileImage != false) hash ^= IncludeProfileImage.GetHashCode();
      if (IncludeThumbnailImage != false) hash ^= IncludeThumbnailImage.GetHashCode();
      if (IncludeApplicationServices != false) hash ^= IncludeApplicationServices.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityNetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IdentityNetworkId);
      }
      if (IncludeProfileImage != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeProfileImage);
      }
      if (IncludeThumbnailImage != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeThumbnailImage);
      }
      if (IncludeApplicationServices != false) {
        output.WriteRawTag(32);
        output.WriteBool(IncludeApplicationServices);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityNetworkId);
      }
      if (IncludeProfileImage != false) {
        size += 1 + 1;
      }
      if (IncludeThumbnailImage != false) {
        size += 1 + 1;
      }
      if (IncludeApplicationServices != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetIdentityInformationRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdentityNetworkId.Length != 0) {
        IdentityNetworkId = other.IdentityNetworkId;
      }
      if (other.IncludeProfileImage != false) {
        IncludeProfileImage = other.IncludeProfileImage;
      }
      if (other.IncludeThumbnailImage != false) {
        IncludeThumbnailImage = other.IncludeThumbnailImage;
      }
      if (other.IncludeApplicationServices != false) {
        IncludeApplicationServices = other.IncludeApplicationServices;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityNetworkId = input.ReadBytes();
            break;
          }
          case 16: {
            IncludeProfileImage = input.ReadBool();
            break;
          }
          case 24: {
            IncludeThumbnailImage = input.ReadBool();
            break;
          }
          case 32: {
            IncludeApplicationServices = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to GetIdentityInformationRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_FOUND - 'GetIdentityInformationRequest.identityNetworkId' does not identify an identity hosted by the node.
  ///    * ERROR_UNINITIALIZED - The target identity's profile has not been initialized yet.
  /// </summary>
  public sealed partial class GetIdentityInformationResponse : pb::IMessage<GetIdentityInformationResponse> {
    private static readonly pb::MessageParser<GetIdentityInformationResponse> _parser = new pb::MessageParser<GetIdentityInformationResponse>(() => new GetIdentityInformationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetIdentityInformationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationResponse(GetIdentityInformationResponse other) : this() {
      isHosted_ = other.isHosted_;
      isTargetHomeNodeKnown_ = other.isTargetHomeNodeKnown_;
      targetHomeNodeNetworkId_ = other.targetHomeNodeNetworkId_;
      isOnline_ = other.isOnline_;
      identityPublicKey_ = other.identityPublicKey_;
      name_ = other.name_;
      extraData_ = other.extraData_;
      profileImage_ = other.profileImage_;
      thumbnailImage_ = other.thumbnailImage_;
      applicationServices_ = other.applicationServices_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationResponse Clone() {
      return new GetIdentityInformationResponse(this);
    }

    /// <summary>Field number for the "isHosted" field.</summary>
    public const int IsHostedFieldNumber = 1;
    private bool isHosted_;
    /// <summary>
    ///  True if the requested identity is a customer of the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHosted {
      get { return isHosted_; }
      set {
        isHosted_ = value;
      }
    }

    /// <summary>Field number for the "isTargetHomeNodeKnown" field.</summary>
    public const int IsTargetHomeNodeKnownFieldNumber = 2;
    private bool isTargetHomeNodeKnown_;
    /// <summary>
    ///  If 'isHosted' is false then this is true if the identity's new home node is known to the node. In all other cases, this is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetHomeNodeKnown {
      get { return isTargetHomeNodeKnown_; }
      set {
        isTargetHomeNodeKnown_ = value;
      }
    }

    /// <summary>Field number for the "targetHomeNodeNetworkId" field.</summary>
    public const int TargetHomeNodeNetworkIdFieldNumber = 3;
    private pb::ByteString targetHomeNodeNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'isTargetHomeNodeKnown' is true then this field contains the identity's new home node network ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TargetHomeNodeNetworkId {
      get { return targetHomeNodeNetworkId_; }
      set {
        targetHomeNodeNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isOnline" field.</summary>
    public const int IsOnlineFieldNumber = 4;
    private bool isOnline_;
    /// <summary>
    ///  Following fields are valid only if 'isHosted' is true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    /// <summary>Field number for the "identityPublicKey" field.</summary>
    public const int IdentityPublicKeyFieldNumber = 5;
    private pb::ByteString identityPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  The requested identity's public key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityPublicKey {
      get { return identityPublicKey_; }
      set {
        identityPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    /// <summary>
    ///  The requested identity's name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 7;
    private string extraData_ = "";
    /// <summary>
    ///  The requested identity's extra data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profileImage" field.</summary>
    public const int ProfileImageFieldNumber = 8;
    private pb::ByteString profileImage_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'GetIdentityInformationRequest.includeProfileImage' was set, this contains the requested identity's profile image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProfileImage {
      get { return profileImage_; }
      set {
        profileImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnailImage" field.</summary>
    public const int ThumbnailImageFieldNumber = 9;
    private pb::ByteString thumbnailImage_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'GetIdentityInformationRequest.includeThumbnailImage' was set, this contains the requested identity's thumbnail image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThumbnailImage {
      get { return thumbnailImage_; }
      set {
        thumbnailImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "applicationServices" field.</summary>
    public const int ApplicationServicesFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_applicationServices_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> applicationServices_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  If 'GetIdentityInformationRequest.includeApplicationServices' was set and if 'isOnline' is true, this contains 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ApplicationServices {
      get { return applicationServices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetIdentityInformationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetIdentityInformationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsHosted != other.IsHosted) return false;
      if (IsTargetHomeNodeKnown != other.IsTargetHomeNodeKnown) return false;
      if (TargetHomeNodeNetworkId != other.TargetHomeNodeNetworkId) return false;
      if (IsOnline != other.IsOnline) return false;
      if (IdentityPublicKey != other.IdentityPublicKey) return false;
      if (Name != other.Name) return false;
      if (ExtraData != other.ExtraData) return false;
      if (ProfileImage != other.ProfileImage) return false;
      if (ThumbnailImage != other.ThumbnailImage) return false;
      if(!applicationServices_.Equals(other.applicationServices_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsHosted != false) hash ^= IsHosted.GetHashCode();
      if (IsTargetHomeNodeKnown != false) hash ^= IsTargetHomeNodeKnown.GetHashCode();
      if (TargetHomeNodeNetworkId.Length != 0) hash ^= TargetHomeNodeNetworkId.GetHashCode();
      if (IsOnline != false) hash ^= IsOnline.GetHashCode();
      if (IdentityPublicKey.Length != 0) hash ^= IdentityPublicKey.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ExtraData.Length != 0) hash ^= ExtraData.GetHashCode();
      if (ProfileImage.Length != 0) hash ^= ProfileImage.GetHashCode();
      if (ThumbnailImage.Length != 0) hash ^= ThumbnailImage.GetHashCode();
      hash ^= applicationServices_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsHosted != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsHosted);
      }
      if (IsTargetHomeNodeKnown != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTargetHomeNodeKnown);
      }
      if (TargetHomeNodeNetworkId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TargetHomeNodeNetworkId);
      }
      if (IsOnline != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsOnline);
      }
      if (IdentityPublicKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(IdentityPublicKey);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ExtraData);
      }
      if (ProfileImage.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(ProfileImage);
      }
      if (ThumbnailImage.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(ThumbnailImage);
      }
      applicationServices_.WriteTo(output, _repeated_applicationServices_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsHosted != false) {
        size += 1 + 1;
      }
      if (IsTargetHomeNodeKnown != false) {
        size += 1 + 1;
      }
      if (TargetHomeNodeNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TargetHomeNodeNetworkId);
      }
      if (IsOnline != false) {
        size += 1 + 1;
      }
      if (IdentityPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityPublicKey);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraData);
      }
      if (ProfileImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProfileImage);
      }
      if (ThumbnailImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThumbnailImage);
      }
      size += applicationServices_.CalculateSize(_repeated_applicationServices_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetIdentityInformationResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsHosted != false) {
        IsHosted = other.IsHosted;
      }
      if (other.IsTargetHomeNodeKnown != false) {
        IsTargetHomeNodeKnown = other.IsTargetHomeNodeKnown;
      }
      if (other.TargetHomeNodeNetworkId.Length != 0) {
        TargetHomeNodeNetworkId = other.TargetHomeNodeNetworkId;
      }
      if (other.IsOnline != false) {
        IsOnline = other.IsOnline;
      }
      if (other.IdentityPublicKey.Length != 0) {
        IdentityPublicKey = other.IdentityPublicKey;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ExtraData.Length != 0) {
        ExtraData = other.ExtraData;
      }
      if (other.ProfileImage.Length != 0) {
        ProfileImage = other.ProfileImage;
      }
      if (other.ThumbnailImage.Length != 0) {
        ThumbnailImage = other.ThumbnailImage;
      }
      applicationServices_.Add(other.applicationServices_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsHosted = input.ReadBool();
            break;
          }
          case 16: {
            IsTargetHomeNodeKnown = input.ReadBool();
            break;
          }
          case 26: {
            TargetHomeNodeNetworkId = input.ReadBytes();
            break;
          }
          case 32: {
            IsOnline = input.ReadBool();
            break;
          }
          case 42: {
            IdentityPublicKey = input.ReadBytes();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            ExtraData = input.ReadString();
            break;
          }
          case 66: {
            ProfileImage = input.ReadBytes();
            break;
          }
          case 74: {
            ThumbnailImage = input.ReadBytes();
            break;
          }
          case 82: {
            applicationServices_.AddEntriesFrom(input, _repeated_applicationServices_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  Request to establish a bridged connection between a requestor (the caller) and an identity (the callee) hosted on the node 
  ///  via one of its supported application service. The callee has to be online, otherwise the request will fail.
  ///
  ///  The node informs the callee about the incoming call and issues a token pair (caller's and callee's tokens) to identify the caller 
  ///  and the callee on the Application Service Interface. The callee's token is sent to the callee with the information about the incoming call. 
  ///  If the callee wants to accept the call, the node informs the caller and sends it the caller's token. Both clients are then expected 
  ///  to establish new connections to the node's Application Service Interface and use their tokens to send a message to the other client.
  ///
  ///  Roles: clNonCustomer, clCustomer
  ///
  ///  Conversation status: Verified
  /// </summary>
  public sealed partial class CallIdentityApplicationServiceRequest : pb::IMessage<CallIdentityApplicationServiceRequest> {
    private static readonly pb::MessageParser<CallIdentityApplicationServiceRequest> _parser = new pb::MessageParser<CallIdentityApplicationServiceRequest>(() => new CallIdentityApplicationServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallIdentityApplicationServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceRequest(CallIdentityApplicationServiceRequest other) : this() {
      identityNetworkId_ = other.identityNetworkId_;
      serviceName_ = other.serviceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceRequest Clone() {
      return new CallIdentityApplicationServiceRequest(this);
    }

    /// <summary>Field number for the "identityNetworkId" field.</summary>
    public const int IdentityNetworkIdFieldNumber = 1;
    private pb::ByteString identityNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Network identifier of the identity to call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityNetworkId {
      get { return identityNetworkId_; }
      set {
        identityNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    ///  Name of the application service to use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallIdentityApplicationServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallIdentityApplicationServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityNetworkId != other.IdentityNetworkId) return false;
      if (ServiceName != other.ServiceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityNetworkId.Length != 0) hash ^= IdentityNetworkId.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityNetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IdentityNetworkId);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityNetworkId);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallIdentityApplicationServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdentityNetworkId.Length != 0) {
        IdentityNetworkId = other.IdentityNetworkId;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityNetworkId = input.ReadBytes();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to CallIdentityApplicationServiceRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_AVAILABLE - The callee is not online.
  ///    * ERROR_REJECTED - The callee rejected the call.
  ///    * ERROR_UNINITIALIZED - The callee's profile has not been initialized yet.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "identityNetworkId" - 'CallIdentityApplicationServiceRequest.identityNetworkId' does not identify an identity hosted by the node.
  ///      * Response.details == "serviceName" - 'CallIdentityApplicationServiceRequest.serviceName' is not an application service supported by the callee in the current session.
  /// </summary>
  public sealed partial class CallIdentityApplicationServiceResponse : pb::IMessage<CallIdentityApplicationServiceResponse> {
    private static readonly pb::MessageParser<CallIdentityApplicationServiceResponse> _parser = new pb::MessageParser<CallIdentityApplicationServiceResponse>(() => new CallIdentityApplicationServiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallIdentityApplicationServiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceResponse(CallIdentityApplicationServiceResponse other) : this() {
      callerToken_ = other.callerToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceResponse Clone() {
      return new CallIdentityApplicationServiceResponse(this);
    }

    /// <summary>Field number for the "callerToken" field.</summary>
    public const int CallerTokenFieldNumber = 1;
    private pb::ByteString callerToken_ = pb::ByteString.Empty;
    /// <summary>
    ///  Token for the caller to identify the session on the Application Service Interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CallerToken {
      get { return callerToken_; }
      set {
        callerToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallIdentityApplicationServiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallIdentityApplicationServiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallerToken != other.CallerToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallerToken.Length != 0) hash ^= CallerToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallerToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CallerToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallerToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CallerToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallIdentityApplicationServiceResponse other) {
      if (other == null) {
        return;
      }
      if (other.CallerToken.Length != 0) {
        CallerToken = other.CallerToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CallerToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  This request is sent by node to its customer client (the callee) when another client (the caller) wants 
  ///  to establish a call over the customer client's application service.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class IncomingCallNotificationRequest : pb::IMessage<IncomingCallNotificationRequest> {
    private static readonly pb::MessageParser<IncomingCallNotificationRequest> _parser = new pb::MessageParser<IncomingCallNotificationRequest>(() => new IncomingCallNotificationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncomingCallNotificationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationRequest(IncomingCallNotificationRequest other) : this() {
      callerPublicKey_ = other.callerPublicKey_;
      serviceName_ = other.serviceName_;
      calleeToken_ = other.calleeToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationRequest Clone() {
      return new IncomingCallNotificationRequest(this);
    }

    /// <summary>Field number for the "callerPublicKey" field.</summary>
    public const int CallerPublicKeyFieldNumber = 1;
    private pb::ByteString callerPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the caller.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CallerPublicKey {
      get { return callerPublicKey_; }
      set {
        callerPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    ///  Name of the application service the caller wants to use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "calleeToken" field.</summary>
    public const int CalleeTokenFieldNumber = 3;
    private pb::ByteString calleeToken_ = pb::ByteString.Empty;
    /// <summary>
    ///  Token for the callee to identify the session on the Application Service Interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CalleeToken {
      get { return calleeToken_; }
      set {
        calleeToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncomingCallNotificationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncomingCallNotificationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallerPublicKey != other.CallerPublicKey) return false;
      if (ServiceName != other.ServiceName) return false;
      if (CalleeToken != other.CalleeToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallerPublicKey.Length != 0) hash ^= CallerPublicKey.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (CalleeToken.Length != 0) hash ^= CalleeToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallerPublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CallerPublicKey);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (CalleeToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CalleeToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallerPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CallerPublicKey);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (CalleeToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CalleeToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncomingCallNotificationRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallerPublicKey.Length != 0) {
        CallerPublicKey = other.CallerPublicKey;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.CalleeToken.Length != 0) {
        CalleeToken = other.CalleeToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CallerPublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
          case 26: {
            CalleeToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to CallIdentityApplicationServiceRequest. This is sent by the customer client (the callee) to its home node.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_REJECTED - The callee rejects the call.
  /// </summary>
  public sealed partial class IncomingCallNotificationResponse : pb::IMessage<IncomingCallNotificationResponse> {
    private static readonly pb::MessageParser<IncomingCallNotificationResponse> _parser = new pb::MessageParser<IncomingCallNotificationResponse>(() => new IncomingCallNotificationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncomingCallNotificationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationResponse(IncomingCallNotificationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationResponse Clone() {
      return new IncomingCallNotificationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncomingCallNotificationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncomingCallNotificationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncomingCallNotificationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  This request is sent by a client to the node in order to deliver a message to the other client over the opened 
  ///  application service call session.
  ///
  ///  After the client connects to clAppService port, it sends an initialization message using this request 
  ///  to inform the node about its identity. This initialization message is not delivered to the other party
  ///  and the node responses to this initialization message only after the other party is also connected.
  ///  In the initialization message, the 'message' field is ignored. If the other party fails to join the channel 
  ///  within 30 seconds, the node closes the existing connection to the connected client.
  ///  
  ///
  ///  Roles: clAppService
  /// </summary>
  public sealed partial class ApplicationServiceSendMessageRequest : pb::IMessage<ApplicationServiceSendMessageRequest> {
    private static readonly pb::MessageParser<ApplicationServiceSendMessageRequest> _parser = new pb::MessageParser<ApplicationServiceSendMessageRequest>(() => new ApplicationServiceSendMessageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceSendMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageRequest(ApplicationServiceSendMessageRequest other) : this() {
      token_ = other.token_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageRequest Clone() {
      return new ApplicationServiceSendMessageRequest(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private pb::ByteString token_ = pb::ByteString.Empty;
    /// <summary>
    ///  Client's token to identify the session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private pb::ByteString message_ = pb::ByteString.Empty;
    /// <summary>
    ///  Message to send to the other client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceSendMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceSendMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Token);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceSendMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadBytes();
            break;
          }
          case 18: {
            Message = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ApplicationServiceSendMessageRequest. This is sent by the node to the client to confirm that it sent 
  ///  the message to the other client.
  ///  
  ///  If the connection to one of the clients is terminated, the node closes the connection to the other client.
  /// </summary>
  public sealed partial class ApplicationServiceSendMessageResponse : pb::IMessage<ApplicationServiceSendMessageResponse> {
    private static readonly pb::MessageParser<ApplicationServiceSendMessageResponse> _parser = new pb::MessageParser<ApplicationServiceSendMessageResponse>(() => new ApplicationServiceSendMessageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceSendMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageResponse(ApplicationServiceSendMessageResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageResponse Clone() {
      return new ApplicationServiceSendMessageResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceSendMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceSendMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceSendMessageResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  This request is sent by a home node after it received ApplicationServiceSendMessageRequest from one of the clients.
  ///  This forwards the message to its intended recipient.
  ///
  ///  Roles: clAppService
  /// </summary>
  public sealed partial class ApplicationServiceReceiveMessageNotificationRequest : pb::IMessage<ApplicationServiceReceiveMessageNotificationRequest> {
    private static readonly pb::MessageParser<ApplicationServiceReceiveMessageNotificationRequest> _parser = new pb::MessageParser<ApplicationServiceReceiveMessageNotificationRequest>(() => new ApplicationServiceReceiveMessageNotificationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceReceiveMessageNotificationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationRequest(ApplicationServiceReceiveMessageNotificationRequest other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationRequest Clone() {
      return new ApplicationServiceReceiveMessageNotificationRequest(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private pb::ByteString message_ = pb::ByteString.Empty;
    /// <summary>
    ///  Message that was sent to the intended recipient - a copy of 'ApplicationServiceSendMessageRequest.message'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceReceiveMessageNotificationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceReceiveMessageNotificationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceReceiveMessageNotificationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ApplicationServiceReceiveMessageNotificationRequest.
  ///  
  /// </summary>
  public sealed partial class ApplicationServiceReceiveMessageNotificationResponse : pb::IMessage<ApplicationServiceReceiveMessageNotificationResponse> {
    private static readonly pb::MessageParser<ApplicationServiceReceiveMessageNotificationResponse> _parser = new pb::MessageParser<ApplicationServiceReceiveMessageNotificationResponse>(() => new ApplicationServiceReceiveMessageNotificationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceReceiveMessageNotificationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationResponse(ApplicationServiceReceiveMessageNotificationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationResponse Clone() {
      return new ApplicationServiceReceiveMessageNotificationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceReceiveMessageNotificationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceReceiveMessageNotificationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceReceiveMessageNotificationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
