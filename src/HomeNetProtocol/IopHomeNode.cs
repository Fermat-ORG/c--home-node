// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IopHomeNode.proto3
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iop.Homenode {

  /// <summary>Holder for reflection information generated from IopHomeNode.proto3</summary>
  public static partial class IopHomeNodeReflection {

    #region Descriptor
    /// <summary>File descriptor for IopHomeNode.proto3</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IopHomeNodeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJJb3BIb21lTm9kZS5wcm90bzMSDGlvcC5ob21lbm9kZSJIChFNZXNzYWdl",
            "V2l0aEhlYWRlchIOCgZoZWFkZXIYASABKAcSIwoEYm9keRgCIAEoCzIVLmlv",
            "cC5ob21lbm9kZS5NZXNzYWdlInoKB01lc3NhZ2USCgoCaWQYASABKA0SKAoH",
            "cmVxdWVzdBgCIAEoCzIVLmlvcC5ob21lbm9kZS5SZXF1ZXN0SAASKgoIcmVz",
            "cG9uc2UYAyABKAsyFi5pb3AuaG9tZW5vZGUuUmVzcG9uc2VIAEINCgtNZXNz",
            "YWdlVHlwZSKVAQoHUmVxdWVzdBI0Cg1zaW5nbGVSZXF1ZXN0GAEgASgLMhsu",
            "aW9wLmhvbWVub2RlLlNpbmdsZVJlcXVlc3RIABJAChNjb252ZXJzYXRpb25S",
            "ZXF1ZXN0GAIgASgLMiEuaW9wLmhvbWVub2RlLkNvbnZlcnNhdGlvblJlcXVl",
            "c3RIAEISChBDb252ZXJzYXRpb25UeXBlIuQBCghSZXNwb25zZRIkCgZzdGF0",
            "dXMYASABKA4yFC5pb3AuaG9tZW5vZGUuU3RhdHVzEhEKCXRpbWVzdGFtcBgC",
            "IAEoEhIPCgdkZXRhaWxzGAMgASgJEjYKDnNpbmdsZVJlc3BvbnNlGAggASgL",
            "MhwuaW9wLmhvbWVub2RlLlNpbmdsZVJlc3BvbnNlSAASQgoUY29udmVyc2F0",
            "aW9uUmVzcG9uc2UYCSABKAsyIi5pb3AuaG9tZW5vZGUuQ29udmVyc2F0aW9u",
            "UmVzcG9uc2VIAEISChBDb252ZXJzYXRpb25UeXBlIp8FCg1TaW5nbGVSZXF1",
            "ZXN0Eg8KB3ZlcnNpb24YASABKAwSKQoEcGluZxgCIAEoCzIZLmlvcC5ob21l",
            "bm9kZS5QaW5nUmVxdWVzdEgAEjMKCWxpc3RSb2xlcxgDIAEoCzIeLmlvcC5o",
            "b21lbm9kZS5MaXN0Um9sZXNSZXF1ZXN0SAASQwoRbGlzdEhvbWVOb2RlUGxh",
            "bnMYBCABKAsyJi5pb3AuaG9tZW5vZGUuTGlzdEhvbWVOb2RlUGxhbnNSZXF1",
            "ZXN0SAASTQoWZ2V0SWRlbnRpdHlJbmZvcm1hdGlvbhgFIAEoCzIrLmlvcC5o",
            "b21lbm9kZS5HZXRJZGVudGl0eUluZm9ybWF0aW9uUmVxdWVzdEgAElsKHWFw",
            "cGxpY2F0aW9uU2VydmljZVNlbmRNZXNzYWdlGAYgASgLMjIuaW9wLmhvbWVu",
            "b2RlLkFwcGxpY2F0aW9uU2VydmljZVNlbmRNZXNzYWdlUmVxdWVzdEgAEnkK",
            "LGFwcGxpY2F0aW9uU2VydmljZVJlY2VpdmVNZXNzYWdlTm90aWZpY2F0aW9u",
            "GAcgASgLMkEuaW9wLmhvbWVub2RlLkFwcGxpY2F0aW9uU2VydmljZVJlY2Vp",
            "dmVNZXNzYWdlTm90aWZpY2F0aW9uUmVxdWVzdEgAEjkKDHByb2ZpbGVTdGF0",
            "cxgIIAEoCzIhLmlvcC5ob21lbm9kZS5Qcm9maWxlU3RhdHNSZXF1ZXN0SAAS",
            "ZwojZ2V0SWRlbnRpdHlSZWxhdGlvbnNoaXBzSW5mb3JtYXRpb24YCSABKAsy",
            "OC5pb3AuaG9tZW5vZGUuR2V0SWRlbnRpdHlSZWxhdGlvbnNoaXBzSW5mb3Jt",
            "YXRpb25SZXF1ZXN0SABCDQoLUmVxdWVzdFR5cGUiqQUKDlNpbmdsZVJlc3Bv",
            "bnNlEg8KB3ZlcnNpb24YASABKAwSKgoEcGluZxgCIAEoCzIaLmlvcC5ob21l",
            "bm9kZS5QaW5nUmVzcG9uc2VIABI0CglsaXN0Um9sZXMYAyABKAsyHy5pb3Au",
            "aG9tZW5vZGUuTGlzdFJvbGVzUmVzcG9uc2VIABJEChFsaXN0SG9tZU5vZGVQ",
            "bGFucxgEIAEoCzInLmlvcC5ob21lbm9kZS5MaXN0SG9tZU5vZGVQbGFuc1Jl",
            "c3BvbnNlSAASTgoWZ2V0SWRlbnRpdHlJbmZvcm1hdGlvbhgFIAEoCzIsLmlv",
            "cC5ob21lbm9kZS5HZXRJZGVudGl0eUluZm9ybWF0aW9uUmVzcG9uc2VIABJc",
            "Ch1hcHBsaWNhdGlvblNlcnZpY2VTZW5kTWVzc2FnZRgGIAEoCzIzLmlvcC5o",
            "b21lbm9kZS5BcHBsaWNhdGlvblNlcnZpY2VTZW5kTWVzc2FnZVJlc3BvbnNl",
            "SAASegosYXBwbGljYXRpb25TZXJ2aWNlUmVjZWl2ZU1lc3NhZ2VOb3RpZmlj",
            "YXRpb24YByABKAsyQi5pb3AuaG9tZW5vZGUuQXBwbGljYXRpb25TZXJ2aWNl",
            "UmVjZWl2ZU1lc3NhZ2VOb3RpZmljYXRpb25SZXNwb25zZUgAEjoKDHByb2Zp",
            "bGVTdGF0cxgIIAEoCzIiLmlvcC5ob21lbm9kZS5Qcm9maWxlU3RhdHNSZXNw",
            "b25zZUgAEmgKI2dldElkZW50aXR5UmVsYXRpb25zaGlwc0luZm9ybWF0aW9u",
            "GAkgASgLMjkuaW9wLmhvbWVub2RlLkdldElkZW50aXR5UmVsYXRpb25zaGlw",
            "c0luZm9ybWF0aW9uUmVzcG9uc2VIAEIOCgxSZXNwb25zZVR5cGUitAoKE0Nv",
            "bnZlcnNhdGlvblJlcXVlc3QSEQoJc2lnbmF0dXJlGAEgASgMEjcKBXN0YXJ0",
            "GAIgASgLMiYuaW9wLmhvbWVub2RlLlN0YXJ0Q29udmVyc2F0aW9uUmVxdWVz",
            "dEgAEj8KD2hvbWVOb2RlUmVxdWVzdBgDIAEoCzIkLmlvcC5ob21lbm9kZS5I",
            "b21lTm9kZVJlcXVlc3RSZXF1ZXN0SAASLwoHY2hlY2tJbhgEIAEoCzIcLmlv",
            "cC5ob21lbm9kZS5DaGVja0luUmVxdWVzdEgAEj0KDnZlcmlmeUlkZW50aXR5",
            "GAUgASgLMiMuaW9wLmhvbWVub2RlLlZlcmlmeUlkZW50aXR5UmVxdWVzdEgA",
            "EjsKDXVwZGF0ZVByb2ZpbGUYBiABKAsyIi5pb3AuaG9tZW5vZGUuVXBkYXRl",
            "UHJvZmlsZVJlcXVlc3RIABJPChdjYW5jZWxIb21lTm9kZUFncmVlbWVudBgH",
            "IAEoCzIsLmlvcC5ob21lbm9kZS5DYW5jZWxIb21lTm9kZUFncmVlbWVudFJl",
            "cXVlc3RIABJLChVhcHBsaWNhdGlvblNlcnZpY2VBZGQYCCABKAsyKi5pb3Au",
            "aG9tZW5vZGUuQXBwbGljYXRpb25TZXJ2aWNlQWRkUmVxdWVzdEgAElEKGGFw",
            "cGxpY2F0aW9uU2VydmljZVJlbW92ZRgJIAEoCzItLmlvcC5ob21lbm9kZS5B",
            "cHBsaWNhdGlvblNlcnZpY2VSZW1vdmVSZXF1ZXN0SAASXQoeY2FsbElkZW50",
            "aXR5QXBwbGljYXRpb25TZXJ2aWNlGAogASgLMjMuaW9wLmhvbWVub2RlLkNh",
            "bGxJZGVudGl0eUFwcGxpY2F0aW9uU2VydmljZVJlcXVlc3RIABJRChhpbmNv",
            "bWluZ0NhbGxOb3RpZmljYXRpb24YCyABKAsyLS5pb3AuaG9tZW5vZGUuSW5j",
            "b21pbmdDYWxsTm90aWZpY2F0aW9uUmVxdWVzdEgAEjsKDXByb2ZpbGVTZWFy",
            "Y2gYDCABKAsyIi5pb3AuaG9tZW5vZGUuUHJvZmlsZVNlYXJjaFJlcXVlc3RI",
            "ABJDChFwcm9maWxlU2VhcmNoUGFydBgNIAEoCzImLmlvcC5ob21lbm9kZS5Q",
            "cm9maWxlU2VhcmNoUGFydFJlcXVlc3RIABJFChJhZGRSZWxhdGVkSWRlbnRp",
            "dHkYDiABKAsyJy5pb3AuaG9tZW5vZGUuQWRkUmVsYXRlZElkZW50aXR5UmVx",
            "dWVzdEgAEksKFXJlbW92ZVJlbGF0ZWRJZGVudGl0eRgPIAEoCzIqLmlvcC5o",
            "b21lbm9kZS5SZW1vdmVSZWxhdGVkSWRlbnRpdHlSZXF1ZXN0SAASXwofc3Rh",
            "cnROZWlnaGJvcmhvb2RJbml0aWFsaXphdGlvbhgQIAEoCzI0LmlvcC5ob21l",
            "bm9kZS5TdGFydE5laWdoYm9yaG9vZEluaXRpYWxpemF0aW9uUmVxdWVzdEgA",
            "EmEKIGZpbmlzaE5laWdoYm9yaG9vZEluaXRpYWxpemF0aW9uGBEgASgLMjUu",
            "aW9wLmhvbWVub2RlLkZpbmlzaE5laWdoYm9yaG9vZEluaXRpYWxpemF0aW9u",
            "UmVxdWVzdEgAElcKG25laWdoYm9yU2hhcmVkUHJvZmlsZVVwZGF0ZRgSIAEo",
            "CzIwLmlvcC5ob21lbm9kZS5OZWlnaGJvclNoYXJlZFByb2ZpbGVVcGRhdGVS",
            "ZXF1ZXN0SABCDQoLUmVxdWVzdFR5cGUixwoKFENvbnZlcnNhdGlvblJlc3Bv",
            "bnNlEhEKCXNpZ25hdHVyZRgBIAEoDBI4CgVzdGFydBgCIAEoCzInLmlvcC5o",
            "b21lbm9kZS5TdGFydENvbnZlcnNhdGlvblJlc3BvbnNlSAASQAoPaG9tZU5v",
            "ZGVSZXF1ZXN0GAMgASgLMiUuaW9wLmhvbWVub2RlLkhvbWVOb2RlUmVxdWVz",
            "dFJlc3BvbnNlSAASMAoHY2hlY2tJbhgEIAEoCzIdLmlvcC5ob21lbm9kZS5D",
            "aGVja0luUmVzcG9uc2VIABI+Cg52ZXJpZnlJZGVudGl0eRgFIAEoCzIkLmlv",
            "cC5ob21lbm9kZS5WZXJpZnlJZGVudGl0eVJlc3BvbnNlSAASPAoNdXBkYXRl",
            "UHJvZmlsZRgGIAEoCzIjLmlvcC5ob21lbm9kZS5VcGRhdGVQcm9maWxlUmVz",
            "cG9uc2VIABJQChdjYW5jZWxIb21lTm9kZUFncmVlbWVudBgHIAEoCzItLmlv",
            "cC5ob21lbm9kZS5DYW5jZWxIb21lTm9kZUFncmVlbWVudFJlc3BvbnNlSAAS",
            "TAoVYXBwbGljYXRpb25TZXJ2aWNlQWRkGAggASgLMisuaW9wLmhvbWVub2Rl",
            "LkFwcGxpY2F0aW9uU2VydmljZUFkZFJlc3BvbnNlSAASUgoYYXBwbGljYXRp",
            "b25TZXJ2aWNlUmVtb3ZlGAkgASgLMi4uaW9wLmhvbWVub2RlLkFwcGxpY2F0",
            "aW9uU2VydmljZVJlbW92ZVJlc3BvbnNlSAASXgoeY2FsbElkZW50aXR5QXBw",
            "bGljYXRpb25TZXJ2aWNlGAogASgLMjQuaW9wLmhvbWVub2RlLkNhbGxJZGVu",
            "dGl0eUFwcGxpY2F0aW9uU2VydmljZVJlc3BvbnNlSAASUgoYaW5jb21pbmdD",
            "YWxsTm90aWZpY2F0aW9uGAsgASgLMi4uaW9wLmhvbWVub2RlLkluY29taW5n",
            "Q2FsbE5vdGlmaWNhdGlvblJlc3BvbnNlSAASPAoNcHJvZmlsZVNlYXJjaBgM",
            "IAEoCzIjLmlvcC5ob21lbm9kZS5Qcm9maWxlU2VhcmNoUmVzcG9uc2VIABJE",
            "ChFwcm9maWxlU2VhcmNoUGFydBgNIAEoCzInLmlvcC5ob21lbm9kZS5Qcm9m",
            "aWxlU2VhcmNoUGFydFJlc3BvbnNlSAASRgoSYWRkUmVsYXRlZElkZW50aXR5",
            "GA4gASgLMiguaW9wLmhvbWVub2RlLkFkZFJlbGF0ZWRJZGVudGl0eVJlc3Bv",
            "bnNlSAASTAoVcmVtb3ZlUmVsYXRlZElkZW50aXR5GA8gASgLMisuaW9wLmhv",
            "bWVub2RlLlJlbW92ZVJlbGF0ZWRJZGVudGl0eVJlc3BvbnNlSAASYAofc3Rh",
            "cnROZWlnaGJvcmhvb2RJbml0aWFsaXphdGlvbhgQIAEoCzI1LmlvcC5ob21l",
            "bm9kZS5TdGFydE5laWdoYm9yaG9vZEluaXRpYWxpemF0aW9uUmVzcG9uc2VI",
            "ABJiCiBmaW5pc2hOZWlnaGJvcmhvb2RJbml0aWFsaXphdGlvbhgRIAEoCzI2",
            "LmlvcC5ob21lbm9kZS5GaW5pc2hOZWlnaGJvcmhvb2RJbml0aWFsaXphdGlv",
            "blJlc3BvbnNlSAASWAobbmVpZ2hib3JTaGFyZWRQcm9maWxlVXBkYXRlGBIg",
            "ASgLMjEuaW9wLmhvbWVub2RlLk5laWdoYm9yU2hhcmVkUHJvZmlsZVVwZGF0",
            "ZVJlc3BvbnNlSABCDgoMUmVzcG9uc2VUeXBlIh4KC1BpbmdSZXF1ZXN0Eg8K",
            "B3BheWxvYWQYASABKAwiLgoMUGluZ1Jlc3BvbnNlEg8KB3BheWxvYWQYASAB",
            "KAwSDQoFY2xvY2sYAiABKBIiEgoQTGlzdFJvbGVzUmVxdWVzdCI8ChFMaXN0",
            "Um9sZXNSZXNwb25zZRInCgVyb2xlcxgBIAMoCzIYLmlvcC5ob21lbm9kZS5T",
            "ZXJ2ZXJSb2xlImQKClNlcnZlclJvbGUSKgoEcm9sZRgBIAEoDjIcLmlvcC5o",
            "b21lbm9kZS5TZXJ2ZXJSb2xlVHlwZRIMCgRwb3J0GAIgASgNEg0KBWlzVGNw",
            "GAMgASgIEg0KBWlzVGxzGAQgASgIIjAKGExpc3RIb21lTm9kZVBsYW5zUmVx",
            "dWVzdBIUCgxpZGVudGl0eVR5cGUYASABKAkiRgoZTGlzdEhvbWVOb2RlUGxh",
            "bnNSZXNwb25zZRIpCgVwbGFucxgBIAMoCzIaLmlvcC5ob21lbm9kZS5Ib21l",
            "Tm9kZVBsYW4isQEKDEhvbWVOb2RlUGxhbhIOCgZwbGFuSWQYASABKAwSFQoN",
            "bm9kZU5ldHdvcmtJZBgCIAEoDBIUCgxpZGVudGl0eVR5cGUYAyABKAkSCwoD",
            "ZmVlGAQgASgEEhwKFGJpbGxpbmdQZXJpb2RTZWNvbmRzGAUgASgNEjkKDnBs",
            "YW5QYXJhbWV0ZXJzGAkgAygLMiEuaW9wLmhvbWVub2RlLk5hbWVTdHJpbmdW",
            "YWx1ZVBhaXIiMgoTTmFtZVN0cmluZ1ZhbHVlUGFpchIMCgRuYW1lGAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJImEKGFN0YXJ0Q29udmVyc2F0aW9uUmVxdWVzdBIZ",
            "ChFzdXBwb3J0ZWRWZXJzaW9ucxgBIAMoDBIRCglwdWJsaWNLZXkYAiABKAwS",
            "FwoPY2xpZW50Q2hhbGxlbmdlGAMgASgMImsKGVN0YXJ0Q29udmVyc2F0aW9u",
            "UmVzcG9uc2USDwoHdmVyc2lvbhgBIAEoDBIRCglwdWJsaWNLZXkYAiABKAwS",
            "EQoJY2hhbGxlbmdlGAMgASgMEhcKD2NsaWVudENoYWxsZW5nZRgEIAEoDCJO",
            "ChZIb21lTm9kZVJlcXVlc3RSZXF1ZXN0EjQKCGNvbnRyYWN0GAEgASgLMiIu",
            "aW9wLmhvbWVub2RlLkhvbWVOb2RlUGxhbkNvbnRyYWN0Ik8KF0hvbWVOb2Rl",
            "UmVxdWVzdFJlc3BvbnNlEjQKCGNvbnRyYWN0GAEgASgLMiIuaW9wLmhvbWVu",
            "b2RlLkhvbWVOb2RlUGxhbkNvbnRyYWN0ImoKFEhvbWVOb2RlUGxhbkNvbnRy",
            "YWN0Eg4KBnBsYW5JZBgBIAEoDBIZChFpZGVudGl0eVB1YmxpY0tleRgCIAEo",
            "DBIRCglzdGFydFRpbWUYAyABKBISFAoMaWRlbnRpdHlUeXBlGAQgASgJIiMK",
            "DkNoZWNrSW5SZXF1ZXN0EhEKCWNoYWxsZW5nZRgBIAEoDCIRCg9DaGVja0lu",
            "UmVzcG9uc2UiKgoVVmVyaWZ5SWRlbnRpdHlSZXF1ZXN0EhEKCWNoYWxsZW5n",
            "ZRgBIAEoDCIYChZWZXJpZnlJZGVudGl0eVJlc3BvbnNlIt4BChRVcGRhdGVQ",
            "cm9maWxlUmVxdWVzdBISCgpzZXRWZXJzaW9uGAEgASgIEg8KB3NldE5hbWUY",
            "AiABKAgSEAoIc2V0SW1hZ2UYAyABKAgSEwoLc2V0TG9jYXRpb24YBCABKAgS",
            "FAoMc2V0RXh0cmFEYXRhGAUgASgIEg8KB3ZlcnNpb24YCCABKAwSDAoEbmFt",
            "ZRgJIAEoCRINCgVpbWFnZRgKIAEoDBIQCghsYXRpdHVkZRgLIAEoDxIRCgls",
            "b25naXR1ZGUYDCABKA8SEQoJZXh0cmFEYXRhGA0gASgJIhcKFVVwZGF0ZVBy",
            "b2ZpbGVSZXNwb25zZSJdCh5DYW5jZWxIb21lTm9kZUFncmVlbWVudFJlcXVl",
            "c3QSHQoVcmVkaXJlY3RUb05ld0hvbWVOb2RlGAEgASgIEhwKFG5ld0hvbWVO",
            "b2RlTmV0d29ya0lkGAIgASgMIiEKH0NhbmNlbEhvbWVOb2RlQWdyZWVtZW50",
            "UmVzcG9uc2UiNAocQXBwbGljYXRpb25TZXJ2aWNlQWRkUmVxdWVzdBIUCgxz",
            "ZXJ2aWNlTmFtZXMYASADKAkiHwodQXBwbGljYXRpb25TZXJ2aWNlQWRkUmVz",
            "cG9uc2UiNgofQXBwbGljYXRpb25TZXJ2aWNlUmVtb3ZlUmVxdWVzdBITCgtz",
            "ZXJ2aWNlTmFtZRgBIAEoCSIiCiBBcHBsaWNhdGlvblNlcnZpY2VSZW1vdmVS",
            "ZXNwb25zZSKaAQodR2V0SWRlbnRpdHlJbmZvcm1hdGlvblJlcXVlc3QSGQoR",
            "aWRlbnRpdHlOZXR3b3JrSWQYASABKAwSGwoTaW5jbHVkZVByb2ZpbGVJbWFn",
            "ZRgCIAEoCBIdChVpbmNsdWRlVGh1bWJuYWlsSW1hZ2UYAyABKAgSIgoaaW5j",
            "bHVkZUFwcGxpY2F0aW9uU2VydmljZXMYBCABKAgizwIKHkdldElkZW50aXR5",
            "SW5mb3JtYXRpb25SZXNwb25zZRIQCghpc0hvc3RlZBgBIAEoCBIdChVpc1Rh",
            "cmdldEhvbWVOb2RlS25vd24YAiABKAgSHwoXdGFyZ2V0SG9tZU5vZGVOZXR3",
            "b3JrSWQYAyABKAwSEAoIaXNPbmxpbmUYBCABKAgSDwoHdmVyc2lvbhgFIAEo",
            "DBIZChFpZGVudGl0eVB1YmxpY0tleRgGIAEoDBIMCgR0eXBlGAcgASgJEgwK",
            "BG5hbWUYCCABKAkSEAoIbGF0aXR1ZGUYCSABKA8SEQoJbG9uZ2l0dWRlGAog",
            "ASgPEhEKCWV4dHJhRGF0YRgLIAEoCRIUCgxwcm9maWxlSW1hZ2UYDCABKAwS",
            "FgoOdGh1bWJuYWlsSW1hZ2UYDSABKAwSGwoTYXBwbGljYXRpb25TZXJ2aWNl",
            "cxgOIAMoCSJXCiVDYWxsSWRlbnRpdHlBcHBsaWNhdGlvblNlcnZpY2VSZXF1",
            "ZXN0EhkKEWlkZW50aXR5TmV0d29ya0lkGAEgASgMEhMKC3NlcnZpY2VOYW1l",
            "GAIgASgJIj0KJkNhbGxJZGVudGl0eUFwcGxpY2F0aW9uU2VydmljZVJlc3Bv",
            "bnNlEhMKC2NhbGxlclRva2VuGAEgASgMImQKH0luY29taW5nQ2FsbE5vdGlm",
            "aWNhdGlvblJlcXVlc3QSFwoPY2FsbGVyUHVibGljS2V5GAEgASgMEhMKC3Nl",
            "cnZpY2VOYW1lGAIgASgJEhMKC2NhbGxlZVRva2VuGAMgASgMIiIKIEluY29t",
            "aW5nQ2FsbE5vdGlmaWNhdGlvblJlc3BvbnNlIkYKJEFwcGxpY2F0aW9uU2Vy",
            "dmljZVNlbmRNZXNzYWdlUmVxdWVzdBINCgV0b2tlbhgBIAEoDBIPCgdtZXNz",
            "YWdlGAIgASgMIicKJUFwcGxpY2F0aW9uU2VydmljZVNlbmRNZXNzYWdlUmVz",
            "cG9uc2UiRgozQXBwbGljYXRpb25TZXJ2aWNlUmVjZWl2ZU1lc3NhZ2VOb3Rp",
            "ZmljYXRpb25SZXF1ZXN0Eg8KB21lc3NhZ2UYASABKAwiNgo0QXBwbGljYXRp",
            "b25TZXJ2aWNlUmVjZWl2ZU1lc3NhZ2VOb3RpZmljYXRpb25SZXNwb25zZSIV",
            "ChNQcm9maWxlU3RhdHNSZXF1ZXN0IkUKFFByb2ZpbGVTdGF0c1Jlc3BvbnNl",
            "Ei0KBXN0YXRzGAEgAygLMh4uaW9wLmhvbWVub2RlLlByb2ZpbGVTdGF0c0l0",
            "ZW0iNwoQUHJvZmlsZVN0YXRzSXRlbRIUCgxpZGVudGl0eVR5cGUYASABKAkS",
            "DQoFY291bnQYAiABKA0i8gEKFFByb2ZpbGVTZWFyY2hSZXF1ZXN0EhkKEWlu",
            "Y2x1ZGVIb3N0ZWRPbmx5GAEgASgIEh4KFmluY2x1ZGVUaHVtYm5haWxJbWFn",
            "ZXMYAiABKAgSHgoWbWF4UmVzcG9uc2VSZWNvcmRDb3VudBgDIAEoDRIbChNt",
            "YXhUb3RhbFJlY29yZENvdW50GAQgASgNEgwKBHR5cGUYBSABKAkSDAoEbmFt",
            "ZRgGIAEoCRIQCghsYXRpdHVkZRgHIAEoDxIRCglsb25naXR1ZGUYCCABKA8S",
            "DgoGcmFkaXVzGAkgASgNEhEKCWV4dHJhRGF0YRgKIAEoCSKqAQoVUHJvZmls",
            "ZVNlYXJjaFJlc3BvbnNlEhgKEHRvdGFsUmVjb3JkQ291bnQYASABKA0SHgoW",
            "bWF4UmVzcG9uc2VSZWNvcmRDb3VudBgCIAEoDRIUCgxjb3ZlcmVkTm9kZXMY",
            "AyADKAwSQQoIcHJvZmlsZXMYBCADKAsyLy5pb3AuaG9tZW5vZGUuSWRlbnRp",
            "dHlOZXR3b3JrUHJvZmlsZUluZm9ybWF0aW9uIv4BCiFJZGVudGl0eU5ldHdv",
            "cmtQcm9maWxlSW5mb3JtYXRpb24SEAoIaXNIb3N0ZWQYASABKAgSHQoVbmVp",
            "Z2hib3JOb2RlTmV0d29ya0lkGAIgASgMEhAKCGlzT25saW5lGAMgASgIEg8K",
            "B3ZlcnNpb24YBCABKAwSGQoRaWRlbnRpdHlQdWJsaWNLZXkYBSABKAwSDAoE",
            "dHlwZRgGIAEoCRIMCgRuYW1lGAcgASgJEhAKCGxhdGl0dWRlGAggASgPEhEK",
            "CWxvbmdpdHVkZRgJIAEoDxIRCglleHRyYURhdGEYCiABKAkSFgoOdGh1bWJu",
            "YWlsSW1hZ2UYCyABKAwiRAoYUHJvZmlsZVNlYXJjaFBhcnRSZXF1ZXN0EhMK",
            "C3JlY29yZEluZGV4GAEgASgNEhMKC3JlY29yZENvdW50GAIgASgNIogBChlQ",
            "cm9maWxlU2VhcmNoUGFydFJlc3BvbnNlEhMKC3JlY29yZEluZGV4GAEgASgN",
            "EhMKC3JlY29yZENvdW50GAIgASgNEkEKCHByb2ZpbGVzGAMgAygLMi8uaW9w",
            "LmhvbWVub2RlLklkZW50aXR5TmV0d29ya1Byb2ZpbGVJbmZvcm1hdGlvbiKY",
            "AQoZQWRkUmVsYXRlZElkZW50aXR5UmVxdWVzdBJBCg9jYXJkQXBwbGljYXRp",
            "b24YASABKAsyKC5pb3AuaG9tZW5vZGUuQ2FyZEFwcGxpY2F0aW9uSW5mb3Jt",
            "YXRpb24SOAoKc2lnbmVkQ2FyZBgCIAEoCzIkLmlvcC5ob21lbm9kZS5TaWdu",
            "ZWRSZWxhdGlvbnNoaXBDYXJkIhwKGkFkZFJlbGF0ZWRJZGVudGl0eVJlc3Bv",
            "bnNlIjUKHFJlbW92ZVJlbGF0ZWRJZGVudGl0eVJlcXVlc3QSFQoNYXBwbGlj",
            "YXRpb25JZBgBIAEoDCIfCh1SZW1vdmVSZWxhdGVkSWRlbnRpdHlSZXNwb25z",
            "ZSJDChpDYXJkQXBwbGljYXRpb25JbmZvcm1hdGlvbhIOCgZjYXJkSWQYASAB",
            "KAwSFQoNYXBwbGljYXRpb25JZBgCIAEoDCJfChZTaWduZWRSZWxhdGlvbnNo",
            "aXBDYXJkEiwKBGNhcmQYASABKAsyHi5pb3AuaG9tZW5vZGUuUmVsYXRpb25z",
            "aGlwQ2FyZBIXCg9pc3N1ZXJTaWduYXR1cmUYAiABKAwimgEKEFJlbGF0aW9u",
            "c2hpcENhcmQSDgoGY2FyZElkGAEgASgMEg8KB3ZlcnNpb24YAiABKAwSDAoE",
            "dHlwZRgDIAEoCRIRCgl2YWxpZEZyb20YBCABKBISDwoHdmFsaWRUbxgFIAEo",
            "EhIXCg9pc3N1ZXJQdWJsaWNLZXkYBiABKAwSGgoScmVjaXBpZW50UHVibGlj",
            "S2V5GAcgASgMIp4BCipHZXRJZGVudGl0eVJlbGF0aW9uc2hpcHNJbmZvcm1h",
            "dGlvblJlcXVlc3QSGQoRaWRlbnRpdHlOZXR3b3JrSWQYASABKAwSFgoOaW5j",
            "bHVkZUludmFsaWQYAiABKAgSDAoEdHlwZRgDIAEoCRIWCg5zcGVjaWZpY0lz",
            "c3VlchgEIAEoCBIXCg9pc3N1ZXJOZXR3b3JrSWQYBSABKAwiaAorR2V0SWRl",
            "bnRpdHlSZWxhdGlvbnNoaXBzSW5mb3JtYXRpb25SZXNwb25zZRI5Cg1yZWxh",
            "dGlvbnNoaXBzGAEgAygLMiIuaW9wLmhvbWVub2RlLklkZW50aXR5UmVsYXRp",
            "b25zaGlwIq8BChRJZGVudGl0eVJlbGF0aW9uc2hpcBJBCg9jYXJkQXBwbGlj",
            "YXRpb24YASABKAsyKC5pb3AuaG9tZW5vZGUuQ2FyZEFwcGxpY2F0aW9uSW5m",
            "b3JtYXRpb24SIAoYY2FyZEFwcGxpY2F0aW9uU2lnbmF0dXJlGAIgASgMEjIK",
            "BGNhcmQYAyABKAsyJC5pb3AuaG9tZW5vZGUuU2lnbmVkUmVsYXRpb25zaGlw",
            "Q2FyZCIoCiZTdGFydE5laWdoYm9yaG9vZEluaXRpYWxpemF0aW9uUmVxdWVz",
            "dCIpCidTdGFydE5laWdoYm9yaG9vZEluaXRpYWxpemF0aW9uUmVzcG9uc2Ui",
            "KQonRmluaXNoTmVpZ2hib3Job29kSW5pdGlhbGl6YXRpb25SZXF1ZXN0IioK",
            "KEZpbmlzaE5laWdoYm9yaG9vZEluaXRpYWxpemF0aW9uUmVzcG9uc2UiWgoi",
            "TmVpZ2hib3JTaGFyZWRQcm9maWxlVXBkYXRlUmVxdWVzdBI0CgVpdGVtcxgB",
            "IAMoCzIlLmlvcC5ob21lbm9kZS5TaGFyZWRQcm9maWxlVXBkYXRlSXRlbSIl",
            "CiNOZWlnaGJvclNoYXJlZFByb2ZpbGVVcGRhdGVSZXNwb25zZSLMAQoXU2hh",
            "cmVkUHJvZmlsZVVwZGF0ZUl0ZW0SMQoDYWRkGAEgASgLMiIuaW9wLmhvbWVu",
            "b2RlLlNoYXJlZFByb2ZpbGVBZGRJdGVtSAASNwoGY2hhbmdlGAIgASgLMiUu",
            "aW9wLmhvbWVub2RlLlNoYXJlZFByb2ZpbGVDaGFuZ2VJdGVtSAASNwoGZGVs",
            "ZXRlGAMgASgLMiUuaW9wLmhvbWVub2RlLlNoYXJlZFByb2ZpbGVEZWxldGVJ",
            "dGVtSABCDAoKQWN0aW9uVHlwZSLJAQoUU2hhcmVkUHJvZmlsZUFkZEl0ZW0S",
            "DwoHdmVyc2lvbhgBIAEoDBIZChFpZGVudGl0eVB1YmxpY0tleRgCIAEoDBIM",
            "CgRuYW1lGAMgASgJEgwKBHR5cGUYBCABKAkSGQoRc2V0VGh1bWJuYWlsSW1h",
            "Z2UYBSABKAgSFgoOdGh1bWJuYWlsSW1hZ2UYBiABKAwSEAoIbGF0aXR1ZGUY",
            "ByABKA8SEQoJbG9uZ2l0dWRlGAggASgPEhEKCWV4dHJhRGF0YRgJIAEoCSKO",
            "AgoXU2hhcmVkUHJvZmlsZUNoYW5nZUl0ZW0SGQoRaWRlbnRpdHlOZXR3b3Jr",
            "SWQYASABKAwSEgoKc2V0VmVyc2lvbhgCIAEoCBIPCgdzZXROYW1lGAMgASgI",
            "EhkKEXNldFRodW1ibmFpbEltYWdlGAQgASgIEhMKC3NldExvY2F0aW9uGAUg",
            "ASgIEhQKDHNldEV4dHJhRGF0YRgGIAEoCBIPCgd2ZXJzaW9uGAcgASgMEgwK",
            "BG5hbWUYCCABKAkSFgoOdGh1bWJuYWlsSW1hZ2UYCSABKAwSEAoIbGF0aXR1",
            "ZGUYCiABKA8SEQoJbG9uZ2l0dWRlGAsgASgPEhEKCWV4dHJhRGF0YRgMIAEo",
            "CSI0ChdTaGFyZWRQcm9maWxlRGVsZXRlSXRlbRIZChFpZGVudGl0eU5ldHdv",
            "cmtJZBgBIAEoDCqWAwoGU3RhdHVzEg0KCVNUQVRVU19PSxAAEhwKGEVSUk9S",
            "X1BST1RPQ09MX1ZJT0xBVElPThABEhUKEUVSUk9SX1VOU1VQUE9SVEVEEAIS",
            "EAoMRVJST1JfQkFOTkVEEAMSDgoKRVJST1JfQlVTWRAEEhYKEkVSUk9SX1VO",
            "QVVUSE9SSVpFRBAFEhIKDkVSUk9SX0JBRF9ST0xFEAYSIQodRVJST1JfQkFE",
            "X0NPTlZFUlNBVElPTl9TVEFUVVMQBxISCg5FUlJPUl9JTlRFUk5BTBAIEhgK",
            "FEVSUk9SX1FVT1RBX0VYQ0VFREVEEDMSGwoXRVJST1JfSU5WQUxJRF9TSUdO",
            "QVRVUkUQNBITCg9FUlJPUl9OT1RfRk9VTkQQNRIXChNFUlJPUl9JTlZBTElE",
            "X1ZBTFVFEDYSGAoURVJST1JfQUxSRUFEWV9FWElTVFMQNxIXChNFUlJPUl9O",
            "T1RfQVZBSUxBQkxFEDgSEgoORVJST1JfUkVKRUNURUQQORIXChNFUlJPUl9V",
            "TklOSVRJQUxJWkVEEDoqegoOU2VydmVyUm9sZVR5cGUSCwoHUFJJTUFSWRAA",
            "Eg8KC05EX05FSUdIQk9SEAESEAoMTkRfQ09MTEVBR1VFEAISEwoPQ0xfTk9O",
            "X0NVU1RPTUVSEAMSDwoLQ0xfQ1VTVE9NRVIQBBISCg5DTF9BUFBfU0VSVklD",
            "RRAFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Iop.Homenode.Status), typeof(global::Iop.Homenode.ServerRoleType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.MessageWithHeader), global::Iop.Homenode.MessageWithHeader.Parser, new[]{ "Header", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.Message), global::Iop.Homenode.Message.Parser, new[]{ "Id", "Request", "Response" }, new[]{ "MessageType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.Request), global::Iop.Homenode.Request.Parser, new[]{ "SingleRequest", "ConversationRequest" }, new[]{ "ConversationType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.Response), global::Iop.Homenode.Response.Parser, new[]{ "Status", "Timestamp", "Details", "SingleResponse", "ConversationResponse" }, new[]{ "ConversationType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.SingleRequest), global::Iop.Homenode.SingleRequest.Parser, new[]{ "Version", "Ping", "ListRoles", "ListHomeNodePlans", "GetIdentityInformation", "ApplicationServiceSendMessage", "ApplicationServiceReceiveMessageNotification", "ProfileStats", "GetIdentityRelationshipsInformation" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.SingleResponse), global::Iop.Homenode.SingleResponse.Parser, new[]{ "Version", "Ping", "ListRoles", "ListHomeNodePlans", "GetIdentityInformation", "ApplicationServiceSendMessage", "ApplicationServiceReceiveMessageNotification", "ProfileStats", "GetIdentityRelationshipsInformation" }, new[]{ "ResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ConversationRequest), global::Iop.Homenode.ConversationRequest.Parser, new[]{ "Signature", "Start", "HomeNodeRequest", "CheckIn", "VerifyIdentity", "UpdateProfile", "CancelHomeNodeAgreement", "ApplicationServiceAdd", "ApplicationServiceRemove", "CallIdentityApplicationService", "IncomingCallNotification", "ProfileSearch", "ProfileSearchPart", "AddRelatedIdentity", "RemoveRelatedIdentity", "StartNeighborhoodInitialization", "FinishNeighborhoodInitialization", "NeighborSharedProfileUpdate" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ConversationResponse), global::Iop.Homenode.ConversationResponse.Parser, new[]{ "Signature", "Start", "HomeNodeRequest", "CheckIn", "VerifyIdentity", "UpdateProfile", "CancelHomeNodeAgreement", "ApplicationServiceAdd", "ApplicationServiceRemove", "CallIdentityApplicationService", "IncomingCallNotification", "ProfileSearch", "ProfileSearchPart", "AddRelatedIdentity", "RemoveRelatedIdentity", "StartNeighborhoodInitialization", "FinishNeighborhoodInitialization", "NeighborSharedProfileUpdate" }, new[]{ "ResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.PingRequest), global::Iop.Homenode.PingRequest.Parser, new[]{ "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.PingResponse), global::Iop.Homenode.PingResponse.Parser, new[]{ "Payload", "Clock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ListRolesRequest), global::Iop.Homenode.ListRolesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ListRolesResponse), global::Iop.Homenode.ListRolesResponse.Parser, new[]{ "Roles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ServerRole), global::Iop.Homenode.ServerRole.Parser, new[]{ "Role", "Port", "IsTcp", "IsTls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ListHomeNodePlansRequest), global::Iop.Homenode.ListHomeNodePlansRequest.Parser, new[]{ "IdentityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ListHomeNodePlansResponse), global::Iop.Homenode.ListHomeNodePlansResponse.Parser, new[]{ "Plans" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.HomeNodePlan), global::Iop.Homenode.HomeNodePlan.Parser, new[]{ "PlanId", "NodeNetworkId", "IdentityType", "Fee", "BillingPeriodSeconds", "PlanParameters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.NameStringValuePair), global::Iop.Homenode.NameStringValuePair.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.StartConversationRequest), global::Iop.Homenode.StartConversationRequest.Parser, new[]{ "SupportedVersions", "PublicKey", "ClientChallenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.StartConversationResponse), global::Iop.Homenode.StartConversationResponse.Parser, new[]{ "Version", "PublicKey", "Challenge", "ClientChallenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.HomeNodeRequestRequest), global::Iop.Homenode.HomeNodeRequestRequest.Parser, new[]{ "Contract" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.HomeNodeRequestResponse), global::Iop.Homenode.HomeNodeRequestResponse.Parser, new[]{ "Contract" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.HomeNodePlanContract), global::Iop.Homenode.HomeNodePlanContract.Parser, new[]{ "PlanId", "IdentityPublicKey", "StartTime", "IdentityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CheckInRequest), global::Iop.Homenode.CheckInRequest.Parser, new[]{ "Challenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CheckInResponse), global::Iop.Homenode.CheckInResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.VerifyIdentityRequest), global::Iop.Homenode.VerifyIdentityRequest.Parser, new[]{ "Challenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.VerifyIdentityResponse), global::Iop.Homenode.VerifyIdentityResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.UpdateProfileRequest), global::Iop.Homenode.UpdateProfileRequest.Parser, new[]{ "SetVersion", "SetName", "SetImage", "SetLocation", "SetExtraData", "Version", "Name", "Image", "Latitude", "Longitude", "ExtraData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.UpdateProfileResponse), global::Iop.Homenode.UpdateProfileResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CancelHomeNodeAgreementRequest), global::Iop.Homenode.CancelHomeNodeAgreementRequest.Parser, new[]{ "RedirectToNewHomeNode", "NewHomeNodeNetworkId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CancelHomeNodeAgreementResponse), global::Iop.Homenode.CancelHomeNodeAgreementResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceAddRequest), global::Iop.Homenode.ApplicationServiceAddRequest.Parser, new[]{ "ServiceNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceAddResponse), global::Iop.Homenode.ApplicationServiceAddResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceRemoveRequest), global::Iop.Homenode.ApplicationServiceRemoveRequest.Parser, new[]{ "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceRemoveResponse), global::Iop.Homenode.ApplicationServiceRemoveResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.GetIdentityInformationRequest), global::Iop.Homenode.GetIdentityInformationRequest.Parser, new[]{ "IdentityNetworkId", "IncludeProfileImage", "IncludeThumbnailImage", "IncludeApplicationServices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.GetIdentityInformationResponse), global::Iop.Homenode.GetIdentityInformationResponse.Parser, new[]{ "IsHosted", "IsTargetHomeNodeKnown", "TargetHomeNodeNetworkId", "IsOnline", "Version", "IdentityPublicKey", "Type", "Name", "Latitude", "Longitude", "ExtraData", "ProfileImage", "ThumbnailImage", "ApplicationServices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CallIdentityApplicationServiceRequest), global::Iop.Homenode.CallIdentityApplicationServiceRequest.Parser, new[]{ "IdentityNetworkId", "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CallIdentityApplicationServiceResponse), global::Iop.Homenode.CallIdentityApplicationServiceResponse.Parser, new[]{ "CallerToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.IncomingCallNotificationRequest), global::Iop.Homenode.IncomingCallNotificationRequest.Parser, new[]{ "CallerPublicKey", "ServiceName", "CalleeToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.IncomingCallNotificationResponse), global::Iop.Homenode.IncomingCallNotificationResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceSendMessageRequest), global::Iop.Homenode.ApplicationServiceSendMessageRequest.Parser, new[]{ "Token", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceSendMessageResponse), global::Iop.Homenode.ApplicationServiceSendMessageResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest), global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse), global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ProfileStatsRequest), global::Iop.Homenode.ProfileStatsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ProfileStatsResponse), global::Iop.Homenode.ProfileStatsResponse.Parser, new[]{ "Stats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ProfileStatsItem), global::Iop.Homenode.ProfileStatsItem.Parser, new[]{ "IdentityType", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ProfileSearchRequest), global::Iop.Homenode.ProfileSearchRequest.Parser, new[]{ "IncludeHostedOnly", "IncludeThumbnailImages", "MaxResponseRecordCount", "MaxTotalRecordCount", "Type", "Name", "Latitude", "Longitude", "Radius", "ExtraData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ProfileSearchResponse), global::Iop.Homenode.ProfileSearchResponse.Parser, new[]{ "TotalRecordCount", "MaxResponseRecordCount", "CoveredNodes", "Profiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.IdentityNetworkProfileInformation), global::Iop.Homenode.IdentityNetworkProfileInformation.Parser, new[]{ "IsHosted", "NeighborNodeNetworkId", "IsOnline", "Version", "IdentityPublicKey", "Type", "Name", "Latitude", "Longitude", "ExtraData", "ThumbnailImage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ProfileSearchPartRequest), global::Iop.Homenode.ProfileSearchPartRequest.Parser, new[]{ "RecordIndex", "RecordCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.ProfileSearchPartResponse), global::Iop.Homenode.ProfileSearchPartResponse.Parser, new[]{ "RecordIndex", "RecordCount", "Profiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.AddRelatedIdentityRequest), global::Iop.Homenode.AddRelatedIdentityRequest.Parser, new[]{ "CardApplication", "SignedCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.AddRelatedIdentityResponse), global::Iop.Homenode.AddRelatedIdentityResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.RemoveRelatedIdentityRequest), global::Iop.Homenode.RemoveRelatedIdentityRequest.Parser, new[]{ "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.RemoveRelatedIdentityResponse), global::Iop.Homenode.RemoveRelatedIdentityResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.CardApplicationInformation), global::Iop.Homenode.CardApplicationInformation.Parser, new[]{ "CardId", "ApplicationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.SignedRelationshipCard), global::Iop.Homenode.SignedRelationshipCard.Parser, new[]{ "Card", "IssuerSignature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.RelationshipCard), global::Iop.Homenode.RelationshipCard.Parser, new[]{ "CardId", "Version", "Type", "ValidFrom", "ValidTo", "IssuerPublicKey", "RecipientPublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.GetIdentityRelationshipsInformationRequest), global::Iop.Homenode.GetIdentityRelationshipsInformationRequest.Parser, new[]{ "IdentityNetworkId", "IncludeInvalid", "Type", "SpecificIssuer", "IssuerNetworkId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.GetIdentityRelationshipsInformationResponse), global::Iop.Homenode.GetIdentityRelationshipsInformationResponse.Parser, new[]{ "Relationships" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.IdentityRelationship), global::Iop.Homenode.IdentityRelationship.Parser, new[]{ "CardApplication", "CardApplicationSignature", "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.StartNeighborhoodInitializationRequest), global::Iop.Homenode.StartNeighborhoodInitializationRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.StartNeighborhoodInitializationResponse), global::Iop.Homenode.StartNeighborhoodInitializationResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.FinishNeighborhoodInitializationRequest), global::Iop.Homenode.FinishNeighborhoodInitializationRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.FinishNeighborhoodInitializationResponse), global::Iop.Homenode.FinishNeighborhoodInitializationResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.NeighborSharedProfileUpdateRequest), global::Iop.Homenode.NeighborSharedProfileUpdateRequest.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.NeighborSharedProfileUpdateResponse), global::Iop.Homenode.NeighborSharedProfileUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.SharedProfileUpdateItem), global::Iop.Homenode.SharedProfileUpdateItem.Parser, new[]{ "Add", "Change", "Delete" }, new[]{ "ActionType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.SharedProfileAddItem), global::Iop.Homenode.SharedProfileAddItem.Parser, new[]{ "Version", "IdentityPublicKey", "Name", "Type", "SetThumbnailImage", "ThumbnailImage", "Latitude", "Longitude", "ExtraData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.SharedProfileChangeItem), global::Iop.Homenode.SharedProfileChangeItem.Parser, new[]{ "IdentityNetworkId", "SetVersion", "SetName", "SetThumbnailImage", "SetLocation", "SetExtraData", "Version", "Name", "ThumbnailImage", "Latitude", "Longitude", "ExtraData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Homenode.SharedProfileDeleteItem), global::Iop.Homenode.SharedProfileDeleteItem.Parser, new[]{ "IdentityNetworkId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Return codes to requests that inform requestor about whether the operation completed successfully or which error occurred.
  /// </summary>
  public enum Status {
    /// <summary>
    ///  General codes that can be returned to any message.
    /// </summary>
    [pbr::OriginalName("STATUS_OK")] Ok = 0,
    /// <summary>
    ///  The incoming request does not follow the protocol.
    /// </summary>
    [pbr::OriginalName("ERROR_PROTOCOL_VIOLATION")] ErrorProtocolViolation = 1,
    /// <summary>
    ///  The peer does not support the request. This is returned when a peer sends a message with an unsupported protocol version.
    /// </summary>
    [pbr::OriginalName("ERROR_UNSUPPORTED")] ErrorUnsupported = 2,
    /// <summary>
    ///  The peer will not process the request bacause the requestor is on the blacklist. Information about the blacklist entry expiration is provided in 'Response.timestamp'.
    /// </summary>
    [pbr::OriginalName("ERROR_BANNED")] ErrorBanned = 3,
    /// <summary>
    ///  The peer will not process the request because it is too busy. The requestor can try later.
    /// </summary>
    [pbr::OriginalName("ERROR_BUSY")] ErrorBusy = 4,
    /// <summary>
    ///  Within conversation, some server roles require authorization of the peer before certain requests are allowed.
    /// </summary>
    [pbr::OriginalName("ERROR_UNAUTHORIZED")] ErrorUnauthorized = 5,
    /// <summary>
    ///  If a request is sent to a port that does not handle the specific role, this error is returned.
    /// </summary>
    [pbr::OriginalName("ERROR_BAD_ROLE")] ErrorBadRole = 6,
    /// <summary>
    ///  The conversation status is different from what the message requires.
    /// </summary>
    [pbr::OriginalName("ERROR_BAD_CONVERSATION_STATUS")] ErrorBadConversationStatus = 7,
    /// <summary>
    ///  Internal error occurred while processing the message.
    /// </summary>
    [pbr::OriginalName("ERROR_INTERNAL")] ErrorInternal = 8,
    /// <summary>
    ///  Return codes specific to a request.
    /// </summary>
    [pbr::OriginalName("ERROR_QUOTA_EXCEEDED")] ErrorQuotaExceeded = 51,
    /// <summary>
    ///  The signature provided be the peer does not correspond to the peer's key or the message being signed.
    /// </summary>
    [pbr::OriginalName("ERROR_INVALID_SIGNATURE")] ErrorInvalidSignature = 52,
    /// <summary>
    ///  A referenced object was not found.
    /// </summary>
    [pbr::OriginalName("ERROR_NOT_FOUND")] ErrorNotFound = 53,
    /// <summary>
    ///  One of the values provided is invalid.
    /// </summary>
    [pbr::OriginalName("ERROR_INVALID_VALUE")] ErrorInvalidValue = 54,
    /// <summary>
    ///  An object with the same identifier already exists.
    /// </summary>
    [pbr::OriginalName("ERROR_ALREADY_EXISTS")] ErrorAlreadyExists = 55,
    /// <summary>
    ///  A request object is not available.
    /// </summary>
    [pbr::OriginalName("ERROR_NOT_AVAILABLE")] ErrorNotAvailable = 56,
    /// <summary>
    ///  A third party rejected the requested action.
    /// </summary>
    [pbr::OriginalName("ERROR_REJECTED")] ErrorRejected = 57,
    /// <summary>
    ///  The requested object can not be obtained, queried or used as it is not initialized.
    /// </summary>
    [pbr::OriginalName("ERROR_UNINITIALIZED")] ErrorUninitialized = 58,
  }

  /// <summary>
  ///  Known server roles.
  /// </summary>
  public enum ServerRoleType {
    /// <summary>
    ///  Primary and Unrelated Nodes Interface server role.
    /// </summary>
    [pbr::OriginalName("PRIMARY")] Primary = 0,
    /// <summary>
    ///  Neighbors Interface server role.
    /// </summary>
    [pbr::OriginalName("ND_NEIGHBOR")] NdNeighbor = 1,
    /// <summary>
    ///  Colleagues Interface server role.
    /// </summary>
    [pbr::OriginalName("ND_COLLEAGUE")] NdColleague = 2,
    /// <summary>
    ///  Customer Clients Interface server role.
    /// </summary>
    [pbr::OriginalName("CL_NON_CUSTOMER")] ClNonCustomer = 3,
    /// <summary>
    ///  Non Customer Clients Interface server role.
    /// </summary>
    [pbr::OriginalName("CL_CUSTOMER")] ClCustomer = 4,
    /// <summary>
    ///  Application Service Interface server role.
    /// </summary>
    [pbr::OriginalName("CL_APP_SERVICE")] ClAppService = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  This is complete message as it goes over the wire. It includes the 32-bit header with message length.
  ///
  ///  There is a 1 byte prefix because of Google Protobuf protocol, so the actual binary data for a message
  ///  with body size 4660 bytes would be:
  ///
  ///    0D 34 12 00 00
  ///
  ///  where 0x0D means type 'fixed32' (which value is 5) + index of 'header', which is 1 &lt;&lt; 3,
  ///  this is followed be the 4 byte sequence 34 12 00 00, which is little endian of 0x00001234, which is 4,660 decimal.
  ///  Thus the total number of bytes sent over the wire for this message would be 4,665 bytes.
  /// </summary>
  public sealed partial class MessageWithHeader : pb::IMessage<MessageWithHeader> {
    private static readonly pb::MessageParser<MessageWithHeader> _parser = new pb::MessageParser<MessageWithHeader>(() => new MessageWithHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageWithHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader(MessageWithHeader other) : this() {
      header_ = other.header_;
      Body = other.body_ != null ? other.Body.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader Clone() {
      return new MessageWithHeader(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private uint header_;
    /// <summary>
    ///  Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Iop.Homenode.Message body_;
    /// <summary>
    ///  Message itself.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Message Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageWithHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageWithHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Header != 0) hash ^= Header.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Header != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Header);
      }
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Header != 0) {
        size += 1 + 4;
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageWithHeader other) {
      if (other == null) {
        return;
      }
      if (other.Header != 0) {
        Header = other.Header;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          body_ = new global::Iop.Homenode.Message();
        }
        Body.MergeFrom(other.Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Header = input.ReadFixed32();
            break;
          }
          case 18: {
            if (body_ == null) {
              body_ = new global::Iop.Homenode.Message();
            }
            input.ReadMessage(body_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Format of a single message.
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      id_ = other.id_;
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request.Clone();
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  Requestor defined message ID that the requestee has to return in the response. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    /// <summary>
    ///   * a new request,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Request Request {
      get { return messageTypeCase_ == MessageTypeOneofCase.Request ? (global::Iop.Homenode.Request) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Request;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    /// <summary>
    ///   * or response to a previous request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Response Response {
      get { return messageTypeCase_ == MessageTypeOneofCase.Response ? (global::Iop.Homenode.Response) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Response;
      }
    }

    private object messageType_;
    /// <summary>Enum of possible cases for the "MessageType" oneof.</summary>
    public enum MessageTypeOneofCase {
      None = 0,
      Request = 2,
      Response = 3,
    }
    private MessageTypeOneofCase messageTypeCase_ = MessageTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTypeOneofCase MessageTypeCase {
      get { return messageTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      messageTypeCase_ = MessageTypeOneofCase.None;
      messageType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      if (MessageTypeCase != other.MessageTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Request) hash ^= Request.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Response) hash ^= Response.GetHashCode();
      hash ^= (int) messageTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        output.WriteRawTag(26);
        output.WriteMessage(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request;
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Iop.Homenode.Request subBuilder = new global::Iop.Homenode.Request();
            if (messageTypeCase_ == MessageTypeOneofCase.Request) {
              subBuilder.MergeFrom(Request);
            }
            input.ReadMessage(subBuilder);
            Request = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.Response subBuilder = new global::Iop.Homenode.Response();
            if (messageTypeCase_ == MessageTypeOneofCase.Response) {
              subBuilder.MergeFrom(Response);
            }
            input.ReadMessage(subBuilder);
            Response = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Every conversation starts with a request of a requestor.
  ///  This can be either a single request, for which it is expected to receive a single response,
  ///  or this can be part of a longer conversation between the peers.
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleRequest:
          SingleRequest = other.SingleRequest.Clone();
          break;
        case ConversationTypeOneofCase.ConversationRequest:
          ConversationRequest = other.ConversationRequest.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "singleRequest" field.</summary>
    public const int SingleRequestFieldNumber = 1;
    /// <summary>
    ///  Single requests are requests that are supposed to be sent without further context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.SingleRequest SingleRequest {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest ? (global::Iop.Homenode.SingleRequest) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.SingleRequest;
      }
    }

    /// <summary>Field number for the "conversationRequest" field.</summary>
    public const int ConversationRequestFieldNumber = 2;
    /// <summary>
    ///  Conversation requests form a session with a context that has to be maintained by peers in order to correctly interpret the messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ConversationRequest ConversationRequest {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest ? (global::Iop.Homenode.ConversationRequest) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.ConversationRequest;
      }
    }

    private object conversationType_;
    /// <summary>Enum of possible cases for the "ConversationType" oneof.</summary>
    public enum ConversationTypeOneofCase {
      None = 0,
      SingleRequest = 1,
      ConversationRequest = 2,
    }
    private ConversationTypeOneofCase conversationTypeCase_ = ConversationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTypeOneofCase ConversationTypeCase {
      get { return conversationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversationType() {
      conversationTypeCase_ = ConversationTypeOneofCase.None;
      conversationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SingleRequest, other.SingleRequest)) return false;
      if (!object.Equals(ConversationRequest, other.ConversationRequest)) return false;
      if (ConversationTypeCase != other.ConversationTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) hash ^= SingleRequest.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) hash ^= ConversationRequest.GetHashCode();
      hash ^= (int) conversationTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(SingleRequest);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(ConversationRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleRequest);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationRequest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleRequest:
          SingleRequest = other.SingleRequest;
          break;
        case ConversationTypeOneofCase.ConversationRequest:
          ConversationRequest = other.ConversationRequest;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Homenode.SingleRequest subBuilder = new global::Iop.Homenode.SingleRequest();
            if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
              subBuilder.MergeFrom(SingleRequest);
            }
            input.ReadMessage(subBuilder);
            SingleRequest = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Homenode.ConversationRequest subBuilder = new global::Iop.Homenode.ConversationRequest();
            if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
              subBuilder.MergeFrom(ConversationRequest);
            }
            input.ReadMessage(subBuilder);
            ConversationRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  To every request there is a response.
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      status_ = other.status_;
      timestamp_ = other.timestamp_;
      details_ = other.details_;
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleResponse:
          SingleResponse = other.SingleResponse.Clone();
          break;
        case ConversationTypeOneofCase.ConversationResponse:
          ConversationResponse = other.ConversationResponse.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Iop.Homenode.Status status_ = 0;
    /// <summary>
    ///  Return code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    /// <summary>
    ///  TimestampType. If status is ERROR_BANNED, this field specifies when the blacklist entry expires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 3;
    private string details_ = "";
    /// <summary>
    ///  In case of an error, this field may contain additional details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Details {
      get { return details_; }
      set {
        details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "singleResponse" field.</summary>
    public const int SingleResponseFieldNumber = 8;
    /// <summary>
    ///  Responses to single requests are sent as single responses,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.SingleResponse SingleResponse {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse ? (global::Iop.Homenode.SingleResponse) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.SingleResponse;
      }
    }

    /// <summary>Field number for the "conversationResponse" field.</summary>
    public const int ConversationResponseFieldNumber = 9;
    /// <summary>
    ///  responses to conversation requests are sent as conversation responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ConversationResponse ConversationResponse {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse ? (global::Iop.Homenode.ConversationResponse) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.ConversationResponse;
      }
    }

    private object conversationType_;
    /// <summary>Enum of possible cases for the "ConversationType" oneof.</summary>
    public enum ConversationTypeOneofCase {
      None = 0,
      SingleResponse = 8,
      ConversationResponse = 9,
    }
    private ConversationTypeOneofCase conversationTypeCase_ = ConversationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTypeOneofCase ConversationTypeCase {
      get { return conversationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversationType() {
      conversationTypeCase_ = ConversationTypeOneofCase.None;
      conversationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Details != other.Details) return false;
      if (!object.Equals(SingleResponse, other.SingleResponse)) return false;
      if (!object.Equals(ConversationResponse, other.ConversationResponse)) return false;
      if (ConversationTypeCase != other.ConversationTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Details.Length != 0) hash ^= Details.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) hash ^= SingleResponse.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) hash ^= ConversationResponse.GetHashCode();
      hash ^= (int) conversationTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Timestamp);
      }
      if (Details.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Details);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
        output.WriteRawTag(66);
        output.WriteMessage(SingleResponse);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
        output.WriteRawTag(74);
        output.WriteMessage(ConversationResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Timestamp);
      }
      if (Details.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleResponse);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationResponse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Details.Length != 0) {
        Details = other.Details;
      }
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleResponse:
          SingleResponse = other.SingleResponse;
          break;
        case ConversationTypeOneofCase.ConversationResponse:
          ConversationResponse = other.ConversationResponse;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Iop.Homenode.Status) input.ReadEnum();
            break;
          }
          case 16: {
            Timestamp = input.ReadSInt64();
            break;
          }
          case 26: {
            Details = input.ReadString();
            break;
          }
          case 66: {
            global::Iop.Homenode.SingleResponse subBuilder = new global::Iop.Homenode.SingleResponse();
            if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
              subBuilder.MergeFrom(SingleResponse);
            }
            input.ReadMessage(subBuilder);
            SingleResponse = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Homenode.ConversationResponse subBuilder = new global::Iop.Homenode.ConversationResponse();
            if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
              subBuilder.MergeFrom(ConversationResponse);
            }
            input.ReadMessage(subBuilder);
            ConversationResponse = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Single requests live on their own without any session or context. 
  ///  It is always possible to process a single request without any additional informaiton.
  /// </summary>
  public sealed partial class SingleRequest : pb::IMessage<SingleRequest> {
    private static readonly pb::MessageParser<SingleRequest> _parser = new pb::MessageParser<SingleRequest>(() => new SingleRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest(SingleRequest other) : this() {
      version_ = other.version_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case RequestTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles.Clone();
          break;
        case RequestTypeOneofCase.ListHomeNodePlans:
          ListHomeNodePlans = other.ListHomeNodePlans.Clone();
          break;
        case RequestTypeOneofCase.GetIdentityInformation:
          GetIdentityInformation = other.GetIdentityInformation.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification.Clone();
          break;
        case RequestTypeOneofCase.ProfileStats:
          ProfileStats = other.ProfileStats.Clone();
          break;
        case RequestTypeOneofCase.GetIdentityRelationshipsInformation:
          GetIdentityRelationshipsInformation = other.GetIdentityRelationshipsInformation.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest Clone() {
      return new SingleRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. Protocol version specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.PingRequest Ping {
      get { return requestTypeCase_ == RequestTypeOneofCase.Ping ? (global::Iop.Homenode.PingRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "listRoles" field.</summary>
    public const int ListRolesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ListRolesRequest ListRoles {
      get { return requestTypeCase_ == RequestTypeOneofCase.ListRoles ? (global::Iop.Homenode.ListRolesRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ListRoles;
      }
    }

    /// <summary>Field number for the "listHomeNodePlans" field.</summary>
    public const int ListHomeNodePlansFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ListHomeNodePlansRequest ListHomeNodePlans {
      get { return requestTypeCase_ == RequestTypeOneofCase.ListHomeNodePlans ? (global::Iop.Homenode.ListHomeNodePlansRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ListHomeNodePlans;
      }
    }

    /// <summary>Field number for the "getIdentityInformation" field.</summary>
    public const int GetIdentityInformationFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.GetIdentityInformationRequest GetIdentityInformation {
      get { return requestTypeCase_ == RequestTypeOneofCase.GetIdentityInformation ? (global::Iop.Homenode.GetIdentityInformationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.GetIdentityInformation;
      }
    }

    /// <summary>Field number for the "applicationServiceSendMessage" field.</summary>
    public const int ApplicationServiceSendMessageFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceSendMessageRequest ApplicationServiceSendMessage {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage ? (global::Iop.Homenode.ApplicationServiceSendMessageRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceSendMessage;
      }
    }

    /// <summary>Field number for the "applicationServiceReceiveMessageNotification" field.</summary>
    public const int ApplicationServiceReceiveMessageNotificationFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest ApplicationServiceReceiveMessageNotification {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification ? (global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification;
      }
    }

    /// <summary>Field number for the "profileStats" field.</summary>
    public const int ProfileStatsFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ProfileStatsRequest ProfileStats {
      get { return requestTypeCase_ == RequestTypeOneofCase.ProfileStats ? (global::Iop.Homenode.ProfileStatsRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ProfileStats;
      }
    }

    /// <summary>Field number for the "getIdentityRelationshipsInformation" field.</summary>
    public const int GetIdentityRelationshipsInformationFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.GetIdentityRelationshipsInformationRequest GetIdentityRelationshipsInformation {
      get { return requestTypeCase_ == RequestTypeOneofCase.GetIdentityRelationshipsInformation ? (global::Iop.Homenode.GetIdentityRelationshipsInformationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.GetIdentityRelationshipsInformation;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Ping = 2,
      ListRoles = 3,
      ListHomeNodePlans = 4,
      GetIdentityInformation = 5,
      ApplicationServiceSendMessage = 6,
      ApplicationServiceReceiveMessageNotification = 7,
      ProfileStats = 8,
      GetIdentityRelationshipsInformation = 9,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(ListRoles, other.ListRoles)) return false;
      if (!object.Equals(ListHomeNodePlans, other.ListHomeNodePlans)) return false;
      if (!object.Equals(GetIdentityInformation, other.GetIdentityInformation)) return false;
      if (!object.Equals(ApplicationServiceSendMessage, other.ApplicationServiceSendMessage)) return false;
      if (!object.Equals(ApplicationServiceReceiveMessageNotification, other.ApplicationServiceReceiveMessageNotification)) return false;
      if (!object.Equals(ProfileStats, other.ProfileStats)) return false;
      if (!object.Equals(GetIdentityRelationshipsInformation, other.GetIdentityRelationshipsInformation)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) hash ^= ListRoles.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ListHomeNodePlans) hash ^= ListHomeNodePlans.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityInformation) hash ^= GetIdentityInformation.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) hash ^= ApplicationServiceSendMessage.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) hash ^= ApplicationServiceReceiveMessageNotification.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileStats) hash ^= ProfileStats.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityRelationshipsInformation) hash ^= GetIdentityRelationshipsInformation.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
        output.WriteRawTag(18);
        output.WriteMessage(Ping);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
        output.WriteRawTag(26);
        output.WriteMessage(ListRoles);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListHomeNodePlans) {
        output.WriteRawTag(34);
        output.WriteMessage(ListHomeNodePlans);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityInformation) {
        output.WriteRawTag(42);
        output.WriteMessage(GetIdentityInformation);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) {
        output.WriteRawTag(50);
        output.WriteMessage(ApplicationServiceSendMessage);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        output.WriteRawTag(58);
        output.WriteMessage(ApplicationServiceReceiveMessageNotification);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileStats) {
        output.WriteRawTag(66);
        output.WriteMessage(ProfileStats);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityRelationshipsInformation) {
        output.WriteRawTag(74);
        output.WriteMessage(GetIdentityRelationshipsInformation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListRoles);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListHomeNodePlans) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListHomeNodePlans);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityInformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetIdentityInformation);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceSendMessage);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceReceiveMessageNotification);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileStats) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileStats);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityRelationshipsInformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetIdentityRelationshipsInformation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Ping:
          Ping = other.Ping;
          break;
        case RequestTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles;
          break;
        case RequestTypeOneofCase.ListHomeNodePlans:
          ListHomeNodePlans = other.ListHomeNodePlans;
          break;
        case RequestTypeOneofCase.GetIdentityInformation:
          GetIdentityInformation = other.GetIdentityInformation;
          break;
        case RequestTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage;
          break;
        case RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification;
          break;
        case RequestTypeOneofCase.ProfileStats:
          ProfileStats = other.ProfileStats;
          break;
        case RequestTypeOneofCase.GetIdentityRelationshipsInformation:
          GetIdentityRelationshipsInformation = other.GetIdentityRelationshipsInformation;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Homenode.PingRequest subBuilder = new global::Iop.Homenode.PingRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.ListRolesRequest subBuilder = new global::Iop.Homenode.ListRolesRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
              subBuilder.MergeFrom(ListRoles);
            }
            input.ReadMessage(subBuilder);
            ListRoles = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Homenode.ListHomeNodePlansRequest subBuilder = new global::Iop.Homenode.ListHomeNodePlansRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ListHomeNodePlans) {
              subBuilder.MergeFrom(ListHomeNodePlans);
            }
            input.ReadMessage(subBuilder);
            ListHomeNodePlans = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Homenode.GetIdentityInformationRequest subBuilder = new global::Iop.Homenode.GetIdentityInformationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityInformation) {
              subBuilder.MergeFrom(GetIdentityInformation);
            }
            input.ReadMessage(subBuilder);
            GetIdentityInformation = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Homenode.ApplicationServiceSendMessageRequest subBuilder = new global::Iop.Homenode.ApplicationServiceSendMessageRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceSendMessage) {
              subBuilder.MergeFrom(ApplicationServiceSendMessage);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceSendMessage = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest subBuilder = new global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
              subBuilder.MergeFrom(ApplicationServiceReceiveMessageNotification);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceReceiveMessageNotification = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Homenode.ProfileStatsRequest subBuilder = new global::Iop.Homenode.ProfileStatsRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ProfileStats) {
              subBuilder.MergeFrom(ProfileStats);
            }
            input.ReadMessage(subBuilder);
            ProfileStats = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Homenode.GetIdentityRelationshipsInformationRequest subBuilder = new global::Iop.Homenode.GetIdentityRelationshipsInformationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.GetIdentityRelationshipsInformation) {
              subBuilder.MergeFrom(GetIdentityRelationshipsInformation);
            }
            input.ReadMessage(subBuilder);
            GetIdentityRelationshipsInformation = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Single response is a reaction to single request. 
  /// </summary>
  public sealed partial class SingleResponse : pb::IMessage<SingleResponse> {
    private static readonly pb::MessageParser<SingleResponse> _parser = new pb::MessageParser<SingleResponse>(() => new SingleResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse(SingleResponse other) : this() {
      version_ = other.version_;
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case ResponseTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles.Clone();
          break;
        case ResponseTypeOneofCase.ListHomeNodePlans:
          ListHomeNodePlans = other.ListHomeNodePlans.Clone();
          break;
        case ResponseTypeOneofCase.GetIdentityInformation:
          GetIdentityInformation = other.GetIdentityInformation.Clone();
          break;
        case ResponseTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage.Clone();
          break;
        case ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification.Clone();
          break;
        case ResponseTypeOneofCase.ProfileStats:
          ProfileStats = other.ProfileStats.Clone();
          break;
        case ResponseTypeOneofCase.GetIdentityRelationshipsInformation:
          GetIdentityRelationshipsInformation = other.GetIdentityRelationshipsInformation.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse Clone() {
      return new SingleResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. See 'SingleRequest.version'. The version of response can be different than the version in request, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.PingResponse Ping {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Ping ? (global::Iop.Homenode.PingResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "listRoles" field.</summary>
    public const int ListRolesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ListRolesResponse ListRoles {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ListRoles ? (global::Iop.Homenode.ListRolesResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ListRoles;
      }
    }

    /// <summary>Field number for the "listHomeNodePlans" field.</summary>
    public const int ListHomeNodePlansFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ListHomeNodePlansResponse ListHomeNodePlans {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ListHomeNodePlans ? (global::Iop.Homenode.ListHomeNodePlansResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ListHomeNodePlans;
      }
    }

    /// <summary>Field number for the "getIdentityInformation" field.</summary>
    public const int GetIdentityInformationFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.GetIdentityInformationResponse GetIdentityInformation {
      get { return responseTypeCase_ == ResponseTypeOneofCase.GetIdentityInformation ? (global::Iop.Homenode.GetIdentityInformationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.GetIdentityInformation;
      }
    }

    /// <summary>Field number for the "applicationServiceSendMessage" field.</summary>
    public const int ApplicationServiceSendMessageFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceSendMessageResponse ApplicationServiceSendMessage {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage ? (global::Iop.Homenode.ApplicationServiceSendMessageResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ApplicationServiceSendMessage;
      }
    }

    /// <summary>Field number for the "applicationServiceReceiveMessageNotification" field.</summary>
    public const int ApplicationServiceReceiveMessageNotificationFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse ApplicationServiceReceiveMessageNotification {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification ? (global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification;
      }
    }

    /// <summary>Field number for the "profileStats" field.</summary>
    public const int ProfileStatsFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ProfileStatsResponse ProfileStats {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ProfileStats ? (global::Iop.Homenode.ProfileStatsResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ProfileStats;
      }
    }

    /// <summary>Field number for the "getIdentityRelationshipsInformation" field.</summary>
    public const int GetIdentityRelationshipsInformationFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.GetIdentityRelationshipsInformationResponse GetIdentityRelationshipsInformation {
      get { return responseTypeCase_ == ResponseTypeOneofCase.GetIdentityRelationshipsInformation ? (global::Iop.Homenode.GetIdentityRelationshipsInformationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.GetIdentityRelationshipsInformation;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "ResponseType" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      Ping = 2,
      ListRoles = 3,
      ListHomeNodePlans = 4,
      GetIdentityInformation = 5,
      ApplicationServiceSendMessage = 6,
      ApplicationServiceReceiveMessageNotification = 7,
      ProfileStats = 8,
      GetIdentityRelationshipsInformation = 9,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(ListRoles, other.ListRoles)) return false;
      if (!object.Equals(ListHomeNodePlans, other.ListHomeNodePlans)) return false;
      if (!object.Equals(GetIdentityInformation, other.GetIdentityInformation)) return false;
      if (!object.Equals(ApplicationServiceSendMessage, other.ApplicationServiceSendMessage)) return false;
      if (!object.Equals(ApplicationServiceReceiveMessageNotification, other.ApplicationServiceReceiveMessageNotification)) return false;
      if (!object.Equals(ProfileStats, other.ProfileStats)) return false;
      if (!object.Equals(GetIdentityRelationshipsInformation, other.GetIdentityRelationshipsInformation)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) hash ^= ListRoles.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ListHomeNodePlans) hash ^= ListHomeNodePlans.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityInformation) hash ^= GetIdentityInformation.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) hash ^= ApplicationServiceSendMessage.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) hash ^= ApplicationServiceReceiveMessageNotification.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileStats) hash ^= ProfileStats.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityRelationshipsInformation) hash ^= GetIdentityRelationshipsInformation.GetHashCode();
      hash ^= (int) responseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
        output.WriteRawTag(18);
        output.WriteMessage(Ping);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
        output.WriteRawTag(26);
        output.WriteMessage(ListRoles);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListHomeNodePlans) {
        output.WriteRawTag(34);
        output.WriteMessage(ListHomeNodePlans);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityInformation) {
        output.WriteRawTag(42);
        output.WriteMessage(GetIdentityInformation);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) {
        output.WriteRawTag(50);
        output.WriteMessage(ApplicationServiceSendMessage);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        output.WriteRawTag(58);
        output.WriteMessage(ApplicationServiceReceiveMessageNotification);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileStats) {
        output.WriteRawTag(66);
        output.WriteMessage(ProfileStats);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityRelationshipsInformation) {
        output.WriteRawTag(74);
        output.WriteMessage(GetIdentityRelationshipsInformation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListRoles);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListHomeNodePlans) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListHomeNodePlans);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityInformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetIdentityInformation);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceSendMessage);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceReceiveMessageNotification);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileStats) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileStats);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityRelationshipsInformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetIdentityRelationshipsInformation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Ping:
          Ping = other.Ping;
          break;
        case ResponseTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles;
          break;
        case ResponseTypeOneofCase.ListHomeNodePlans:
          ListHomeNodePlans = other.ListHomeNodePlans;
          break;
        case ResponseTypeOneofCase.GetIdentityInformation:
          GetIdentityInformation = other.GetIdentityInformation;
          break;
        case ResponseTypeOneofCase.ApplicationServiceSendMessage:
          ApplicationServiceSendMessage = other.ApplicationServiceSendMessage;
          break;
        case ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification:
          ApplicationServiceReceiveMessageNotification = other.ApplicationServiceReceiveMessageNotification;
          break;
        case ResponseTypeOneofCase.ProfileStats:
          ProfileStats = other.ProfileStats;
          break;
        case ResponseTypeOneofCase.GetIdentityRelationshipsInformation:
          GetIdentityRelationshipsInformation = other.GetIdentityRelationshipsInformation;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Homenode.PingResponse subBuilder = new global::Iop.Homenode.PingResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.ListRolesResponse subBuilder = new global::Iop.Homenode.ListRolesResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
              subBuilder.MergeFrom(ListRoles);
            }
            input.ReadMessage(subBuilder);
            ListRoles = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Homenode.ListHomeNodePlansResponse subBuilder = new global::Iop.Homenode.ListHomeNodePlansResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ListHomeNodePlans) {
              subBuilder.MergeFrom(ListHomeNodePlans);
            }
            input.ReadMessage(subBuilder);
            ListHomeNodePlans = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Homenode.GetIdentityInformationResponse subBuilder = new global::Iop.Homenode.GetIdentityInformationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityInformation) {
              subBuilder.MergeFrom(GetIdentityInformation);
            }
            input.ReadMessage(subBuilder);
            GetIdentityInformation = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Homenode.ApplicationServiceSendMessageResponse subBuilder = new global::Iop.Homenode.ApplicationServiceSendMessageResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceSendMessage) {
              subBuilder.MergeFrom(ApplicationServiceSendMessage);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceSendMessage = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse subBuilder = new global::Iop.Homenode.ApplicationServiceReceiveMessageNotificationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceReceiveMessageNotification) {
              subBuilder.MergeFrom(ApplicationServiceReceiveMessageNotification);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceReceiveMessageNotification = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Homenode.ProfileStatsResponse subBuilder = new global::Iop.Homenode.ProfileStatsResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ProfileStats) {
              subBuilder.MergeFrom(ProfileStats);
            }
            input.ReadMessage(subBuilder);
            ProfileStats = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Homenode.GetIdentityRelationshipsInformationResponse subBuilder = new global::Iop.Homenode.GetIdentityRelationshipsInformationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.GetIdentityRelationshipsInformation) {
              subBuilder.MergeFrom(GetIdentityRelationshipsInformation);
            }
            input.ReadMessage(subBuilder);
            GetIdentityRelationshipsInformation = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Conversation requests live in a session with a context that is important for the interpretation of the requests.
  ///  Unlike single requests, the order of messages is very important as each message may change the session context.
  /// </summary>
  public sealed partial class ConversationRequest : pb::IMessage<ConversationRequest> {
    private static readonly pb::MessageParser<ConversationRequest> _parser = new pb::MessageParser<ConversationRequest>(() => new ConversationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest(ConversationRequest other) : this() {
      signature_ = other.signature_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Start:
          Start = other.Start.Clone();
          break;
        case RequestTypeOneofCase.HomeNodeRequest:
          HomeNodeRequest = other.HomeNodeRequest.Clone();
          break;
        case RequestTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn.Clone();
          break;
        case RequestTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity.Clone();
          break;
        case RequestTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile.Clone();
          break;
        case RequestTypeOneofCase.CancelHomeNodeAgreement:
          CancelHomeNodeAgreement = other.CancelHomeNodeAgreement.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd.Clone();
          break;
        case RequestTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove.Clone();
          break;
        case RequestTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService.Clone();
          break;
        case RequestTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification.Clone();
          break;
        case RequestTypeOneofCase.ProfileSearch:
          ProfileSearch = other.ProfileSearch.Clone();
          break;
        case RequestTypeOneofCase.ProfileSearchPart:
          ProfileSearchPart = other.ProfileSearchPart.Clone();
          break;
        case RequestTypeOneofCase.AddRelatedIdentity:
          AddRelatedIdentity = other.AddRelatedIdentity.Clone();
          break;
        case RequestTypeOneofCase.RemoveRelatedIdentity:
          RemoveRelatedIdentity = other.RemoveRelatedIdentity.Clone();
          break;
        case RequestTypeOneofCase.StartNeighborhoodInitialization:
          StartNeighborhoodInitialization = other.StartNeighborhoodInitialization.Clone();
          break;
        case RequestTypeOneofCase.FinishNeighborhoodInitialization:
          FinishNeighborhoodInitialization = other.FinishNeighborhoodInitialization.Clone();
          break;
        case RequestTypeOneofCase.NeighborSharedProfileUpdate:
          NeighborSharedProfileUpdate = other.NeighborSharedProfileUpdate.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest Clone() {
      return new ConversationRequest(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    ///  Optional (request specific) signature that signs the Protobuf binary form of the included request body or its part.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    /// <summary>
    ///  Request body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.StartConversationRequest Start {
      get { return requestTypeCase_ == RequestTypeOneofCase.Start ? (global::Iop.Homenode.StartConversationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Start;
      }
    }

    /// <summary>Field number for the "homeNodeRequest" field.</summary>
    public const int HomeNodeRequestFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.HomeNodeRequestRequest HomeNodeRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest ? (global::Iop.Homenode.HomeNodeRequestRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.HomeNodeRequest;
      }
    }

    /// <summary>Field number for the "checkIn" field.</summary>
    public const int CheckInFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CheckInRequest CheckIn {
      get { return requestTypeCase_ == RequestTypeOneofCase.CheckIn ? (global::Iop.Homenode.CheckInRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CheckIn;
      }
    }

    /// <summary>Field number for the "verifyIdentity" field.</summary>
    public const int VerifyIdentityFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.VerifyIdentityRequest VerifyIdentity {
      get { return requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity ? (global::Iop.Homenode.VerifyIdentityRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.VerifyIdentity;
      }
    }

    /// <summary>Field number for the "updateProfile" field.</summary>
    public const int UpdateProfileFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.UpdateProfileRequest UpdateProfile {
      get { return requestTypeCase_ == RequestTypeOneofCase.UpdateProfile ? (global::Iop.Homenode.UpdateProfileRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.UpdateProfile;
      }
    }

    /// <summary>Field number for the "cancelHomeNodeAgreement" field.</summary>
    public const int CancelHomeNodeAgreementFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CancelHomeNodeAgreementRequest CancelHomeNodeAgreement {
      get { return requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement ? (global::Iop.Homenode.CancelHomeNodeAgreementRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CancelHomeNodeAgreement;
      }
    }

    /// <summary>Field number for the "applicationServiceAdd" field.</summary>
    public const int ApplicationServiceAddFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceAddRequest ApplicationServiceAdd {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd ? (global::Iop.Homenode.ApplicationServiceAddRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceAdd;
      }
    }

    /// <summary>Field number for the "applicationServiceRemove" field.</summary>
    public const int ApplicationServiceRemoveFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceRemoveRequest ApplicationServiceRemove {
      get { return requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove ? (global::Iop.Homenode.ApplicationServiceRemoveRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ApplicationServiceRemove;
      }
    }

    /// <summary>Field number for the "callIdentityApplicationService" field.</summary>
    public const int CallIdentityApplicationServiceFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CallIdentityApplicationServiceRequest CallIdentityApplicationService {
      get { return requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService ? (global::Iop.Homenode.CallIdentityApplicationServiceRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CallIdentityApplicationService;
      }
    }

    /// <summary>Field number for the "incomingCallNotification" field.</summary>
    public const int IncomingCallNotificationFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.IncomingCallNotificationRequest IncomingCallNotification {
      get { return requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification ? (global::Iop.Homenode.IncomingCallNotificationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.IncomingCallNotification;
      }
    }

    /// <summary>Field number for the "profileSearch" field.</summary>
    public const int ProfileSearchFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ProfileSearchRequest ProfileSearch {
      get { return requestTypeCase_ == RequestTypeOneofCase.ProfileSearch ? (global::Iop.Homenode.ProfileSearchRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ProfileSearch;
      }
    }

    /// <summary>Field number for the "profileSearchPart" field.</summary>
    public const int ProfileSearchPartFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ProfileSearchPartRequest ProfileSearchPart {
      get { return requestTypeCase_ == RequestTypeOneofCase.ProfileSearchPart ? (global::Iop.Homenode.ProfileSearchPartRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ProfileSearchPart;
      }
    }

    /// <summary>Field number for the "addRelatedIdentity" field.</summary>
    public const int AddRelatedIdentityFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.AddRelatedIdentityRequest AddRelatedIdentity {
      get { return requestTypeCase_ == RequestTypeOneofCase.AddRelatedIdentity ? (global::Iop.Homenode.AddRelatedIdentityRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.AddRelatedIdentity;
      }
    }

    /// <summary>Field number for the "removeRelatedIdentity" field.</summary>
    public const int RemoveRelatedIdentityFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.RemoveRelatedIdentityRequest RemoveRelatedIdentity {
      get { return requestTypeCase_ == RequestTypeOneofCase.RemoveRelatedIdentity ? (global::Iop.Homenode.RemoveRelatedIdentityRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.RemoveRelatedIdentity;
      }
    }

    /// <summary>Field number for the "startNeighborhoodInitialization" field.</summary>
    public const int StartNeighborhoodInitializationFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.StartNeighborhoodInitializationRequest StartNeighborhoodInitialization {
      get { return requestTypeCase_ == RequestTypeOneofCase.StartNeighborhoodInitialization ? (global::Iop.Homenode.StartNeighborhoodInitializationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.StartNeighborhoodInitialization;
      }
    }

    /// <summary>Field number for the "finishNeighborhoodInitialization" field.</summary>
    public const int FinishNeighborhoodInitializationFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.FinishNeighborhoodInitializationRequest FinishNeighborhoodInitialization {
      get { return requestTypeCase_ == RequestTypeOneofCase.FinishNeighborhoodInitialization ? (global::Iop.Homenode.FinishNeighborhoodInitializationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.FinishNeighborhoodInitialization;
      }
    }

    /// <summary>Field number for the "neighborSharedProfileUpdate" field.</summary>
    public const int NeighborSharedProfileUpdateFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.NeighborSharedProfileUpdateRequest NeighborSharedProfileUpdate {
      get { return requestTypeCase_ == RequestTypeOneofCase.NeighborSharedProfileUpdate ? (global::Iop.Homenode.NeighborSharedProfileUpdateRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.NeighborSharedProfileUpdate;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Start = 2,
      HomeNodeRequest = 3,
      CheckIn = 4,
      VerifyIdentity = 5,
      UpdateProfile = 6,
      CancelHomeNodeAgreement = 7,
      ApplicationServiceAdd = 8,
      ApplicationServiceRemove = 9,
      CallIdentityApplicationService = 10,
      IncomingCallNotification = 11,
      ProfileSearch = 12,
      ProfileSearchPart = 13,
      AddRelatedIdentity = 14,
      RemoveRelatedIdentity = 15,
      StartNeighborhoodInitialization = 16,
      FinishNeighborhoodInitialization = 17,
      NeighborSharedProfileUpdate = 18,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(HomeNodeRequest, other.HomeNodeRequest)) return false;
      if (!object.Equals(CheckIn, other.CheckIn)) return false;
      if (!object.Equals(VerifyIdentity, other.VerifyIdentity)) return false;
      if (!object.Equals(UpdateProfile, other.UpdateProfile)) return false;
      if (!object.Equals(CancelHomeNodeAgreement, other.CancelHomeNodeAgreement)) return false;
      if (!object.Equals(ApplicationServiceAdd, other.ApplicationServiceAdd)) return false;
      if (!object.Equals(ApplicationServiceRemove, other.ApplicationServiceRemove)) return false;
      if (!object.Equals(CallIdentityApplicationService, other.CallIdentityApplicationService)) return false;
      if (!object.Equals(IncomingCallNotification, other.IncomingCallNotification)) return false;
      if (!object.Equals(ProfileSearch, other.ProfileSearch)) return false;
      if (!object.Equals(ProfileSearchPart, other.ProfileSearchPart)) return false;
      if (!object.Equals(AddRelatedIdentity, other.AddRelatedIdentity)) return false;
      if (!object.Equals(RemoveRelatedIdentity, other.RemoveRelatedIdentity)) return false;
      if (!object.Equals(StartNeighborhoodInitialization, other.StartNeighborhoodInitialization)) return false;
      if (!object.Equals(FinishNeighborhoodInitialization, other.FinishNeighborhoodInitialization)) return false;
      if (!object.Equals(NeighborSharedProfileUpdate, other.NeighborSharedProfileUpdate)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Start) hash ^= Start.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) hash ^= HomeNodeRequest.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) hash ^= CheckIn.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) hash ^= VerifyIdentity.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) hash ^= UpdateProfile.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) hash ^= CancelHomeNodeAgreement.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) hash ^= ApplicationServiceAdd.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) hash ^= ApplicationServiceRemove.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) hash ^= CallIdentityApplicationService.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) hash ^= IncomingCallNotification.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearch) hash ^= ProfileSearch.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearchPart) hash ^= ProfileSearchPart.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.AddRelatedIdentity) hash ^= AddRelatedIdentity.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.RemoveRelatedIdentity) hash ^= RemoveRelatedIdentity.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.StartNeighborhoodInitialization) hash ^= StartNeighborhoodInitialization.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.FinishNeighborhoodInitialization) hash ^= FinishNeighborhoodInitialization.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.NeighborSharedProfileUpdate) hash ^= NeighborSharedProfileUpdate.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Start) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(HomeNodeRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
        output.WriteRawTag(34);
        output.WriteMessage(CheckIn);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
        output.WriteRawTag(42);
        output.WriteMessage(VerifyIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdateProfile);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) {
        output.WriteRawTag(58);
        output.WriteMessage(CancelHomeNodeAgreement);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
        output.WriteRawTag(66);
        output.WriteMessage(ApplicationServiceAdd);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
        output.WriteRawTag(74);
        output.WriteMessage(ApplicationServiceRemove);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
        output.WriteRawTag(82);
        output.WriteMessage(CallIdentityApplicationService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
        output.WriteRawTag(90);
        output.WriteMessage(IncomingCallNotification);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearch) {
        output.WriteRawTag(98);
        output.WriteMessage(ProfileSearch);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearchPart) {
        output.WriteRawTag(106);
        output.WriteMessage(ProfileSearchPart);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.AddRelatedIdentity) {
        output.WriteRawTag(114);
        output.WriteMessage(AddRelatedIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.RemoveRelatedIdentity) {
        output.WriteRawTag(122);
        output.WriteMessage(RemoveRelatedIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.StartNeighborhoodInitialization) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(StartNeighborhoodInitialization);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.FinishNeighborhoodInitialization) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FinishNeighborhoodInitialization);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.NeighborSharedProfileUpdate) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(NeighborSharedProfileUpdate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HomeNodeRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckIn);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VerifyIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateProfile);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelHomeNodeAgreement);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceAdd);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceRemove);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallIdentityApplicationService);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncomingCallNotification);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileSearch);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearchPart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileSearchPart);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.AddRelatedIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddRelatedIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.RemoveRelatedIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveRelatedIdentity);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.StartNeighborhoodInitialization) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartNeighborhoodInitialization);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.FinishNeighborhoodInitialization) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FinishNeighborhoodInitialization);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.NeighborSharedProfileUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NeighborSharedProfileUpdate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Start:
          Start = other.Start;
          break;
        case RequestTypeOneofCase.HomeNodeRequest:
          HomeNodeRequest = other.HomeNodeRequest;
          break;
        case RequestTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn;
          break;
        case RequestTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity;
          break;
        case RequestTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile;
          break;
        case RequestTypeOneofCase.CancelHomeNodeAgreement:
          CancelHomeNodeAgreement = other.CancelHomeNodeAgreement;
          break;
        case RequestTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd;
          break;
        case RequestTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove;
          break;
        case RequestTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService;
          break;
        case RequestTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification;
          break;
        case RequestTypeOneofCase.ProfileSearch:
          ProfileSearch = other.ProfileSearch;
          break;
        case RequestTypeOneofCase.ProfileSearchPart:
          ProfileSearchPart = other.ProfileSearchPart;
          break;
        case RequestTypeOneofCase.AddRelatedIdentity:
          AddRelatedIdentity = other.AddRelatedIdentity;
          break;
        case RequestTypeOneofCase.RemoveRelatedIdentity:
          RemoveRelatedIdentity = other.RemoveRelatedIdentity;
          break;
        case RequestTypeOneofCase.StartNeighborhoodInitialization:
          StartNeighborhoodInitialization = other.StartNeighborhoodInitialization;
          break;
        case RequestTypeOneofCase.FinishNeighborhoodInitialization:
          FinishNeighborhoodInitialization = other.FinishNeighborhoodInitialization;
          break;
        case RequestTypeOneofCase.NeighborSharedProfileUpdate:
          NeighborSharedProfileUpdate = other.NeighborSharedProfileUpdate;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Homenode.StartConversationRequest subBuilder = new global::Iop.Homenode.StartConversationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.HomeNodeRequestRequest subBuilder = new global::Iop.Homenode.HomeNodeRequestRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.HomeNodeRequest) {
              subBuilder.MergeFrom(HomeNodeRequest);
            }
            input.ReadMessage(subBuilder);
            HomeNodeRequest = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Homenode.CheckInRequest subBuilder = new global::Iop.Homenode.CheckInRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CheckIn) {
              subBuilder.MergeFrom(CheckIn);
            }
            input.ReadMessage(subBuilder);
            CheckIn = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Homenode.VerifyIdentityRequest subBuilder = new global::Iop.Homenode.VerifyIdentityRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
              subBuilder.MergeFrom(VerifyIdentity);
            }
            input.ReadMessage(subBuilder);
            VerifyIdentity = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Homenode.UpdateProfileRequest subBuilder = new global::Iop.Homenode.UpdateProfileRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.UpdateProfile) {
              subBuilder.MergeFrom(UpdateProfile);
            }
            input.ReadMessage(subBuilder);
            UpdateProfile = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Homenode.CancelHomeNodeAgreementRequest subBuilder = new global::Iop.Homenode.CancelHomeNodeAgreementRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CancelHomeNodeAgreement) {
              subBuilder.MergeFrom(CancelHomeNodeAgreement);
            }
            input.ReadMessage(subBuilder);
            CancelHomeNodeAgreement = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Homenode.ApplicationServiceAddRequest subBuilder = new global::Iop.Homenode.ApplicationServiceAddRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceAdd) {
              subBuilder.MergeFrom(ApplicationServiceAdd);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceAdd = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Homenode.ApplicationServiceRemoveRequest subBuilder = new global::Iop.Homenode.ApplicationServiceRemoveRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ApplicationServiceRemove) {
              subBuilder.MergeFrom(ApplicationServiceRemove);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceRemove = subBuilder;
            break;
          }
          case 82: {
            global::Iop.Homenode.CallIdentityApplicationServiceRequest subBuilder = new global::Iop.Homenode.CallIdentityApplicationServiceRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CallIdentityApplicationService) {
              subBuilder.MergeFrom(CallIdentityApplicationService);
            }
            input.ReadMessage(subBuilder);
            CallIdentityApplicationService = subBuilder;
            break;
          }
          case 90: {
            global::Iop.Homenode.IncomingCallNotificationRequest subBuilder = new global::Iop.Homenode.IncomingCallNotificationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.IncomingCallNotification) {
              subBuilder.MergeFrom(IncomingCallNotification);
            }
            input.ReadMessage(subBuilder);
            IncomingCallNotification = subBuilder;
            break;
          }
          case 98: {
            global::Iop.Homenode.ProfileSearchRequest subBuilder = new global::Iop.Homenode.ProfileSearchRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearch) {
              subBuilder.MergeFrom(ProfileSearch);
            }
            input.ReadMessage(subBuilder);
            ProfileSearch = subBuilder;
            break;
          }
          case 106: {
            global::Iop.Homenode.ProfileSearchPartRequest subBuilder = new global::Iop.Homenode.ProfileSearchPartRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ProfileSearchPart) {
              subBuilder.MergeFrom(ProfileSearchPart);
            }
            input.ReadMessage(subBuilder);
            ProfileSearchPart = subBuilder;
            break;
          }
          case 114: {
            global::Iop.Homenode.AddRelatedIdentityRequest subBuilder = new global::Iop.Homenode.AddRelatedIdentityRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.AddRelatedIdentity) {
              subBuilder.MergeFrom(AddRelatedIdentity);
            }
            input.ReadMessage(subBuilder);
            AddRelatedIdentity = subBuilder;
            break;
          }
          case 122: {
            global::Iop.Homenode.RemoveRelatedIdentityRequest subBuilder = new global::Iop.Homenode.RemoveRelatedIdentityRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.RemoveRelatedIdentity) {
              subBuilder.MergeFrom(RemoveRelatedIdentity);
            }
            input.ReadMessage(subBuilder);
            RemoveRelatedIdentity = subBuilder;
            break;
          }
          case 130: {
            global::Iop.Homenode.StartNeighborhoodInitializationRequest subBuilder = new global::Iop.Homenode.StartNeighborhoodInitializationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.StartNeighborhoodInitialization) {
              subBuilder.MergeFrom(StartNeighborhoodInitialization);
            }
            input.ReadMessage(subBuilder);
            StartNeighborhoodInitialization = subBuilder;
            break;
          }
          case 138: {
            global::Iop.Homenode.FinishNeighborhoodInitializationRequest subBuilder = new global::Iop.Homenode.FinishNeighborhoodInitializationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.FinishNeighborhoodInitialization) {
              subBuilder.MergeFrom(FinishNeighborhoodInitialization);
            }
            input.ReadMessage(subBuilder);
            FinishNeighborhoodInitialization = subBuilder;
            break;
          }
          case 146: {
            global::Iop.Homenode.NeighborSharedProfileUpdateRequest subBuilder = new global::Iop.Homenode.NeighborSharedProfileUpdateRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.NeighborSharedProfileUpdate) {
              subBuilder.MergeFrom(NeighborSharedProfileUpdate);
            }
            input.ReadMessage(subBuilder);
            NeighborSharedProfileUpdate = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Conversation response is a reaction to a conversation request.
  /// </summary>
  public sealed partial class ConversationResponse : pb::IMessage<ConversationResponse> {
    private static readonly pb::MessageParser<ConversationResponse> _parser = new pb::MessageParser<ConversationResponse>(() => new ConversationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse(ConversationResponse other) : this() {
      signature_ = other.signature_;
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Start:
          Start = other.Start.Clone();
          break;
        case ResponseTypeOneofCase.HomeNodeRequest:
          HomeNodeRequest = other.HomeNodeRequest.Clone();
          break;
        case ResponseTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn.Clone();
          break;
        case ResponseTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity.Clone();
          break;
        case ResponseTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile.Clone();
          break;
        case ResponseTypeOneofCase.CancelHomeNodeAgreement:
          CancelHomeNodeAgreement = other.CancelHomeNodeAgreement.Clone();
          break;
        case ResponseTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd.Clone();
          break;
        case ResponseTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove.Clone();
          break;
        case ResponseTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService.Clone();
          break;
        case ResponseTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification.Clone();
          break;
        case ResponseTypeOneofCase.ProfileSearch:
          ProfileSearch = other.ProfileSearch.Clone();
          break;
        case ResponseTypeOneofCase.ProfileSearchPart:
          ProfileSearchPart = other.ProfileSearchPart.Clone();
          break;
        case ResponseTypeOneofCase.AddRelatedIdentity:
          AddRelatedIdentity = other.AddRelatedIdentity.Clone();
          break;
        case ResponseTypeOneofCase.RemoveRelatedIdentity:
          RemoveRelatedIdentity = other.RemoveRelatedIdentity.Clone();
          break;
        case ResponseTypeOneofCase.StartNeighborhoodInitialization:
          StartNeighborhoodInitialization = other.StartNeighborhoodInitialization.Clone();
          break;
        case ResponseTypeOneofCase.FinishNeighborhoodInitialization:
          FinishNeighborhoodInitialization = other.FinishNeighborhoodInitialization.Clone();
          break;
        case ResponseTypeOneofCase.NeighborSharedProfileUpdate:
          NeighborSharedProfileUpdate = other.NeighborSharedProfileUpdate.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse Clone() {
      return new ConversationResponse(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    ///  Optional (response specific) signature that signs the Protobuf binary form of the included response body or its part.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    /// <summary>
    ///  Response body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.StartConversationResponse Start {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Start ? (global::Iop.Homenode.StartConversationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Start;
      }
    }

    /// <summary>Field number for the "homeNodeRequest" field.</summary>
    public const int HomeNodeRequestFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.HomeNodeRequestResponse HomeNodeRequest {
      get { return responseTypeCase_ == ResponseTypeOneofCase.HomeNodeRequest ? (global::Iop.Homenode.HomeNodeRequestResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.HomeNodeRequest;
      }
    }

    /// <summary>Field number for the "checkIn" field.</summary>
    public const int CheckInFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CheckInResponse CheckIn {
      get { return responseTypeCase_ == ResponseTypeOneofCase.CheckIn ? (global::Iop.Homenode.CheckInResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.CheckIn;
      }
    }

    /// <summary>Field number for the "verifyIdentity" field.</summary>
    public const int VerifyIdentityFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.VerifyIdentityResponse VerifyIdentity {
      get { return responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity ? (global::Iop.Homenode.VerifyIdentityResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.VerifyIdentity;
      }
    }

    /// <summary>Field number for the "updateProfile" field.</summary>
    public const int UpdateProfileFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.UpdateProfileResponse UpdateProfile {
      get { return responseTypeCase_ == ResponseTypeOneofCase.UpdateProfile ? (global::Iop.Homenode.UpdateProfileResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.UpdateProfile;
      }
    }

    /// <summary>Field number for the "cancelHomeNodeAgreement" field.</summary>
    public const int CancelHomeNodeAgreementFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CancelHomeNodeAgreementResponse CancelHomeNodeAgreement {
      get { return responseTypeCase_ == ResponseTypeOneofCase.CancelHomeNodeAgreement ? (global::Iop.Homenode.CancelHomeNodeAgreementResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.CancelHomeNodeAgreement;
      }
    }

    /// <summary>Field number for the "applicationServiceAdd" field.</summary>
    public const int ApplicationServiceAddFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceAddResponse ApplicationServiceAdd {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceAdd ? (global::Iop.Homenode.ApplicationServiceAddResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ApplicationServiceAdd;
      }
    }

    /// <summary>Field number for the "applicationServiceRemove" field.</summary>
    public const int ApplicationServiceRemoveFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ApplicationServiceRemoveResponse ApplicationServiceRemove {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceRemove ? (global::Iop.Homenode.ApplicationServiceRemoveResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ApplicationServiceRemove;
      }
    }

    /// <summary>Field number for the "callIdentityApplicationService" field.</summary>
    public const int CallIdentityApplicationServiceFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CallIdentityApplicationServiceResponse CallIdentityApplicationService {
      get { return responseTypeCase_ == ResponseTypeOneofCase.CallIdentityApplicationService ? (global::Iop.Homenode.CallIdentityApplicationServiceResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.CallIdentityApplicationService;
      }
    }

    /// <summary>Field number for the "incomingCallNotification" field.</summary>
    public const int IncomingCallNotificationFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.IncomingCallNotificationResponse IncomingCallNotification {
      get { return responseTypeCase_ == ResponseTypeOneofCase.IncomingCallNotification ? (global::Iop.Homenode.IncomingCallNotificationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.IncomingCallNotification;
      }
    }

    /// <summary>Field number for the "profileSearch" field.</summary>
    public const int ProfileSearchFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ProfileSearchResponse ProfileSearch {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ProfileSearch ? (global::Iop.Homenode.ProfileSearchResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ProfileSearch;
      }
    }

    /// <summary>Field number for the "profileSearchPart" field.</summary>
    public const int ProfileSearchPartFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ProfileSearchPartResponse ProfileSearchPart {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ProfileSearchPart ? (global::Iop.Homenode.ProfileSearchPartResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ProfileSearchPart;
      }
    }

    /// <summary>Field number for the "addRelatedIdentity" field.</summary>
    public const int AddRelatedIdentityFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.AddRelatedIdentityResponse AddRelatedIdentity {
      get { return responseTypeCase_ == ResponseTypeOneofCase.AddRelatedIdentity ? (global::Iop.Homenode.AddRelatedIdentityResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.AddRelatedIdentity;
      }
    }

    /// <summary>Field number for the "removeRelatedIdentity" field.</summary>
    public const int RemoveRelatedIdentityFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.RemoveRelatedIdentityResponse RemoveRelatedIdentity {
      get { return responseTypeCase_ == ResponseTypeOneofCase.RemoveRelatedIdentity ? (global::Iop.Homenode.RemoveRelatedIdentityResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.RemoveRelatedIdentity;
      }
    }

    /// <summary>Field number for the "startNeighborhoodInitialization" field.</summary>
    public const int StartNeighborhoodInitializationFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.StartNeighborhoodInitializationResponse StartNeighborhoodInitialization {
      get { return responseTypeCase_ == ResponseTypeOneofCase.StartNeighborhoodInitialization ? (global::Iop.Homenode.StartNeighborhoodInitializationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.StartNeighborhoodInitialization;
      }
    }

    /// <summary>Field number for the "finishNeighborhoodInitialization" field.</summary>
    public const int FinishNeighborhoodInitializationFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.FinishNeighborhoodInitializationResponse FinishNeighborhoodInitialization {
      get { return responseTypeCase_ == ResponseTypeOneofCase.FinishNeighborhoodInitialization ? (global::Iop.Homenode.FinishNeighborhoodInitializationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.FinishNeighborhoodInitialization;
      }
    }

    /// <summary>Field number for the "neighborSharedProfileUpdate" field.</summary>
    public const int NeighborSharedProfileUpdateFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.NeighborSharedProfileUpdateResponse NeighborSharedProfileUpdate {
      get { return responseTypeCase_ == ResponseTypeOneofCase.NeighborSharedProfileUpdate ? (global::Iop.Homenode.NeighborSharedProfileUpdateResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.NeighborSharedProfileUpdate;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "ResponseType" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      Start = 2,
      HomeNodeRequest = 3,
      CheckIn = 4,
      VerifyIdentity = 5,
      UpdateProfile = 6,
      CancelHomeNodeAgreement = 7,
      ApplicationServiceAdd = 8,
      ApplicationServiceRemove = 9,
      CallIdentityApplicationService = 10,
      IncomingCallNotification = 11,
      ProfileSearch = 12,
      ProfileSearchPart = 13,
      AddRelatedIdentity = 14,
      RemoveRelatedIdentity = 15,
      StartNeighborhoodInitialization = 16,
      FinishNeighborhoodInitialization = 17,
      NeighborSharedProfileUpdate = 18,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(HomeNodeRequest, other.HomeNodeRequest)) return false;
      if (!object.Equals(CheckIn, other.CheckIn)) return false;
      if (!object.Equals(VerifyIdentity, other.VerifyIdentity)) return false;
      if (!object.Equals(UpdateProfile, other.UpdateProfile)) return false;
      if (!object.Equals(CancelHomeNodeAgreement, other.CancelHomeNodeAgreement)) return false;
      if (!object.Equals(ApplicationServiceAdd, other.ApplicationServiceAdd)) return false;
      if (!object.Equals(ApplicationServiceRemove, other.ApplicationServiceRemove)) return false;
      if (!object.Equals(CallIdentityApplicationService, other.CallIdentityApplicationService)) return false;
      if (!object.Equals(IncomingCallNotification, other.IncomingCallNotification)) return false;
      if (!object.Equals(ProfileSearch, other.ProfileSearch)) return false;
      if (!object.Equals(ProfileSearchPart, other.ProfileSearchPart)) return false;
      if (!object.Equals(AddRelatedIdentity, other.AddRelatedIdentity)) return false;
      if (!object.Equals(RemoveRelatedIdentity, other.RemoveRelatedIdentity)) return false;
      if (!object.Equals(StartNeighborhoodInitialization, other.StartNeighborhoodInitialization)) return false;
      if (!object.Equals(FinishNeighborhoodInitialization, other.FinishNeighborhoodInitialization)) return false;
      if (!object.Equals(NeighborSharedProfileUpdate, other.NeighborSharedProfileUpdate)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Start) hash ^= Start.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.HomeNodeRequest) hash ^= HomeNodeRequest.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.CheckIn) hash ^= CheckIn.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) hash ^= VerifyIdentity.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.UpdateProfile) hash ^= UpdateProfile.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.CancelHomeNodeAgreement) hash ^= CancelHomeNodeAgreement.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceAdd) hash ^= ApplicationServiceAdd.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceRemove) hash ^= ApplicationServiceRemove.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.CallIdentityApplicationService) hash ^= CallIdentityApplicationService.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.IncomingCallNotification) hash ^= IncomingCallNotification.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearch) hash ^= ProfileSearch.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearchPart) hash ^= ProfileSearchPart.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.AddRelatedIdentity) hash ^= AddRelatedIdentity.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoveRelatedIdentity) hash ^= RemoveRelatedIdentity.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.StartNeighborhoodInitialization) hash ^= StartNeighborhoodInitialization.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.FinishNeighborhoodInitialization) hash ^= FinishNeighborhoodInitialization.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.NeighborSharedProfileUpdate) hash ^= NeighborSharedProfileUpdate.GetHashCode();
      hash ^= (int) responseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Start) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.HomeNodeRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(HomeNodeRequest);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CheckIn) {
        output.WriteRawTag(34);
        output.WriteMessage(CheckIn);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) {
        output.WriteRawTag(42);
        output.WriteMessage(VerifyIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.UpdateProfile) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdateProfile);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CancelHomeNodeAgreement) {
        output.WriteRawTag(58);
        output.WriteMessage(CancelHomeNodeAgreement);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceAdd) {
        output.WriteRawTag(66);
        output.WriteMessage(ApplicationServiceAdd);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceRemove) {
        output.WriteRawTag(74);
        output.WriteMessage(ApplicationServiceRemove);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CallIdentityApplicationService) {
        output.WriteRawTag(82);
        output.WriteMessage(CallIdentityApplicationService);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.IncomingCallNotification) {
        output.WriteRawTag(90);
        output.WriteMessage(IncomingCallNotification);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearch) {
        output.WriteRawTag(98);
        output.WriteMessage(ProfileSearch);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearchPart) {
        output.WriteRawTag(106);
        output.WriteMessage(ProfileSearchPart);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.AddRelatedIdentity) {
        output.WriteRawTag(114);
        output.WriteMessage(AddRelatedIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoveRelatedIdentity) {
        output.WriteRawTag(122);
        output.WriteMessage(RemoveRelatedIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.StartNeighborhoodInitialization) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(StartNeighborhoodInitialization);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.FinishNeighborhoodInitialization) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FinishNeighborhoodInitialization);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.NeighborSharedProfileUpdate) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(NeighborSharedProfileUpdate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.HomeNodeRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HomeNodeRequest);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CheckIn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckIn);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VerifyIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.UpdateProfile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateProfile);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CancelHomeNodeAgreement) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelHomeNodeAgreement);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceAdd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceAdd);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceRemove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationServiceRemove);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.CallIdentityApplicationService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallIdentityApplicationService);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.IncomingCallNotification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncomingCallNotification);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileSearch);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearchPart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfileSearchPart);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.AddRelatedIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddRelatedIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.RemoveRelatedIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveRelatedIdentity);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.StartNeighborhoodInitialization) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StartNeighborhoodInitialization);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.FinishNeighborhoodInitialization) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FinishNeighborhoodInitialization);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.NeighborSharedProfileUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NeighborSharedProfileUpdate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Start:
          Start = other.Start;
          break;
        case ResponseTypeOneofCase.HomeNodeRequest:
          HomeNodeRequest = other.HomeNodeRequest;
          break;
        case ResponseTypeOneofCase.CheckIn:
          CheckIn = other.CheckIn;
          break;
        case ResponseTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity;
          break;
        case ResponseTypeOneofCase.UpdateProfile:
          UpdateProfile = other.UpdateProfile;
          break;
        case ResponseTypeOneofCase.CancelHomeNodeAgreement:
          CancelHomeNodeAgreement = other.CancelHomeNodeAgreement;
          break;
        case ResponseTypeOneofCase.ApplicationServiceAdd:
          ApplicationServiceAdd = other.ApplicationServiceAdd;
          break;
        case ResponseTypeOneofCase.ApplicationServiceRemove:
          ApplicationServiceRemove = other.ApplicationServiceRemove;
          break;
        case ResponseTypeOneofCase.CallIdentityApplicationService:
          CallIdentityApplicationService = other.CallIdentityApplicationService;
          break;
        case ResponseTypeOneofCase.IncomingCallNotification:
          IncomingCallNotification = other.IncomingCallNotification;
          break;
        case ResponseTypeOneofCase.ProfileSearch:
          ProfileSearch = other.ProfileSearch;
          break;
        case ResponseTypeOneofCase.ProfileSearchPart:
          ProfileSearchPart = other.ProfileSearchPart;
          break;
        case ResponseTypeOneofCase.AddRelatedIdentity:
          AddRelatedIdentity = other.AddRelatedIdentity;
          break;
        case ResponseTypeOneofCase.RemoveRelatedIdentity:
          RemoveRelatedIdentity = other.RemoveRelatedIdentity;
          break;
        case ResponseTypeOneofCase.StartNeighborhoodInitialization:
          StartNeighborhoodInitialization = other.StartNeighborhoodInitialization;
          break;
        case ResponseTypeOneofCase.FinishNeighborhoodInitialization:
          FinishNeighborhoodInitialization = other.FinishNeighborhoodInitialization;
          break;
        case ResponseTypeOneofCase.NeighborSharedProfileUpdate:
          NeighborSharedProfileUpdate = other.NeighborSharedProfileUpdate;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Homenode.StartConversationResponse subBuilder = new global::Iop.Homenode.StartConversationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.HomeNodeRequestResponse subBuilder = new global::Iop.Homenode.HomeNodeRequestResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.HomeNodeRequest) {
              subBuilder.MergeFrom(HomeNodeRequest);
            }
            input.ReadMessage(subBuilder);
            HomeNodeRequest = subBuilder;
            break;
          }
          case 34: {
            global::Iop.Homenode.CheckInResponse subBuilder = new global::Iop.Homenode.CheckInResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.CheckIn) {
              subBuilder.MergeFrom(CheckIn);
            }
            input.ReadMessage(subBuilder);
            CheckIn = subBuilder;
            break;
          }
          case 42: {
            global::Iop.Homenode.VerifyIdentityResponse subBuilder = new global::Iop.Homenode.VerifyIdentityResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) {
              subBuilder.MergeFrom(VerifyIdentity);
            }
            input.ReadMessage(subBuilder);
            VerifyIdentity = subBuilder;
            break;
          }
          case 50: {
            global::Iop.Homenode.UpdateProfileResponse subBuilder = new global::Iop.Homenode.UpdateProfileResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.UpdateProfile) {
              subBuilder.MergeFrom(UpdateProfile);
            }
            input.ReadMessage(subBuilder);
            UpdateProfile = subBuilder;
            break;
          }
          case 58: {
            global::Iop.Homenode.CancelHomeNodeAgreementResponse subBuilder = new global::Iop.Homenode.CancelHomeNodeAgreementResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.CancelHomeNodeAgreement) {
              subBuilder.MergeFrom(CancelHomeNodeAgreement);
            }
            input.ReadMessage(subBuilder);
            CancelHomeNodeAgreement = subBuilder;
            break;
          }
          case 66: {
            global::Iop.Homenode.ApplicationServiceAddResponse subBuilder = new global::Iop.Homenode.ApplicationServiceAddResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceAdd) {
              subBuilder.MergeFrom(ApplicationServiceAdd);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceAdd = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Homenode.ApplicationServiceRemoveResponse subBuilder = new global::Iop.Homenode.ApplicationServiceRemoveResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ApplicationServiceRemove) {
              subBuilder.MergeFrom(ApplicationServiceRemove);
            }
            input.ReadMessage(subBuilder);
            ApplicationServiceRemove = subBuilder;
            break;
          }
          case 82: {
            global::Iop.Homenode.CallIdentityApplicationServiceResponse subBuilder = new global::Iop.Homenode.CallIdentityApplicationServiceResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.CallIdentityApplicationService) {
              subBuilder.MergeFrom(CallIdentityApplicationService);
            }
            input.ReadMessage(subBuilder);
            CallIdentityApplicationService = subBuilder;
            break;
          }
          case 90: {
            global::Iop.Homenode.IncomingCallNotificationResponse subBuilder = new global::Iop.Homenode.IncomingCallNotificationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.IncomingCallNotification) {
              subBuilder.MergeFrom(IncomingCallNotification);
            }
            input.ReadMessage(subBuilder);
            IncomingCallNotification = subBuilder;
            break;
          }
          case 98: {
            global::Iop.Homenode.ProfileSearchResponse subBuilder = new global::Iop.Homenode.ProfileSearchResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearch) {
              subBuilder.MergeFrom(ProfileSearch);
            }
            input.ReadMessage(subBuilder);
            ProfileSearch = subBuilder;
            break;
          }
          case 106: {
            global::Iop.Homenode.ProfileSearchPartResponse subBuilder = new global::Iop.Homenode.ProfileSearchPartResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ProfileSearchPart) {
              subBuilder.MergeFrom(ProfileSearchPart);
            }
            input.ReadMessage(subBuilder);
            ProfileSearchPart = subBuilder;
            break;
          }
          case 114: {
            global::Iop.Homenode.AddRelatedIdentityResponse subBuilder = new global::Iop.Homenode.AddRelatedIdentityResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.AddRelatedIdentity) {
              subBuilder.MergeFrom(AddRelatedIdentity);
            }
            input.ReadMessage(subBuilder);
            AddRelatedIdentity = subBuilder;
            break;
          }
          case 122: {
            global::Iop.Homenode.RemoveRelatedIdentityResponse subBuilder = new global::Iop.Homenode.RemoveRelatedIdentityResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.RemoveRelatedIdentity) {
              subBuilder.MergeFrom(RemoveRelatedIdentity);
            }
            input.ReadMessage(subBuilder);
            RemoveRelatedIdentity = subBuilder;
            break;
          }
          case 130: {
            global::Iop.Homenode.StartNeighborhoodInitializationResponse subBuilder = new global::Iop.Homenode.StartNeighborhoodInitializationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.StartNeighborhoodInitialization) {
              subBuilder.MergeFrom(StartNeighborhoodInitialization);
            }
            input.ReadMessage(subBuilder);
            StartNeighborhoodInitialization = subBuilder;
            break;
          }
          case 138: {
            global::Iop.Homenode.FinishNeighborhoodInitializationResponse subBuilder = new global::Iop.Homenode.FinishNeighborhoodInitializationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.FinishNeighborhoodInitialization) {
              subBuilder.MergeFrom(FinishNeighborhoodInitialization);
            }
            input.ReadMessage(subBuilder);
            FinishNeighborhoodInitialization = subBuilder;
            break;
          }
          case 146: {
            global::Iop.Homenode.NeighborSharedProfileUpdateResponse subBuilder = new global::Iop.Homenode.NeighborSharedProfileUpdateResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.NeighborSharedProfileUpdate) {
              subBuilder.MergeFrom(NeighborSharedProfileUpdate);
            }
            input.ReadMessage(subBuilder);
            NeighborSharedProfileUpdate = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  An administrative message to test whether the peer is there and responds to requests.
  ///
  ///  Each identity client is required to send a message not more than 60 seconds after the connection 
  ///  was established, or after the last message has been send over the connection. For node clients,
  ///  this limit is 300 seconds. Clients should use PingRequest if they have nothing else to send
  ///  and want to keep the connection open.
  ///
  ///  Roles: any
  /// </summary>
  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest(PingRequest other) : this() {
      payload_ = other.payload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest Clone() {
      return new PingRequest(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    ///  At most 64 bytes of arbitrary data that will be sent back by the peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A response to PingRequest to reassure the connection works fine.
  /// </summary>
  public sealed partial class PingResponse : pb::IMessage<PingResponse> {
    private static readonly pb::MessageParser<PingResponse> _parser = new pb::MessageParser<PingResponse>(() => new PingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse(PingResponse other) : this() {
      payload_ = other.payload_;
      clock_ = other.clock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse Clone() {
      return new PingResponse(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    ///  See 'PingRequest.payload'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clock" field.</summary>
    public const int ClockFieldNumber = 2;
    private long clock_;
    /// <summary>
    ///  64-bit signed Unix UTC time on the requestee's machine.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Clock {
      get { return clock_; }
      set {
        clock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if (Clock != other.Clock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (Clock != 0L) hash ^= Clock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (Clock != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Clock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (Clock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Clock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingResponse other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.Clock != 0L) {
        Clock = other.Clock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 16: {
            Clock = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Request server to provide a mapping between ports and roles.
  ///
  ///  Roles: primary
  /// </summary>
  public sealed partial class ListRolesRequest : pb::IMessage<ListRolesRequest> {
    private static readonly pb::MessageParser<ListRolesRequest> _parser = new pb::MessageParser<ListRolesRequest>(() => new ListRolesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRolesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest(ListRolesRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest Clone() {
      return new ListRolesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRolesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRolesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRolesRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  A response to ListRolesRequest with a list of all open ports and associated roles.
  /// </summary>
  public sealed partial class ListRolesResponse : pb::IMessage<ListRolesResponse> {
    private static readonly pb::MessageParser<ListRolesResponse> _parser = new pb::MessageParser<ListRolesResponse>(() => new ListRolesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRolesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse(ListRolesResponse other) : this() {
      roles_ = other.roles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse Clone() {
      return new ListRolesResponse(this);
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Homenode.ServerRole> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Homenode.ServerRole.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.ServerRole> roles_ = new pbc::RepeatedField<global::Iop.Homenode.ServerRole>();
    /// <summary>
    ///  List of server roles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.ServerRole> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRolesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRolesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roles_.Equals(other.roles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRolesResponse other) {
      if (other == null) {
        return;
      }
      roles_.Add(other.roles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Description of a single server role.
  /// </summary>
  public sealed partial class ServerRole : pb::IMessage<ServerRole> {
    private static readonly pb::MessageParser<ServerRole> _parser = new pb::MessageParser<ServerRole>(() => new ServerRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole(ServerRole other) : this() {
      role_ = other.role_;
      port_ = other.port_;
      isTcp_ = other.isTcp_;
      isTls_ = other.isTls_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole Clone() {
      return new ServerRole(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private global::Iop.Homenode.ServerRoleType role_ = 0;
    /// <summary>
    ///  Server role type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.ServerRoleType Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    /// <summary>
    ///  On which port is this server role provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "isTcp" field.</summary>
    public const int IsTcpFieldNumber = 3;
    private bool isTcp_;
    /// <summary>
    ///  true if the port is TCP port, false means UDP.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTcp {
      get { return isTcp_; }
      set {
        isTcp_ = value;
      }
    }

    /// <summary>Field number for the "isTls" field.</summary>
    public const int IsTlsFieldNumber = 4;
    private bool isTls_;
    /// <summary>
    ///  true if the port is TLS encrypted, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTls {
      get { return isTls_; }
      set {
        isTls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Role != other.Role) return false;
      if (Port != other.Port) return false;
      if (IsTcp != other.IsTcp) return false;
      if (IsTls != other.IsTls) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Role != 0) hash ^= Role.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (IsTcp != false) hash ^= IsTcp.GetHashCode();
      if (IsTls != false) hash ^= IsTls.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Role != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Role);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (IsTcp != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTcp);
      }
      if (IsTls != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsTls);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (IsTcp != false) {
        size += 1 + 1;
      }
      if (IsTls != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerRole other) {
      if (other == null) {
        return;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.IsTcp != false) {
        IsTcp = other.IsTcp;
      }
      if (other.IsTls != false) {
        IsTls = other.IsTls;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            role_ = (global::Iop.Homenode.ServerRoleType) input.ReadEnum();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 24: {
            IsTcp = input.ReadBool();
            break;
          }
          case 32: {
            IsTls = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A client asks node for its home node plans that match the given criteria.
  ///
  ///  Roles: clNonCustomer
  /// </summary>
  public sealed partial class ListHomeNodePlansRequest : pb::IMessage<ListHomeNodePlansRequest> {
    private static readonly pb::MessageParser<ListHomeNodePlansRequest> _parser = new pb::MessageParser<ListHomeNodePlansRequest>(() => new ListHomeNodePlansRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListHomeNodePlansRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansRequest(ListHomeNodePlansRequest other) : this() {
      identityType_ = other.identityType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansRequest Clone() {
      return new ListHomeNodePlansRequest(this);
    }

    /// <summary>Field number for the "identityType" field.</summary>
    public const int IdentityTypeFieldNumber = 1;
    private string identityType_ = "";
    /// <summary>
    ///  A specific identity type, for which the client searches the plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityType {
      get { return identityType_; }
      set {
        identityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListHomeNodePlansRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListHomeNodePlansRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityType != other.IdentityType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityType.Length != 0) hash ^= IdentityType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IdentityType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListHomeNodePlansRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdentityType.Length != 0) {
        IdentityType = other.IdentityType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ListHomeNodePlansRequest that contains a list of matching plans.
  ///
  ///  Specific Error Responses: 
  ///    * ERROR_QUOTA_EXCEEDED - A node users this error code in case it wants to express that it will not accept any new clients because it has no free slots.
  /// </summary>
  public sealed partial class ListHomeNodePlansResponse : pb::IMessage<ListHomeNodePlansResponse> {
    private static readonly pb::MessageParser<ListHomeNodePlansResponse> _parser = new pb::MessageParser<ListHomeNodePlansResponse>(() => new ListHomeNodePlansResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListHomeNodePlansResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansResponse(ListHomeNodePlansResponse other) : this() {
      plans_ = other.plans_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListHomeNodePlansResponse Clone() {
      return new ListHomeNodePlansResponse(this);
    }

    /// <summary>Field number for the "plans" field.</summary>
    public const int PlansFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Homenode.HomeNodePlan> _repeated_plans_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Homenode.HomeNodePlan.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.HomeNodePlan> plans_ = new pbc::RepeatedField<global::Iop.Homenode.HomeNodePlan>();
    /// <summary>
    ///  List of matching plans.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.HomeNodePlan> Plans {
      get { return plans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListHomeNodePlansResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListHomeNodePlansResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plans_.Equals(other.plans_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plans_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      plans_.WriteTo(output, _repeated_plans_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plans_.CalculateSize(_repeated_plans_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListHomeNodePlansResponse other) {
      if (other == null) {
        return;
      }
      plans_.Add(other.plans_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            plans_.AddEntriesFrom(input, _repeated_plans_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Description of a home node hosting plan.
  /// </summary>
  public sealed partial class HomeNodePlan : pb::IMessage<HomeNodePlan> {
    private static readonly pb::MessageParser<HomeNodePlan> _parser = new pb::MessageParser<HomeNodePlan>(() => new HomeNodePlan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HomeNodePlan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlan(HomeNodePlan other) : this() {
      planId_ = other.planId_;
      nodeNetworkId_ = other.nodeNetworkId_;
      identityType_ = other.identityType_;
      fee_ = other.fee_;
      billingPeriodSeconds_ = other.billingPeriodSeconds_;
      planParameters_ = other.planParameters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlan Clone() {
      return new HomeNodePlan(this);
    }

    /// <summary>Field number for the "planId" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private pb::ByteString planId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Identifier of the plan is an SHA256 hash of the HomeNodePlan structure in Google Protobuf v3 encoding 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanId {
      get { return planId_; }
      set {
        planId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodeNetworkId" field.</summary>
    public const int NodeNetworkIdFieldNumber = 2;
    private pb::ByteString nodeNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  with planId initialized to a byte array of 32 zero bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodeNetworkId {
      get { return nodeNetworkId_; }
      set {
        nodeNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identityType" field.</summary>
    public const int IdentityTypeFieldNumber = 3;
    private string identityType_ = "";
    /// <summary>
    ///  Type of identity this plan is created for. This can include "*" as a wildcard character
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityType {
      get { return identityType_; }
      set {
        identityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 4;
    private ulong fee_;
    /// <summary>
    ///  at the end of the type to support multiple types to be served with a single plan. 
    ///  For example, the value "*" would mean that any identity type is supported,
    ///  and the value "Taxi *" would mean that any identity type that starts with "Taxi *"
    ///  would match this plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "billingPeriodSeconds" field.</summary>
    public const int BillingPeriodSecondsFieldNumber = 5;
    private uint billingPeriodSeconds_;
    /// <summary>
    ///  Length of the billing period in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BillingPeriodSeconds {
      get { return billingPeriodSeconds_; }
      set {
        billingPeriodSeconds_ = value;
      }
    }

    /// <summary>Field number for the "planParameters" field.</summary>
    public const int PlanParametersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Iop.Homenode.NameStringValuePair> _repeated_planParameters_codec
        = pb::FieldCodec.ForMessage(74, global::Iop.Homenode.NameStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.NameStringValuePair> planParameters_ = new pbc::RepeatedField<global::Iop.Homenode.NameStringValuePair>();
    /// <summary>
    ///  List of additional service parameters that define the plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.NameStringValuePair> PlanParameters {
      get { return planParameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HomeNodePlan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HomeNodePlan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlanId != other.PlanId) return false;
      if (NodeNetworkId != other.NodeNetworkId) return false;
      if (IdentityType != other.IdentityType) return false;
      if (Fee != other.Fee) return false;
      if (BillingPeriodSeconds != other.BillingPeriodSeconds) return false;
      if(!planParameters_.Equals(other.planParameters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlanId.Length != 0) hash ^= PlanId.GetHashCode();
      if (NodeNetworkId.Length != 0) hash ^= NodeNetworkId.GetHashCode();
      if (IdentityType.Length != 0) hash ^= IdentityType.GetHashCode();
      if (Fee != 0UL) hash ^= Fee.GetHashCode();
      if (BillingPeriodSeconds != 0) hash ^= BillingPeriodSeconds.GetHashCode();
      hash ^= planParameters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PlanId);
      }
      if (NodeNetworkId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NodeNetworkId);
      }
      if (IdentityType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IdentityType);
      }
      if (Fee != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Fee);
      }
      if (BillingPeriodSeconds != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BillingPeriodSeconds);
      }
      planParameters_.WriteTo(output, _repeated_planParameters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanId);
      }
      if (NodeNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodeNetworkId);
      }
      if (IdentityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityType);
      }
      if (Fee != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fee);
      }
      if (BillingPeriodSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BillingPeriodSeconds);
      }
      size += planParameters_.CalculateSize(_repeated_planParameters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HomeNodePlan other) {
      if (other == null) {
        return;
      }
      if (other.PlanId.Length != 0) {
        PlanId = other.PlanId;
      }
      if (other.NodeNetworkId.Length != 0) {
        NodeNetworkId = other.NodeNetworkId;
      }
      if (other.IdentityType.Length != 0) {
        IdentityType = other.IdentityType;
      }
      if (other.Fee != 0UL) {
        Fee = other.Fee;
      }
      if (other.BillingPeriodSeconds != 0) {
        BillingPeriodSeconds = other.BillingPeriodSeconds;
      }
      planParameters_.Add(other.planParameters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlanId = input.ReadBytes();
            break;
          }
          case 18: {
            NodeNetworkId = input.ReadBytes();
            break;
          }
          case 26: {
            IdentityType = input.ReadString();
            break;
          }
          case 32: {
            Fee = input.ReadUInt64();
            break;
          }
          case 40: {
            BillingPeriodSeconds = input.ReadUInt32();
            break;
          }
          case 74: {
            planParameters_.AddEntriesFrom(input, _repeated_planParameters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Description of name-value structure with string values.
  /// </summary>
  public sealed partial class NameStringValuePair : pb::IMessage<NameStringValuePair> {
    private static readonly pb::MessageParser<NameStringValuePair> _parser = new pb::MessageParser<NameStringValuePair>(() => new NameStringValuePair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NameStringValuePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameStringValuePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameStringValuePair(NameStringValuePair other) : this() {
      name_ = other.name_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameStringValuePair Clone() {
      return new NameStringValuePair(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  Name of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    ///  String value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NameStringValuePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NameStringValuePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NameStringValuePair other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Every conversation starts with this request, in which the requestor sends a list of protocol versions 
  ///  it supports and its public key that identifies it.
  ///
  ///  Roles: any
  ///
  ///  Conversation status: NoConversation
  /// </summary>
  public sealed partial class StartConversationRequest : pb::IMessage<StartConversationRequest> {
    private static readonly pb::MessageParser<StartConversationRequest> _parser = new pb::MessageParser<StartConversationRequest>(() => new StartConversationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartConversationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest(StartConversationRequest other) : this() {
      supportedVersions_ = other.supportedVersions_.Clone();
      publicKey_ = other.publicKey_;
      clientChallenge_ = other.clientChallenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest Clone() {
      return new StartConversationRequest(this);
    }

    /// <summary>Field number for the "supportedVersions" field.</summary>
    public const int SupportedVersionsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_supportedVersions_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> supportedVersions_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///  List of VersionType items. Ordered by requestor's preference. See 'SingleRequest.version'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> SupportedVersions {
      get { return supportedVersions_; }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the requestor. Max 128 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientChallenge" field.</summary>
    public const int ClientChallengeFieldNumber = 3;
    private pb::ByteString clientChallenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  32 byte challenge data (random bytes generated by the requestor) that is used for authentication purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientChallenge {
      get { return clientChallenge_; }
      set {
        clientChallenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartConversationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartConversationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!supportedVersions_.Equals(other.supportedVersions_)) return false;
      if (PublicKey != other.PublicKey) return false;
      if (ClientChallenge != other.ClientChallenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= supportedVersions_.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (ClientChallenge.Length != 0) hash ^= ClientChallenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      supportedVersions_.WriteTo(output, _repeated_supportedVersions_codec);
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
      if (ClientChallenge.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ClientChallenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += supportedVersions_.CalculateSize(_repeated_supportedVersions_codec);
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (ClientChallenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientChallenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartConversationRequest other) {
      if (other == null) {
        return;
      }
      supportedVersions_.Add(other.supportedVersions_);
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.ClientChallenge.Length != 0) {
        ClientChallenge = other.ClientChallenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            supportedVersions_.AddEntriesFrom(input, _repeated_supportedVersions_codec);
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 26: {
            ClientChallenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to StartConversationRequest in case the requestee found at least one protocol version that 
  ///  both peers are willing to use. 
  ///  
  ///  The 'clientChallenge' field value in raw format is signed with a signature in 'ConversationResponse.signature'.
  ///  
  ///
  ///  After StartConversationResponse is sent, the conversation context includes version and keys of both peers.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_UNSUPPORTED - If the requestee does not support any of the requestor's versions, it replies with this error code.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "publicKey" - 'StartConversationRequest.publicKey' is not a valid public key value. 
  ///      * Response.details == "clientChallenge" - 'StartConversationRequest.clientChallenge' is not 32 byte long. 
  /// </summary>
  public sealed partial class StartConversationResponse : pb::IMessage<StartConversationResponse> {
    private static readonly pb::MessageParser<StartConversationResponse> _parser = new pb::MessageParser<StartConversationResponse>(() => new StartConversationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartConversationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse(StartConversationResponse other) : this() {
      version_ = other.version_;
      publicKey_ = other.publicKey_;
      challenge_ = other.challenge_;
      clientChallenge_ = other.clientChallenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse Clone() {
      return new StartConversationResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. The version that the requestee selected from the offered set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the requestee.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 3;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  32 byte challenge data (random bytes generated by the requestee) that is used for later authentication purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientChallenge" field.</summary>
    public const int ClientChallengeFieldNumber = 4;
    private pb::ByteString clientChallenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  Copy of 'StartConversationRequest.clientChallenge' that is signed by the requestee. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientChallenge {
      get { return clientChallenge_; }
      set {
        clientChallenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartConversationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartConversationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (PublicKey != other.PublicKey) return false;
      if (Challenge != other.Challenge) return false;
      if (ClientChallenge != other.ClientChallenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      if (ClientChallenge.Length != 0) hash ^= ClientChallenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
      if (Challenge.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Challenge);
      }
      if (ClientChallenge.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ClientChallenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      if (ClientChallenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientChallenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartConversationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
      if (other.ClientChallenge.Length != 0) {
        ClientChallenge = other.ClientChallenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 26: {
            Challenge = input.ReadBytes();
            break;
          }
          case 34: {
            ClientChallenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A client asks node to become its home node by sending HomeNodeRequestRequest
  ///  with a signed contract. The signature is provided in 'ConversationRequest.signature'.
  ///
  ///  Roles: clNonCustomer
  ///
  ///  Conversation status: ConversationStarted
  /// </summary>
  public sealed partial class HomeNodeRequestRequest : pb::IMessage<HomeNodeRequestRequest> {
    private static readonly pb::MessageParser<HomeNodeRequestRequest> _parser = new pb::MessageParser<HomeNodeRequestRequest>(() => new HomeNodeRequestRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HomeNodeRequestRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestRequest(HomeNodeRequestRequest other) : this() {
      Contract = other.contract_ != null ? other.Contract.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestRequest Clone() {
      return new HomeNodeRequestRequest(this);
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 1;
    private global::Iop.Homenode.HomeNodePlanContract contract_;
    /// <summary>
    ///  Description of the contract that the client wants to have with the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.HomeNodePlanContract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HomeNodeRequestRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HomeNodeRequestRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Contract, other.Contract)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contract_ != null) hash ^= Contract.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contract_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HomeNodeRequestRequest other) {
      if (other == null) {
        return;
      }
      if (other.contract_ != null) {
        if (contract_ == null) {
          contract_ = new global::Iop.Homenode.HomeNodePlanContract();
        }
        Contract.MergeFrom(other.Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (contract_ == null) {
              contract_ = new global::Iop.Homenode.HomeNodePlanContract();
            }
            input.ReadMessage(contract_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to HomeNodeRequestRequest in case the node wants to accept the request.
  ///  The response body is signed with a signature in 'ConversationResponse.signature'.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_QUOTA_EXCEEDED - A node uses this error code in case it wants to express that it will not accept any new clients because it has no free slots.
  ///    * ERROR_NOT_FOUND - 'HomeNodePlanContract.contract.planId' does not correspond to a node's plan, or the plan values are different from what the node offers.
  ///    * ERROR_INVALID_SIGNATURE - The client's signature of the contract is not valid.
  ///    * ERROR_ALREADY_EXISTS - The identity is hosted by the node already.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "contract.startTime" - 'HomeNodeRequestRequest.contract.startTime' is more than 1 hour in the past. 
  ///      * Response.details == "contract.identityPublicKey" - 'HomeNodeRequestRequest.contract.identityPublicKey' does not match identity's public key.
  ///      * Response.details == "contract.identityType" - 'HomeNodeRequestRequest.contract.identityType' does not match the hosting plan.
  /// </summary>
  public sealed partial class HomeNodeRequestResponse : pb::IMessage<HomeNodeRequestResponse> {
    private static readonly pb::MessageParser<HomeNodeRequestResponse> _parser = new pb::MessageParser<HomeNodeRequestResponse>(() => new HomeNodeRequestResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HomeNodeRequestResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestResponse(HomeNodeRequestResponse other) : this() {
      Contract = other.contract_ != null ? other.Contract.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodeRequestResponse Clone() {
      return new HomeNodeRequestResponse(this);
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 1;
    private global::Iop.Homenode.HomeNodePlanContract contract_;
    /// <summary>
    ///  Description of the contract that the client wants to have with the node and the node accepted it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.HomeNodePlanContract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HomeNodeRequestResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HomeNodeRequestResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Contract, other.Contract)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contract_ != null) hash ^= Contract.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contract_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HomeNodeRequestResponse other) {
      if (other == null) {
        return;
      }
      if (other.contract_ != null) {
        if (contract_ == null) {
          contract_ = new global::Iop.Homenode.HomeNodePlanContract();
        }
        Contract.MergeFrom(other.Contract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (contract_ == null) {
              contract_ = new global::Iop.Homenode.HomeNodePlanContract();
            }
            input.ReadMessage(contract_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A description of the contract between a client and a home node.
  /// </summary>
  public sealed partial class HomeNodePlanContract : pb::IMessage<HomeNodePlanContract> {
    private static readonly pb::MessageParser<HomeNodePlanContract> _parser = new pb::MessageParser<HomeNodePlanContract>(() => new HomeNodePlanContract());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HomeNodePlanContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlanContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlanContract(HomeNodePlanContract other) : this() {
      planId_ = other.planId_;
      identityPublicKey_ = other.identityPublicKey_;
      startTime_ = other.startTime_;
      identityType_ = other.identityType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeNodePlanContract Clone() {
      return new HomeNodePlanContract(this);
    }

    /// <summary>Field number for the "planId" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private pb::ByteString planId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Identifier of the home node hosting plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanId {
      get { return planId_; }
      set {
        planId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identityPublicKey" field.</summary>
    public const int IdentityPublicKeyFieldNumber = 2;
    private pb::ByteString identityPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the client's identity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityPublicKey {
      get { return identityPublicKey_; }
      set {
        identityPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private long startTime_;
    /// <summary>
    ///  TimestampType. Specifies the start time of the contract.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "identityType" field.</summary>
    public const int IdentityTypeFieldNumber = 4;
    private string identityType_ = "";
    /// <summary>
    ///  Type of the client's identity. It has to match the 'HomeNodePlan.identityType' filter in the selected plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityType {
      get { return identityType_; }
      set {
        identityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HomeNodePlanContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HomeNodePlanContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlanId != other.PlanId) return false;
      if (IdentityPublicKey != other.IdentityPublicKey) return false;
      if (StartTime != other.StartTime) return false;
      if (IdentityType != other.IdentityType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlanId.Length != 0) hash ^= PlanId.GetHashCode();
      if (IdentityPublicKey.Length != 0) hash ^= IdentityPublicKey.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (IdentityType.Length != 0) hash ^= IdentityType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PlanId);
      }
      if (IdentityPublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(IdentityPublicKey);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(StartTime);
      }
      if (IdentityType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(IdentityType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanId);
      }
      if (IdentityPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityPublicKey);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StartTime);
      }
      if (IdentityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HomeNodePlanContract other) {
      if (other == null) {
        return;
      }
      if (other.PlanId.Length != 0) {
        PlanId = other.PlanId;
      }
      if (other.IdentityPublicKey.Length != 0) {
        IdentityPublicKey = other.IdentityPublicKey;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.IdentityType.Length != 0) {
        IdentityType = other.IdentityType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlanId = input.ReadBytes();
            break;
          }
          case 18: {
            IdentityPublicKey = input.ReadBytes();
            break;
          }
          case 24: {
            StartTime = input.ReadSInt64();
            break;
          }
          case 34: {
            IdentityType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  A customer client announces it is online and it "logs in".
  ///  The client has to provide a signature in 'ConversationRequest.signature'.
  ///
  ///  Note that if a customer client that is authenticated already creates a second connection
  ///  and performs the check-in process in it, the first connection has to be disconnected
  ///  as there can not be multiple parallel connections in Authenticated state for a single identity.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: ConversationStarted
  /// </summary>
  public sealed partial class CheckInRequest : pb::IMessage<CheckInRequest> {
    private static readonly pb::MessageParser<CheckInRequest> _parser = new pb::MessageParser<CheckInRequest>(() => new CheckInRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckInRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInRequest(CheckInRequest other) : this() {
      challenge_ = other.challenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInRequest Clone() {
      return new CheckInRequest(this);
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 1;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  The exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckInRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckInRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Challenge != other.Challenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Challenge.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Challenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckInRequest other) {
      if (other == null) {
        return;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Challenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to CheckInRequest. If no error occurs, the conversation status is upgraded to Authenticated.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_INVALID_SIGNATURE - The client's signature of the challenge is not valid.
  ///    * ERROR_NOT_FOUND - The identity is not a client of the node.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "challenge" - 'CheckInRequest.challenge' is not the exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
  /// </summary>
  public sealed partial class CheckInResponse : pb::IMessage<CheckInResponse> {
    private static readonly pb::MessageParser<CheckInResponse> _parser = new pb::MessageParser<CheckInResponse>(() => new CheckInResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckInResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInResponse(CheckInResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInResponse Clone() {
      return new CheckInResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckInResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckInResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckInResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  A non-customer client verifies its public key by signing the challenge. This request is similar to CheckInRequest, 
  ///  but it is intended for non-customer clients. The client has to provide a signature in 'ConversationRequest.signature'.
  ///
  ///  Roles: clNonCustomer
  ///
  ///  Conversation status: ConversationStarted
  /// </summary>
  public sealed partial class VerifyIdentityRequest : pb::IMessage<VerifyIdentityRequest> {
    private static readonly pb::MessageParser<VerifyIdentityRequest> _parser = new pb::MessageParser<VerifyIdentityRequest>(() => new VerifyIdentityRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyIdentityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest(VerifyIdentityRequest other) : this() {
      challenge_ = other.challenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest Clone() {
      return new VerifyIdentityRequest(this);
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 1;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  The exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyIdentityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyIdentityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Challenge != other.Challenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Challenge.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Challenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyIdentityRequest other) {
      if (other == null) {
        return;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Challenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to VerifyIdentityRequest. If no error occurs, the conversation status is upgraded to Verified.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_INVALID_SIGNATURE - The client's signature of the challenge is not valid.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "challenge" - 'VerifyIdentityRequest.challenge' is not the exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
  /// </summary>
  public sealed partial class VerifyIdentityResponse : pb::IMessage<VerifyIdentityResponse> {
    private static readonly pb::MessageParser<VerifyIdentityResponse> _parser = new pb::MessageParser<VerifyIdentityResponse>(() => new VerifyIdentityResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyIdentityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse(VerifyIdentityResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse Clone() {
      return new VerifyIdentityResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyIdentityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyIdentityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyIdentityResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A customer client updates its profile hosted at the node.
  ///  The client must make sure that its profile is complete after processing the request.
  ///  After sending HomeNodeRequestRequest, its profile is almost empty - only identity type 
  ///  and public key are known. This means that the first call of this request 
  ///  has to contain all required information to make the profile complete. Namely the first 
  ///  UpdateProfileRequest has to have setVersion, setName, and setLocation set to true.
  ///
  ///  The customer client is required to initialize its profile just after finishing 
  ///  the HomeNodeRequestRequest. Until the initialization of the profile is made, the identity 
  ///  is not considered as being fully initialized and can not be queried or called by other 
  ///  identities.
  ///  
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class UpdateProfileRequest : pb::IMessage<UpdateProfileRequest> {
    private static readonly pb::MessageParser<UpdateProfileRequest> _parser = new pb::MessageParser<UpdateProfileRequest>(() => new UpdateProfileRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateProfileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileRequest(UpdateProfileRequest other) : this() {
      setVersion_ = other.setVersion_;
      setName_ = other.setName_;
      setImage_ = other.setImage_;
      setLocation_ = other.setLocation_;
      setExtraData_ = other.setExtraData_;
      version_ = other.version_;
      name_ = other.name_;
      image_ = other.image_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      extraData_ = other.extraData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileRequest Clone() {
      return new UpdateProfileRequest(this);
    }

    /// <summary>Field number for the "setVersion" field.</summary>
    public const int SetVersionFieldNumber = 1;
    private bool setVersion_;
    /// <summary>
    ///  Profile version should be updated. 'version' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetVersion {
      get { return setVersion_; }
      set {
        setVersion_ = value;
      }
    }

    /// <summary>Field number for the "setName" field.</summary>
    public const int SetNameFieldNumber = 2;
    private bool setName_;
    /// <summary>
    ///  Profile name should be updated. 'name' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetName {
      get { return setName_; }
      set {
        setName_ = value;
      }
    }

    /// <summary>Field number for the "setImage" field.</summary>
    public const int SetImageFieldNumber = 3;
    private bool setImage_;
    /// <summary>
    ///  Profile image should be updated. 'image' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetImage {
      get { return setImage_; }
      set {
        setImage_ = value;
      }
    }

    /// <summary>Field number for the "setLocation" field.</summary>
    public const int SetLocationFieldNumber = 4;
    private bool setLocation_;
    /// <summary>
    ///  Profile location should be updated. 'latitude' and 'longitude' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetLocation {
      get { return setLocation_; }
      set {
        setLocation_ = value;
      }
    }

    /// <summary>Field number for the "setExtraData" field.</summary>
    public const int SetExtraDataFieldNumber = 5;
    private bool setExtraData_;
    /// <summary>
    ///  Profile extra data should be updated. 'extraData' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetExtraData {
      get { return setExtraData_; }
      set {
        setExtraData_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 8;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. Version of the profile structure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 9;
    private string name_ = "";
    /// <summary>
    ///  Name of the profile, non-empty string, max 64 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 10;
    private pb::ByteString image_ = pb::ByteString.Empty;
    /// <summary>
    ///  Profile image in PNG or JPEG format, non-empty binary data, max 20,480 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 11;
    private int latitude_;
    /// <summary>
    ///  LocationType. GPS location latitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 12;
    private int longitude_;
    /// <summary>
    ///  LocationType. GPS location longitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 13;
    private string extraData_ = "";
    /// <summary>
    ///  Semicolon separated 'key=value' list, max 200 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateProfileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateProfileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SetVersion != other.SetVersion) return false;
      if (SetName != other.SetName) return false;
      if (SetImage != other.SetImage) return false;
      if (SetLocation != other.SetLocation) return false;
      if (SetExtraData != other.SetExtraData) return false;
      if (Version != other.Version) return false;
      if (Name != other.Name) return false;
      if (Image != other.Image) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (ExtraData != other.ExtraData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SetVersion != false) hash ^= SetVersion.GetHashCode();
      if (SetName != false) hash ^= SetName.GetHashCode();
      if (SetImage != false) hash ^= SetImage.GetHashCode();
      if (SetLocation != false) hash ^= SetLocation.GetHashCode();
      if (SetExtraData != false) hash ^= SetExtraData.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (Latitude != 0) hash ^= Latitude.GetHashCode();
      if (Longitude != 0) hash ^= Longitude.GetHashCode();
      if (ExtraData.Length != 0) hash ^= ExtraData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SetVersion != false) {
        output.WriteRawTag(8);
        output.WriteBool(SetVersion);
      }
      if (SetName != false) {
        output.WriteRawTag(16);
        output.WriteBool(SetName);
      }
      if (SetImage != false) {
        output.WriteRawTag(24);
        output.WriteBool(SetImage);
      }
      if (SetLocation != false) {
        output.WriteRawTag(32);
        output.WriteBool(SetLocation);
      }
      if (SetExtraData != false) {
        output.WriteRawTag(40);
        output.WriteBool(SetExtraData);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Version);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Image);
      }
      if (Latitude != 0) {
        output.WriteRawTag(93);
        output.WriteSFixed32(Latitude);
      }
      if (Longitude != 0) {
        output.WriteRawTag(101);
        output.WriteSFixed32(Longitude);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ExtraData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SetVersion != false) {
        size += 1 + 1;
      }
      if (SetName != false) {
        size += 1 + 1;
      }
      if (SetImage != false) {
        size += 1 + 1;
      }
      if (SetLocation != false) {
        size += 1 + 1;
      }
      if (SetExtraData != false) {
        size += 1 + 1;
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
      }
      if (Latitude != 0) {
        size += 1 + 4;
      }
      if (Longitude != 0) {
        size += 1 + 4;
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateProfileRequest other) {
      if (other == null) {
        return;
      }
      if (other.SetVersion != false) {
        SetVersion = other.SetVersion;
      }
      if (other.SetName != false) {
        SetName = other.SetName;
      }
      if (other.SetImage != false) {
        SetImage = other.SetImage;
      }
      if (other.SetLocation != false) {
        SetLocation = other.SetLocation;
      }
      if (other.SetExtraData != false) {
        SetExtraData = other.SetExtraData;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.Latitude != 0) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0) {
        Longitude = other.Longitude;
      }
      if (other.ExtraData.Length != 0) {
        ExtraData = other.ExtraData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SetVersion = input.ReadBool();
            break;
          }
          case 16: {
            SetName = input.ReadBool();
            break;
          }
          case 24: {
            SetImage = input.ReadBool();
            break;
          }
          case 32: {
            SetLocation = input.ReadBool();
            break;
          }
          case 40: {
            SetExtraData = input.ReadBool();
            break;
          }
          case 66: {
            Version = input.ReadBytes();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
          case 82: {
            Image = input.ReadBytes();
            break;
          }
          case 93: {
            Latitude = input.ReadSFixed32();
            break;
          }
          case 101: {
            Longitude = input.ReadSFixed32();
            break;
          }
          case 106: {
            ExtraData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to UpdateProfileRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_FOUND - The identity is not a client of the node.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "setVersion" - 'UpdateProfileRequest.setVersion' is not set during the first request.
  ///      * Response.details == "setName" - 'UpdateProfileRequest.setName' is not set during the firts request.
  ///      * Response.details == "setLocation" - 'UpdateProfileRequest.setLocation' is not set during the firts request.
  ///      * Response.details == "set*" - Nothing was set to be updated.
  ///      * Response.details == "version" - 'UpdateProfileRequest.version' does not contain a valid version information.
  ///      * Response.details == "name" - 'UpdateProfileRequest.name' does not contain a valid name.
  ///      * Response.details == "image" - 'UpdateProfileRequest.image' does not contain a valid PNG or JPEG image.
  ///      * Response.details == "latitude" - 'UpdateProfileRequest.latitude' does not contain a valid latitude information.
  ///      * Response.details == "longitude" - 'UpdateProfileRequest.longitude' does not contain a valid longitude information.
  ///      * Response.details == "extraData" - 'UpdateProfileRequest.extraData' does not contain a valid extra data information.
  /// </summary>
  public sealed partial class UpdateProfileResponse : pb::IMessage<UpdateProfileResponse> {
    private static readonly pb::MessageParser<UpdateProfileResponse> _parser = new pb::MessageParser<UpdateProfileResponse>(() => new UpdateProfileResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateProfileResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileResponse(UpdateProfileResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateProfileResponse Clone() {
      return new UpdateProfileResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateProfileResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateProfileResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateProfileResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  A customer client cancels the home node agreement and optionally informs 
  ///  the node about its new home node location. The node will keep the information 
  ///  about identity's new location for some time.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class CancelHomeNodeAgreementRequest : pb::IMessage<CancelHomeNodeAgreementRequest> {
    private static readonly pb::MessageParser<CancelHomeNodeAgreementRequest> _parser = new pb::MessageParser<CancelHomeNodeAgreementRequest>(() => new CancelHomeNodeAgreementRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelHomeNodeAgreementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementRequest(CancelHomeNodeAgreementRequest other) : this() {
      redirectToNewHomeNode_ = other.redirectToNewHomeNode_;
      newHomeNodeNetworkId_ = other.newHomeNodeNetworkId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementRequest Clone() {
      return new CancelHomeNodeAgreementRequest(this);
    }

    /// <summary>Field number for the "redirectToNewHomeNode" field.</summary>
    public const int RedirectToNewHomeNodeFieldNumber = 1;
    private bool redirectToNewHomeNode_;
    /// <summary>
    ///  true, if the client wants to inform the home node about its new home node location, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RedirectToNewHomeNode {
      get { return redirectToNewHomeNode_; }
      set {
        redirectToNewHomeNode_ = value;
      }
    }

    /// <summary>Field number for the "newHomeNodeNetworkId" field.</summary>
    public const int NewHomeNodeNetworkIdFieldNumber = 2;
    private pb::ByteString newHomeNodeNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'redirectToNewHomeNode' is true, an identifier of the new home node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewHomeNodeNetworkId {
      get { return newHomeNodeNetworkId_; }
      set {
        newHomeNodeNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelHomeNodeAgreementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelHomeNodeAgreementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RedirectToNewHomeNode != other.RedirectToNewHomeNode) return false;
      if (NewHomeNodeNetworkId != other.NewHomeNodeNetworkId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RedirectToNewHomeNode != false) hash ^= RedirectToNewHomeNode.GetHashCode();
      if (NewHomeNodeNetworkId.Length != 0) hash ^= NewHomeNodeNetworkId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RedirectToNewHomeNode != false) {
        output.WriteRawTag(8);
        output.WriteBool(RedirectToNewHomeNode);
      }
      if (NewHomeNodeNetworkId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewHomeNodeNetworkId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RedirectToNewHomeNode != false) {
        size += 1 + 1;
      }
      if (NewHomeNodeNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewHomeNodeNetworkId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelHomeNodeAgreementRequest other) {
      if (other == null) {
        return;
      }
      if (other.RedirectToNewHomeNode != false) {
        RedirectToNewHomeNode = other.RedirectToNewHomeNode;
      }
      if (other.NewHomeNodeNetworkId.Length != 0) {
        NewHomeNodeNetworkId = other.NewHomeNodeNetworkId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RedirectToNewHomeNode = input.ReadBool();
            break;
          }
          case 18: {
            NewHomeNodeNetworkId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to CancelHomeNodeAgreementRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_FOUND - The identity is not a client of the node.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "newHomeNodeNetworkId" - 'CancelHomeNodeAgreementRequest.newHomeNodeNetworkId' is not a valid node network identifier.
  /// </summary>
  public sealed partial class CancelHomeNodeAgreementResponse : pb::IMessage<CancelHomeNodeAgreementResponse> {
    private static readonly pb::MessageParser<CancelHomeNodeAgreementResponse> _parser = new pb::MessageParser<CancelHomeNodeAgreementResponse>(() => new CancelHomeNodeAgreementResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelHomeNodeAgreementResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementResponse(CancelHomeNodeAgreementResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelHomeNodeAgreementResponse Clone() {
      return new CancelHomeNodeAgreementResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelHomeNodeAgreementResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelHomeNodeAgreementResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelHomeNodeAgreementResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  Adds (checks-in) one or more application services to the list of services that the customer 
  ///  client supports in the current session.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class ApplicationServiceAddRequest : pb::IMessage<ApplicationServiceAddRequest> {
    private static readonly pb::MessageParser<ApplicationServiceAddRequest> _parser = new pb::MessageParser<ApplicationServiceAddRequest>(() => new ApplicationServiceAddRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceAddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddRequest(ApplicationServiceAddRequest other) : this() {
      serviceNames_ = other.serviceNames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddRequest Clone() {
      return new ApplicationServiceAddRequest(this);
    }

    /// <summary>Field number for the "serviceNames" field.</summary>
    public const int ServiceNamesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_serviceNames_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> serviceNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  List of application service names to add to the list. If a service name is already 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServiceNames {
      get { return serviceNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceAddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceAddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serviceNames_.Equals(other.serviceNames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serviceNames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serviceNames_.WriteTo(output, _repeated_serviceNames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serviceNames_.CalculateSize(_repeated_serviceNames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceAddRequest other) {
      if (other == null) {
        return;
      }
      serviceNames_.Add(other.serviceNames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            serviceNames_.AddEntriesFrom(input, _repeated_serviceNames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ApplicationServiceAddRequest.
  ///
  ///    * ERROR_QUOTA_EXCEEDED - The given set of application services can not be added because the client would have more than the maximum number of enabled services.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "serviceNames[i]" - 'ApplicationServiceAddRequest.serviceNames[i]' is not a valid service name, where 'i' is a zero-based index.
  /// </summary>
  public sealed partial class ApplicationServiceAddResponse : pb::IMessage<ApplicationServiceAddResponse> {
    private static readonly pb::MessageParser<ApplicationServiceAddResponse> _parser = new pb::MessageParser<ApplicationServiceAddResponse>(() => new ApplicationServiceAddResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceAddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddResponse(ApplicationServiceAddResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceAddResponse Clone() {
      return new ApplicationServiceAddResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceAddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceAddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceAddResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  Removes (checks-out) a single application service from the list of services that the customer 
  ///  client supports in the current session.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class ApplicationServiceRemoveRequest : pb::IMessage<ApplicationServiceRemoveRequest> {
    private static readonly pb::MessageParser<ApplicationServiceRemoveRequest> _parser = new pb::MessageParser<ApplicationServiceRemoveRequest>(() => new ApplicationServiceRemoveRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceRemoveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveRequest(ApplicationServiceRemoveRequest other) : this() {
      serviceName_ = other.serviceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveRequest Clone() {
      return new ApplicationServiceRemoveRequest(this);
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  Name of the application service to remove. The service must be in the customer client's list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceRemoveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceRemoveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceRemoveRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ApplicationServiceRemoveRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_FOUND - 'ApplicationServiceRemoveRequest.serviceName' does not refer to an application service that was previously added using ApplicationServiceAddRequest.
  /// </summary>
  public sealed partial class ApplicationServiceRemoveResponse : pb::IMessage<ApplicationServiceRemoveResponse> {
    private static readonly pb::MessageParser<ApplicationServiceRemoveResponse> _parser = new pb::MessageParser<ApplicationServiceRemoveResponse>(() => new ApplicationServiceRemoveResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceRemoveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveResponse(ApplicationServiceRemoveResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceRemoveResponse Clone() {
      return new ApplicationServiceRemoveResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceRemoveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceRemoveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceRemoveResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  Obtains a basic information about an identity hosted on the node.
  ///  If the identity is online, the information includes a list of application services 
  ///  that the identity supports in the currently active session.
  ///
  ///  Roles: clNonCustomer, clCustomer
  /// </summary>
  public sealed partial class GetIdentityInformationRequest : pb::IMessage<GetIdentityInformationRequest> {
    private static readonly pb::MessageParser<GetIdentityInformationRequest> _parser = new pb::MessageParser<GetIdentityInformationRequest>(() => new GetIdentityInformationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetIdentityInformationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationRequest(GetIdentityInformationRequest other) : this() {
      identityNetworkId_ = other.identityNetworkId_;
      includeProfileImage_ = other.includeProfileImage_;
      includeThumbnailImage_ = other.includeThumbnailImage_;
      includeApplicationServices_ = other.includeApplicationServices_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationRequest Clone() {
      return new GetIdentityInformationRequest(this);
    }

    /// <summary>Field number for the "identityNetworkId" field.</summary>
    public const int IdentityNetworkIdFieldNumber = 1;
    private pb::ByteString identityNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Identity's network identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityNetworkId {
      get { return identityNetworkId_; }
      set {
        identityNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "includeProfileImage" field.</summary>
    public const int IncludeProfileImageFieldNumber = 2;
    private bool includeProfileImage_;
    /// <summary>
    ///  If set to true, the response will include a profile image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeProfileImage {
      get { return includeProfileImage_; }
      set {
        includeProfileImage_ = value;
      }
    }

    /// <summary>Field number for the "includeThumbnailImage" field.</summary>
    public const int IncludeThumbnailImageFieldNumber = 3;
    private bool includeThumbnailImage_;
    /// <summary>
    ///  If set to true, the response will include a thumbnail image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeThumbnailImage {
      get { return includeThumbnailImage_; }
      set {
        includeThumbnailImage_ = value;
      }
    }

    /// <summary>Field number for the "includeApplicationServices" field.</summary>
    public const int IncludeApplicationServicesFieldNumber = 4;
    private bool includeApplicationServices_;
    /// <summary>
    ///  If set to true and the given identity is online, the response will include 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeApplicationServices {
      get { return includeApplicationServices_; }
      set {
        includeApplicationServices_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetIdentityInformationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetIdentityInformationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityNetworkId != other.IdentityNetworkId) return false;
      if (IncludeProfileImage != other.IncludeProfileImage) return false;
      if (IncludeThumbnailImage != other.IncludeThumbnailImage) return false;
      if (IncludeApplicationServices != other.IncludeApplicationServices) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityNetworkId.Length != 0) hash ^= IdentityNetworkId.GetHashCode();
      if (IncludeProfileImage != false) hash ^= IncludeProfileImage.GetHashCode();
      if (IncludeThumbnailImage != false) hash ^= IncludeThumbnailImage.GetHashCode();
      if (IncludeApplicationServices != false) hash ^= IncludeApplicationServices.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityNetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IdentityNetworkId);
      }
      if (IncludeProfileImage != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeProfileImage);
      }
      if (IncludeThumbnailImage != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeThumbnailImage);
      }
      if (IncludeApplicationServices != false) {
        output.WriteRawTag(32);
        output.WriteBool(IncludeApplicationServices);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityNetworkId);
      }
      if (IncludeProfileImage != false) {
        size += 1 + 1;
      }
      if (IncludeThumbnailImage != false) {
        size += 1 + 1;
      }
      if (IncludeApplicationServices != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetIdentityInformationRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdentityNetworkId.Length != 0) {
        IdentityNetworkId = other.IdentityNetworkId;
      }
      if (other.IncludeProfileImage != false) {
        IncludeProfileImage = other.IncludeProfileImage;
      }
      if (other.IncludeThumbnailImage != false) {
        IncludeThumbnailImage = other.IncludeThumbnailImage;
      }
      if (other.IncludeApplicationServices != false) {
        IncludeApplicationServices = other.IncludeApplicationServices;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityNetworkId = input.ReadBytes();
            break;
          }
          case 16: {
            IncludeProfileImage = input.ReadBool();
            break;
          }
          case 24: {
            IncludeThumbnailImage = input.ReadBool();
            break;
          }
          case 32: {
            IncludeApplicationServices = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to GetIdentityInformationRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_FOUND - 'GetIdentityInformationRequest.identityNetworkId' does not identify an identity hosted by the node.
  ///    * ERROR_UNINITIALIZED - The target identity's profile has not been initialized yet.
  /// </summary>
  public sealed partial class GetIdentityInformationResponse : pb::IMessage<GetIdentityInformationResponse> {
    private static readonly pb::MessageParser<GetIdentityInformationResponse> _parser = new pb::MessageParser<GetIdentityInformationResponse>(() => new GetIdentityInformationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetIdentityInformationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationResponse(GetIdentityInformationResponse other) : this() {
      isHosted_ = other.isHosted_;
      isTargetHomeNodeKnown_ = other.isTargetHomeNodeKnown_;
      targetHomeNodeNetworkId_ = other.targetHomeNodeNetworkId_;
      isOnline_ = other.isOnline_;
      version_ = other.version_;
      identityPublicKey_ = other.identityPublicKey_;
      type_ = other.type_;
      name_ = other.name_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      extraData_ = other.extraData_;
      profileImage_ = other.profileImage_;
      thumbnailImage_ = other.thumbnailImage_;
      applicationServices_ = other.applicationServices_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityInformationResponse Clone() {
      return new GetIdentityInformationResponse(this);
    }

    /// <summary>Field number for the "isHosted" field.</summary>
    public const int IsHostedFieldNumber = 1;
    private bool isHosted_;
    /// <summary>
    ///  True if the requested identity is a customer of the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHosted {
      get { return isHosted_; }
      set {
        isHosted_ = value;
      }
    }

    /// <summary>Field number for the "isTargetHomeNodeKnown" field.</summary>
    public const int IsTargetHomeNodeKnownFieldNumber = 2;
    private bool isTargetHomeNodeKnown_;
    /// <summary>
    ///  If 'isHosted' is false then this is true if the identity's new home node is known to the node. In all other cases, this is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetHomeNodeKnown {
      get { return isTargetHomeNodeKnown_; }
      set {
        isTargetHomeNodeKnown_ = value;
      }
    }

    /// <summary>Field number for the "targetHomeNodeNetworkId" field.</summary>
    public const int TargetHomeNodeNetworkIdFieldNumber = 3;
    private pb::ByteString targetHomeNodeNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'isTargetHomeNodeKnown' is true then this field contains the identity's new home node network ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TargetHomeNodeNetworkId {
      get { return targetHomeNodeNetworkId_; }
      set {
        targetHomeNodeNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isOnline" field.</summary>
    public const int IsOnlineFieldNumber = 4;
    private bool isOnline_;
    /// <summary>
    ///  Following fields are valid only if 'isHosted' is true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. Version of the profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identityPublicKey" field.</summary>
    public const int IdentityPublicKeyFieldNumber = 6;
    private pb::ByteString identityPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  The requested identity's public key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityPublicKey {
      get { return identityPublicKey_; }
      set {
        identityPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private string type_ = "";
    /// <summary>
    ///  The requested identity's type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    /// <summary>
    ///  The requested identity's name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 9;
    private int latitude_;
    /// <summary>
    ///  LocationType. The requested identity's GPS location latitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 10;
    private int longitude_;
    /// <summary>
    ///  LocationType. The requested identity's GPS location longitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 11;
    private string extraData_ = "";
    /// <summary>
    ///  The requested identity's extra data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profileImage" field.</summary>
    public const int ProfileImageFieldNumber = 12;
    private pb::ByteString profileImage_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'GetIdentityInformationRequest.includeProfileImage' was set, this contains the requested identity's profile image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProfileImage {
      get { return profileImage_; }
      set {
        profileImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnailImage" field.</summary>
    public const int ThumbnailImageFieldNumber = 13;
    private pb::ByteString thumbnailImage_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'GetIdentityInformationRequest.includeThumbnailImage' was set, this contains the requested identity's thumbnail image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThumbnailImage {
      get { return thumbnailImage_; }
      set {
        thumbnailImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "applicationServices" field.</summary>
    public const int ApplicationServicesFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_applicationServices_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> applicationServices_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  If 'GetIdentityInformationRequest.includeApplicationServices' was set and if 'isOnline' is true, this contains 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ApplicationServices {
      get { return applicationServices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetIdentityInformationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetIdentityInformationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsHosted != other.IsHosted) return false;
      if (IsTargetHomeNodeKnown != other.IsTargetHomeNodeKnown) return false;
      if (TargetHomeNodeNetworkId != other.TargetHomeNodeNetworkId) return false;
      if (IsOnline != other.IsOnline) return false;
      if (Version != other.Version) return false;
      if (IdentityPublicKey != other.IdentityPublicKey) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (ExtraData != other.ExtraData) return false;
      if (ProfileImage != other.ProfileImage) return false;
      if (ThumbnailImage != other.ThumbnailImage) return false;
      if(!applicationServices_.Equals(other.applicationServices_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsHosted != false) hash ^= IsHosted.GetHashCode();
      if (IsTargetHomeNodeKnown != false) hash ^= IsTargetHomeNodeKnown.GetHashCode();
      if (TargetHomeNodeNetworkId.Length != 0) hash ^= TargetHomeNodeNetworkId.GetHashCode();
      if (IsOnline != false) hash ^= IsOnline.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (IdentityPublicKey.Length != 0) hash ^= IdentityPublicKey.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Latitude != 0) hash ^= Latitude.GetHashCode();
      if (Longitude != 0) hash ^= Longitude.GetHashCode();
      if (ExtraData.Length != 0) hash ^= ExtraData.GetHashCode();
      if (ProfileImage.Length != 0) hash ^= ProfileImage.GetHashCode();
      if (ThumbnailImage.Length != 0) hash ^= ThumbnailImage.GetHashCode();
      hash ^= applicationServices_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsHosted != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsHosted);
      }
      if (IsTargetHomeNodeKnown != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTargetHomeNodeKnown);
      }
      if (TargetHomeNodeNetworkId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TargetHomeNodeNetworkId);
      }
      if (IsOnline != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsOnline);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Version);
      }
      if (IdentityPublicKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(IdentityPublicKey);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (Latitude != 0) {
        output.WriteRawTag(77);
        output.WriteSFixed32(Latitude);
      }
      if (Longitude != 0) {
        output.WriteRawTag(85);
        output.WriteSFixed32(Longitude);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ExtraData);
      }
      if (ProfileImage.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(ProfileImage);
      }
      if (ThumbnailImage.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(ThumbnailImage);
      }
      applicationServices_.WriteTo(output, _repeated_applicationServices_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsHosted != false) {
        size += 1 + 1;
      }
      if (IsTargetHomeNodeKnown != false) {
        size += 1 + 1;
      }
      if (TargetHomeNodeNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TargetHomeNodeNetworkId);
      }
      if (IsOnline != false) {
        size += 1 + 1;
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (IdentityPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityPublicKey);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Latitude != 0) {
        size += 1 + 4;
      }
      if (Longitude != 0) {
        size += 1 + 4;
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraData);
      }
      if (ProfileImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProfileImage);
      }
      if (ThumbnailImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThumbnailImage);
      }
      size += applicationServices_.CalculateSize(_repeated_applicationServices_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetIdentityInformationResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsHosted != false) {
        IsHosted = other.IsHosted;
      }
      if (other.IsTargetHomeNodeKnown != false) {
        IsTargetHomeNodeKnown = other.IsTargetHomeNodeKnown;
      }
      if (other.TargetHomeNodeNetworkId.Length != 0) {
        TargetHomeNodeNetworkId = other.TargetHomeNodeNetworkId;
      }
      if (other.IsOnline != false) {
        IsOnline = other.IsOnline;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.IdentityPublicKey.Length != 0) {
        IdentityPublicKey = other.IdentityPublicKey;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Latitude != 0) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0) {
        Longitude = other.Longitude;
      }
      if (other.ExtraData.Length != 0) {
        ExtraData = other.ExtraData;
      }
      if (other.ProfileImage.Length != 0) {
        ProfileImage = other.ProfileImage;
      }
      if (other.ThumbnailImage.Length != 0) {
        ThumbnailImage = other.ThumbnailImage;
      }
      applicationServices_.Add(other.applicationServices_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsHosted = input.ReadBool();
            break;
          }
          case 16: {
            IsTargetHomeNodeKnown = input.ReadBool();
            break;
          }
          case 26: {
            TargetHomeNodeNetworkId = input.ReadBytes();
            break;
          }
          case 32: {
            IsOnline = input.ReadBool();
            break;
          }
          case 42: {
            Version = input.ReadBytes();
            break;
          }
          case 50: {
            IdentityPublicKey = input.ReadBytes();
            break;
          }
          case 58: {
            Type = input.ReadString();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 77: {
            Latitude = input.ReadSFixed32();
            break;
          }
          case 85: {
            Longitude = input.ReadSFixed32();
            break;
          }
          case 90: {
            ExtraData = input.ReadString();
            break;
          }
          case 98: {
            ProfileImage = input.ReadBytes();
            break;
          }
          case 106: {
            ThumbnailImage = input.ReadBytes();
            break;
          }
          case 114: {
            applicationServices_.AddEntriesFrom(input, _repeated_applicationServices_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  Request to establish a bridged connection between a requestor (the caller) and an identity (the callee) hosted on the node 
  ///  via one of its supported application service. The callee has to be online, otherwise the request will fail.
  ///
  ///  The node informs the callee about the incoming call and issues a token pair (caller's and callee's tokens) to identify the caller 
  ///  and the callee on the Application Service Interface. The callee's token is sent to the callee with the information about the incoming call. 
  ///  If the callee wants to accept the call, the node informs the caller and sends it the caller's token. Both clients are then expected 
  ///  to establish new connections to the node's Application Service Interface and use their tokens to send a message to the other client.
  ///
  ///  Roles: clNonCustomer, clCustomer
  ///
  ///  Conversation status: Verified
  /// </summary>
  public sealed partial class CallIdentityApplicationServiceRequest : pb::IMessage<CallIdentityApplicationServiceRequest> {
    private static readonly pb::MessageParser<CallIdentityApplicationServiceRequest> _parser = new pb::MessageParser<CallIdentityApplicationServiceRequest>(() => new CallIdentityApplicationServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallIdentityApplicationServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceRequest(CallIdentityApplicationServiceRequest other) : this() {
      identityNetworkId_ = other.identityNetworkId_;
      serviceName_ = other.serviceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceRequest Clone() {
      return new CallIdentityApplicationServiceRequest(this);
    }

    /// <summary>Field number for the "identityNetworkId" field.</summary>
    public const int IdentityNetworkIdFieldNumber = 1;
    private pb::ByteString identityNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Network identifier of the identity to call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityNetworkId {
      get { return identityNetworkId_; }
      set {
        identityNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    ///  Name of the application service to use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallIdentityApplicationServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallIdentityApplicationServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityNetworkId != other.IdentityNetworkId) return false;
      if (ServiceName != other.ServiceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityNetworkId.Length != 0) hash ^= IdentityNetworkId.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityNetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IdentityNetworkId);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityNetworkId);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallIdentityApplicationServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdentityNetworkId.Length != 0) {
        IdentityNetworkId = other.IdentityNetworkId;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityNetworkId = input.ReadBytes();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to CallIdentityApplicationServiceRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_AVAILABLE - The callee is not online, or it failed to reply to the notification within the required time frame.
  ///    * ERROR_REJECTED - The callee rejected the call.
  ///    * ERROR_UNINITIALIZED - The callee's profile has not been initialized yet.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "identityNetworkId" - 'CallIdentityApplicationServiceRequest.identityNetworkId' does not identify an identity hosted by the node.
  ///      * Response.details == "serviceName" - 'CallIdentityApplicationServiceRequest.serviceName' is not an application service supported by the callee in the current session.
  /// </summary>
  public sealed partial class CallIdentityApplicationServiceResponse : pb::IMessage<CallIdentityApplicationServiceResponse> {
    private static readonly pb::MessageParser<CallIdentityApplicationServiceResponse> _parser = new pb::MessageParser<CallIdentityApplicationServiceResponse>(() => new CallIdentityApplicationServiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallIdentityApplicationServiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceResponse(CallIdentityApplicationServiceResponse other) : this() {
      callerToken_ = other.callerToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallIdentityApplicationServiceResponse Clone() {
      return new CallIdentityApplicationServiceResponse(this);
    }

    /// <summary>Field number for the "callerToken" field.</summary>
    public const int CallerTokenFieldNumber = 1;
    private pb::ByteString callerToken_ = pb::ByteString.Empty;
    /// <summary>
    ///  Token for the caller to identify the session on the Application Service Interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CallerToken {
      get { return callerToken_; }
      set {
        callerToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallIdentityApplicationServiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallIdentityApplicationServiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallerToken != other.CallerToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallerToken.Length != 0) hash ^= CallerToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallerToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CallerToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallerToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CallerToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallIdentityApplicationServiceResponse other) {
      if (other == null) {
        return;
      }
      if (other.CallerToken.Length != 0) {
        CallerToken = other.CallerToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CallerToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  This request is sent by node to its customer client (the callee) when another client (the caller) wants 
  ///  to establish a call over the customer client's application service.
  ///
  ///  The callee is required to send its response to this request within 10 seconds, otherwise the call channel will not be established.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class IncomingCallNotificationRequest : pb::IMessage<IncomingCallNotificationRequest> {
    private static readonly pb::MessageParser<IncomingCallNotificationRequest> _parser = new pb::MessageParser<IncomingCallNotificationRequest>(() => new IncomingCallNotificationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncomingCallNotificationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationRequest(IncomingCallNotificationRequest other) : this() {
      callerPublicKey_ = other.callerPublicKey_;
      serviceName_ = other.serviceName_;
      calleeToken_ = other.calleeToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationRequest Clone() {
      return new IncomingCallNotificationRequest(this);
    }

    /// <summary>Field number for the "callerPublicKey" field.</summary>
    public const int CallerPublicKeyFieldNumber = 1;
    private pb::ByteString callerPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the caller.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CallerPublicKey {
      get { return callerPublicKey_; }
      set {
        callerPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    ///  Name of the application service the caller wants to use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "calleeToken" field.</summary>
    public const int CalleeTokenFieldNumber = 3;
    private pb::ByteString calleeToken_ = pb::ByteString.Empty;
    /// <summary>
    ///  Token for the callee to identify the session on the Application Service Interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CalleeToken {
      get { return calleeToken_; }
      set {
        calleeToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncomingCallNotificationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncomingCallNotificationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallerPublicKey != other.CallerPublicKey) return false;
      if (ServiceName != other.ServiceName) return false;
      if (CalleeToken != other.CalleeToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallerPublicKey.Length != 0) hash ^= CallerPublicKey.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (CalleeToken.Length != 0) hash ^= CalleeToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallerPublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CallerPublicKey);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (CalleeToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CalleeToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallerPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CallerPublicKey);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (CalleeToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CalleeToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncomingCallNotificationRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallerPublicKey.Length != 0) {
        CallerPublicKey = other.CallerPublicKey;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.CalleeToken.Length != 0) {
        CalleeToken = other.CalleeToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CallerPublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
          case 26: {
            CalleeToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to CallIdentityApplicationServiceRequest. This is sent by the customer client (the callee) to its home node.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_REJECTED - The callee rejects the call.
  /// </summary>
  public sealed partial class IncomingCallNotificationResponse : pb::IMessage<IncomingCallNotificationResponse> {
    private static readonly pb::MessageParser<IncomingCallNotificationResponse> _parser = new pb::MessageParser<IncomingCallNotificationResponse>(() => new IncomingCallNotificationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncomingCallNotificationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationResponse(IncomingCallNotificationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingCallNotificationResponse Clone() {
      return new IncomingCallNotificationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncomingCallNotificationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncomingCallNotificationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncomingCallNotificationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  This request is sent by a client to the node in order to deliver a message to the other client over the opened 
  ///  application service call channel.
  ///
  ///  After the client connects to clAppService port, it sends an initialization message using this request 
  ///  to inform the node about its identity. This initialization message is not delivered to the other party
  ///  and the node responds to this initialization message only after the other party is also connected.
  ///  In the initialization message, the 'message' field is ignored. If the other party fails to join the channel 
  ///  within 30 seconds, the node closes the existing connection to the connected client.
  ///
  ///  Until the client receives a reply from the node to its initialization message, it is not allowed to send 
  ///  other ApplicationServiceSendMessageRequest. This would be an error and the node would destroy the channel.
  ///
  ///  If neither of clients connects to clAppService port or sends an inititial message within 30 seconds 
  ///  after the call was initiated, the node destroys the channel.
  ///  
  ///  Note that the clients are allowed to disconnect from clNonCustomer/clCustomer port once the caller receives 
  ///  CallIdentityApplicationServiceResponse and the callee sends IncomingCallNotificationResponse.
  ///
  ///  Each client is only allowed to have 20 ApplicationServiceSendMessageRequest messages pending, 
  ///  which means that there was no ApplicationServiceSendMessageResponse sent to the client. If a client attempts 
  ///  to send another message while having 20 pending messages, the node destroys the call channel.
  ///
  ///  Roles: clAppService
  /// </summary>
  public sealed partial class ApplicationServiceSendMessageRequest : pb::IMessage<ApplicationServiceSendMessageRequest> {
    private static readonly pb::MessageParser<ApplicationServiceSendMessageRequest> _parser = new pb::MessageParser<ApplicationServiceSendMessageRequest>(() => new ApplicationServiceSendMessageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceSendMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageRequest(ApplicationServiceSendMessageRequest other) : this() {
      token_ = other.token_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageRequest Clone() {
      return new ApplicationServiceSendMessageRequest(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private pb::ByteString token_ = pb::ByteString.Empty;
    /// <summary>
    ///  Client's token to identify the session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private pb::ByteString message_ = pb::ByteString.Empty;
    /// <summary>
    ///  Message to send to the other client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceSendMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceSendMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Token);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceSendMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadBytes();
            break;
          }
          case 18: {
            Message = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ApplicationServiceSendMessageRequest. This is sent by the node to the client to confirm that it sent 
  ///  the message to the other client and the other client confirmed its arrival.
  ///  
  ///  If the connection to one of the clients is terminated, the node closes the connection to the other client.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_FOUND - 'ApplicationServiceSendMessageRequest.token' is not a valid token. This can have many causes.
  ///                        The token itself can have invalid format, or no such token was ever issued by the node. 
  ///                        However, it can also be the case that the token was valid in the past but the call channel 
  ///                        was closed by the node for any reason and thus the token is no longer valid. 
  /// </summary>
  public sealed partial class ApplicationServiceSendMessageResponse : pb::IMessage<ApplicationServiceSendMessageResponse> {
    private static readonly pb::MessageParser<ApplicationServiceSendMessageResponse> _parser = new pb::MessageParser<ApplicationServiceSendMessageResponse>(() => new ApplicationServiceSendMessageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceSendMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageResponse(ApplicationServiceSendMessageResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceSendMessageResponse Clone() {
      return new ApplicationServiceSendMessageResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceSendMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceSendMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceSendMessageResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  This request is sent by a home node after it received ApplicationServiceSendMessageRequest from one of the clients.
  ///  This forwards the message to its intended recipient.
  ///
  ///  Roles: clAppService
  /// </summary>
  public sealed partial class ApplicationServiceReceiveMessageNotificationRequest : pb::IMessage<ApplicationServiceReceiveMessageNotificationRequest> {
    private static readonly pb::MessageParser<ApplicationServiceReceiveMessageNotificationRequest> _parser = new pb::MessageParser<ApplicationServiceReceiveMessageNotificationRequest>(() => new ApplicationServiceReceiveMessageNotificationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceReceiveMessageNotificationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationRequest(ApplicationServiceReceiveMessageNotificationRequest other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationRequest Clone() {
      return new ApplicationServiceReceiveMessageNotificationRequest(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private pb::ByteString message_ = pb::ByteString.Empty;
    /// <summary>
    ///  Message that was sent to the intended recipient - a copy of 'ApplicationServiceSendMessageRequest.message'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceReceiveMessageNotificationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceReceiveMessageNotificationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceReceiveMessageNotificationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ApplicationServiceReceiveMessageNotificationRequest.
  ///  
  /// </summary>
  public sealed partial class ApplicationServiceReceiveMessageNotificationResponse : pb::IMessage<ApplicationServiceReceiveMessageNotificationResponse> {
    private static readonly pb::MessageParser<ApplicationServiceReceiveMessageNotificationResponse> _parser = new pb::MessageParser<ApplicationServiceReceiveMessageNotificationResponse>(() => new ApplicationServiceReceiveMessageNotificationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationServiceReceiveMessageNotificationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationResponse(ApplicationServiceReceiveMessageNotificationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationServiceReceiveMessageNotificationResponse Clone() {
      return new ApplicationServiceReceiveMessageNotificationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationServiceReceiveMessageNotificationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationServiceReceiveMessageNotificationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationServiceReceiveMessageNotificationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Obtains identity profiles statistics from a node.
  ///
  ///  Only actively hosted profiles are counted regardless of whether or not the profiles are initialized.
  ///
  ///  Roles: clNonCustomer, clCustomer
  /// </summary>
  public sealed partial class ProfileStatsRequest : pb::IMessage<ProfileStatsRequest> {
    private static readonly pb::MessageParser<ProfileStatsRequest> _parser = new pb::MessageParser<ProfileStatsRequest>(() => new ProfileStatsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileStatsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsRequest(ProfileStatsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsRequest Clone() {
      return new ProfileStatsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileStatsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileStatsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileStatsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ProfileStatsRequest.
  ///  
  /// </summary>
  public sealed partial class ProfileStatsResponse : pb::IMessage<ProfileStatsResponse> {
    private static readonly pb::MessageParser<ProfileStatsResponse> _parser = new pb::MessageParser<ProfileStatsResponse>(() => new ProfileStatsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileStatsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsResponse(ProfileStatsResponse other) : this() {
      stats_ = other.stats_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsResponse Clone() {
      return new ProfileStatsResponse(this);
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Homenode.ProfileStatsItem> _repeated_stats_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Homenode.ProfileStatsItem.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.ProfileStatsItem> stats_ = new pbc::RepeatedField<global::Iop.Homenode.ProfileStatsItem>();
    /// <summary>
    ///  List of profile statistics grouped by identity type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.ProfileStatsItem> Stats {
      get { return stats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileStatsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileStatsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stats_.Equals(other.stats_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stats_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stats_.WriteTo(output, _repeated_stats_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stats_.CalculateSize(_repeated_stats_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileStatsResponse other) {
      if (other == null) {
        return;
      }
      stats_.Add(other.stats_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stats_.AddEntriesFrom(input, _repeated_stats_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Statistical information on identities of a specific type.
  /// </summary>
  public sealed partial class ProfileStatsItem : pb::IMessage<ProfileStatsItem> {
    private static readonly pb::MessageParser<ProfileStatsItem> _parser = new pb::MessageParser<ProfileStatsItem>(() => new ProfileStatsItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileStatsItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsItem(ProfileStatsItem other) : this() {
      identityType_ = other.identityType_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileStatsItem Clone() {
      return new ProfileStatsItem(this);
    }

    /// <summary>Field number for the "identityType" field.</summary>
    public const int IdentityTypeFieldNumber = 1;
    private string identityType_ = "";
    /// <summary>
    ///  Type of identity. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityType {
      get { return identityType_; }
      set {
        identityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///  Number of profiles hosted on the node of the specific type of identity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileStatsItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileStatsItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityType != other.IdentityType) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityType.Length != 0) hash ^= IdentityType.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IdentityType);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityType);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileStatsItem other) {
      if (other == null) {
        return;
      }
      if (other.IdentityType.Length != 0) {
        IdentityType = other.IdentityType;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityType = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Asks a node for a list of all identities that match the search criteria. This search never returns 
  ///  profiles of old customer identities who cancelled their home node agreement, even if the node still 
  ///  holds some information about those identities.
  ///
  ///  Each search request only produces a limited number of results. The maximal size of the first set of results 
  ///  is provided by 'maxResponseRecordCount' field. The response to this message contains up to 'maxResponseRecordCount' 
  ///  results. If there are more results available, they are saved to the conversation context, which enables the client 
  ///  to obtain more results with subsequent ProfileSearchPartRequest messages.
  ///
  ///  The node will not save more than 'maxTotalRecordCount' search requests. 
  ///  The node has allow the client to get additional results at least 1 minute from receiving ProfileSearchRequest,
  ///  but it can maintain the result cache for longer than that.
  ///
  ///  Once the client sends another ProfileSearchRequest, or if it disconnects, the old search results are discarded.
  ///
  ///  Roles: clNonCustomer, clCustomer
  ///
  ///  Conversation status: ConversationStarted, Verified, Authenticated
  /// </summary>
  public sealed partial class ProfileSearchRequest : pb::IMessage<ProfileSearchRequest> {
    private static readonly pb::MessageParser<ProfileSearchRequest> _parser = new pb::MessageParser<ProfileSearchRequest>(() => new ProfileSearchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchRequest(ProfileSearchRequest other) : this() {
      includeHostedOnly_ = other.includeHostedOnly_;
      includeThumbnailImages_ = other.includeThumbnailImages_;
      maxResponseRecordCount_ = other.maxResponseRecordCount_;
      maxTotalRecordCount_ = other.maxTotalRecordCount_;
      type_ = other.type_;
      name_ = other.name_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      radius_ = other.radius_;
      extraData_ = other.extraData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchRequest Clone() {
      return new ProfileSearchRequest(this);
    }

    /// <summary>Field number for the "includeHostedOnly" field.</summary>
    public const int IncludeHostedOnlyFieldNumber = 1;
    private bool includeHostedOnly_;
    /// <summary>
    ///  If set to true, the node only returns profiles of its own customers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeHostedOnly {
      get { return includeHostedOnly_; }
      set {
        includeHostedOnly_ = value;
      }
    }

    /// <summary>Field number for the "includeThumbnailImages" field.</summary>
    public const int IncludeThumbnailImagesFieldNumber = 2;
    private bool includeThumbnailImages_;
    /// <summary>
    ///  If set to false, profiles from the node's neighborhood can be included in the result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeThumbnailImages {
      get { return includeThumbnailImages_; }
      set {
        includeThumbnailImages_ = value;
      }
    }

    /// <summary>Field number for the "maxResponseRecordCount" field.</summary>
    public const int MaxResponseRecordCountFieldNumber = 3;
    private uint maxResponseRecordCount_;
    /// <summary>
    ///  Maximal number of results to be delivered in the response. If 'includeThumbnailImages'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxResponseRecordCount {
      get { return maxResponseRecordCount_; }
      set {
        maxResponseRecordCount_ = value;
      }
    }

    /// <summary>Field number for the "maxTotalRecordCount" field.</summary>
    public const int MaxTotalRecordCountFieldNumber = 4;
    private uint maxTotalRecordCount_;
    /// <summary>
    ///  is true, this has to be an integer between 1 and 100. If 'includeThumbnailImages' is false,
    ///  this has to be an integer between 1 and 1000. The value must not be greater than 'maxTotalRecordCount'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxTotalRecordCount {
      get { return maxTotalRecordCount_; }
      set {
        maxTotalRecordCount_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private string type_ = "";
    /// <summary>
    ///  Search filters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    /// <summary>
    ///  of identity types that match the wildcard string. If empty, all identity types are allowed.
    ///  Max 64 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 7;
    private int latitude_;
    /// <summary>
    ///  with names that match the wildcard string. If empty, all profile names are allowed.
    ///  Max 64 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 8;
    private int longitude_;
    /// <summary>
    ///  it is, in combination with 'longitude' and 'radius' a specification of target area, 
    ///  where the identity has to be located (according to its profile information) in order to be 
    ///  included in the search results. If NO_LOCATION, 'longitude' and 'radius' are ignored 
    ///  and all locations are allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 9;
    private uint radius_;
    /// <summary>
    ///  If 'latitude' is not NO_LOCATION, this is target location radius in metres.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 10;
    private string extraData_ = "";
    /// <summary>
    ///  RegexType or empty string. If not empty, specifies the regular expression that identity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncludeHostedOnly != other.IncludeHostedOnly) return false;
      if (IncludeThumbnailImages != other.IncludeThumbnailImages) return false;
      if (MaxResponseRecordCount != other.MaxResponseRecordCount) return false;
      if (MaxTotalRecordCount != other.MaxTotalRecordCount) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (Radius != other.Radius) return false;
      if (ExtraData != other.ExtraData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncludeHostedOnly != false) hash ^= IncludeHostedOnly.GetHashCode();
      if (IncludeThumbnailImages != false) hash ^= IncludeThumbnailImages.GetHashCode();
      if (MaxResponseRecordCount != 0) hash ^= MaxResponseRecordCount.GetHashCode();
      if (MaxTotalRecordCount != 0) hash ^= MaxTotalRecordCount.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Latitude != 0) hash ^= Latitude.GetHashCode();
      if (Longitude != 0) hash ^= Longitude.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (ExtraData.Length != 0) hash ^= ExtraData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncludeHostedOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(IncludeHostedOnly);
      }
      if (IncludeThumbnailImages != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeThumbnailImages);
      }
      if (MaxResponseRecordCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxResponseRecordCount);
      }
      if (MaxTotalRecordCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxTotalRecordCount);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (Latitude != 0) {
        output.WriteRawTag(61);
        output.WriteSFixed32(Latitude);
      }
      if (Longitude != 0) {
        output.WriteRawTag(69);
        output.WriteSFixed32(Longitude);
      }
      if (Radius != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Radius);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ExtraData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncludeHostedOnly != false) {
        size += 1 + 1;
      }
      if (IncludeThumbnailImages != false) {
        size += 1 + 1;
      }
      if (MaxResponseRecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxResponseRecordCount);
      }
      if (MaxTotalRecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTotalRecordCount);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Latitude != 0) {
        size += 1 + 4;
      }
      if (Longitude != 0) {
        size += 1 + 4;
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Radius);
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.IncludeHostedOnly != false) {
        IncludeHostedOnly = other.IncludeHostedOnly;
      }
      if (other.IncludeThumbnailImages != false) {
        IncludeThumbnailImages = other.IncludeThumbnailImages;
      }
      if (other.MaxResponseRecordCount != 0) {
        MaxResponseRecordCount = other.MaxResponseRecordCount;
      }
      if (other.MaxTotalRecordCount != 0) {
        MaxTotalRecordCount = other.MaxTotalRecordCount;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Latitude != 0) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0) {
        Longitude = other.Longitude;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.ExtraData.Length != 0) {
        ExtraData = other.ExtraData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IncludeHostedOnly = input.ReadBool();
            break;
          }
          case 16: {
            IncludeThumbnailImages = input.ReadBool();
            break;
          }
          case 24: {
            MaxResponseRecordCount = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxTotalRecordCount = input.ReadUInt32();
            break;
          }
          case 42: {
            Type = input.ReadString();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 61: {
            Latitude = input.ReadSFixed32();
            break;
          }
          case 69: {
            Longitude = input.ReadSFixed32();
            break;
          }
          case 72: {
            Radius = input.ReadUInt32();
            break;
          }
          case 82: {
            ExtraData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ProfileSearchRequest.
  ///
  ///  If 'maxResponseRecordCount' is lower than 'totalRecordCount', the client is allowed to send ProfileSearchPartRequest messages to obtain more results.
  ///
  ///  If a client is looking for a small set of profiles within a large area, it might need to perform multiple search queries across 
  ///  several nodes in the target area in order to "cover" it. 'coveredNodes' contains a list of nodes forming the neighborhood of the node being queried. 
  ///  Neighborhood nodes share their profile databases and a query to one node will thus cover nodes in its neighborhood. Note that this information 
  ///  is not very much relevant in case the number of result is large and is limited by the protocol. In this case, it is possible that the node 
  ///  returns results from profile databases only from a small subset of its neighborhood provided in the 'coveredNodes' value.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "maxResponseRecordCount" - 'ProfileSearchRequest.maxResponseRecordCount' is not within the required range.
  ///      * Response.details == "maxTotalRecordCount" - 'ProfileSearchRequest.maxTotalRecordCount' is not within the required range.
  ///      * Response.details == "type" - 'ProfileSearchRequest.type' is too long.
  ///      * Response.details == "name" - 'ProfileSearchRequest.name' is too long.
  ///      * Response.details == "latitude" - 'ProfileSearchRequest.latitude' is not a valid location latitude.
  ///      * Response.details == "longitude" - 'ProfileSearchRequest.longitude' is not a valid location longitude.
  ///      * Response.details == "radius" - 'ProfileSearchRequest.radius' is not a valid radius value.
  ///      * Response.details == "extraData" - 'ProfileSearchRequest.extraData' is too long or it is not a valid value of RegexType.
  /// </summary>
  public sealed partial class ProfileSearchResponse : pb::IMessage<ProfileSearchResponse> {
    private static readonly pb::MessageParser<ProfileSearchResponse> _parser = new pb::MessageParser<ProfileSearchResponse>(() => new ProfileSearchResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileSearchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchResponse(ProfileSearchResponse other) : this() {
      totalRecordCount_ = other.totalRecordCount_;
      maxResponseRecordCount_ = other.maxResponseRecordCount_;
      coveredNodes_ = other.coveredNodes_.Clone();
      profiles_ = other.profiles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchResponse Clone() {
      return new ProfileSearchResponse(this);
    }

    /// <summary>Field number for the "totalRecordCount" field.</summary>
    public const int TotalRecordCountFieldNumber = 1;
    private uint totalRecordCount_;
    /// <summary>
    ///  Total number of profiles that matched the search criteria. Up to 'maxResponseRecordCount' of them are in 'profiles' list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalRecordCount {
      get { return totalRecordCount_; }
      set {
        totalRecordCount_ = value;
      }
    }

    /// <summary>Field number for the "maxResponseRecordCount" field.</summary>
    public const int MaxResponseRecordCountFieldNumber = 2;
    private uint maxResponseRecordCount_;
    /// <summary>
    ///  Limit of the number of results provided. This is equal to 'ProfileSearchRequest.maxResponseRecordCount'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxResponseRecordCount {
      get { return maxResponseRecordCount_; }
      set {
        maxResponseRecordCount_ = value;
      }
    }

    /// <summary>Field number for the "coveredNodes" field.</summary>
    public const int CoveredNodesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_coveredNodes_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> coveredNodes_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///  List of network identifiers of nodes whose profile databases were be used to produce the results, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> CoveredNodes {
      get { return coveredNodes_; }
    }

    /// <summary>Field number for the "profiles" field.</summary>
    public const int ProfilesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Iop.Homenode.IdentityNetworkProfileInformation> _repeated_profiles_codec
        = pb::FieldCodec.ForMessage(34, global::Iop.Homenode.IdentityNetworkProfileInformation.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.IdentityNetworkProfileInformation> profiles_ = new pbc::RepeatedField<global::Iop.Homenode.IdentityNetworkProfileInformation>();
    /// <summary>
    ///  Search results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.IdentityNetworkProfileInformation> Profiles {
      get { return profiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileSearchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileSearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalRecordCount != other.TotalRecordCount) return false;
      if (MaxResponseRecordCount != other.MaxResponseRecordCount) return false;
      if(!coveredNodes_.Equals(other.coveredNodes_)) return false;
      if(!profiles_.Equals(other.profiles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalRecordCount != 0) hash ^= TotalRecordCount.GetHashCode();
      if (MaxResponseRecordCount != 0) hash ^= MaxResponseRecordCount.GetHashCode();
      hash ^= coveredNodes_.GetHashCode();
      hash ^= profiles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalRecordCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalRecordCount);
      }
      if (MaxResponseRecordCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxResponseRecordCount);
      }
      coveredNodes_.WriteTo(output, _repeated_coveredNodes_codec);
      profiles_.WriteTo(output, _repeated_profiles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalRecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalRecordCount);
      }
      if (MaxResponseRecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxResponseRecordCount);
      }
      size += coveredNodes_.CalculateSize(_repeated_coveredNodes_codec);
      size += profiles_.CalculateSize(_repeated_profiles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileSearchResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalRecordCount != 0) {
        TotalRecordCount = other.TotalRecordCount;
      }
      if (other.MaxResponseRecordCount != 0) {
        MaxResponseRecordCount = other.MaxResponseRecordCount;
      }
      coveredNodes_.Add(other.coveredNodes_);
      profiles_.Add(other.profiles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalRecordCount = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxResponseRecordCount = input.ReadUInt32();
            break;
          }
          case 26: {
            coveredNodes_.AddEntriesFrom(input, _repeated_coveredNodes_codec);
            break;
          }
          case 34: {
            profiles_.AddEntriesFrom(input, _repeated_profiles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Information about a single profile record from a profile search query.
  /// </summary>
  public sealed partial class IdentityNetworkProfileInformation : pb::IMessage<IdentityNetworkProfileInformation> {
    private static readonly pb::MessageParser<IdentityNetworkProfileInformation> _parser = new pb::MessageParser<IdentityNetworkProfileInformation>(() => new IdentityNetworkProfileInformation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdentityNetworkProfileInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityNetworkProfileInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityNetworkProfileInformation(IdentityNetworkProfileInformation other) : this() {
      isHosted_ = other.isHosted_;
      neighborNodeNetworkId_ = other.neighborNodeNetworkId_;
      isOnline_ = other.isOnline_;
      version_ = other.version_;
      identityPublicKey_ = other.identityPublicKey_;
      type_ = other.type_;
      name_ = other.name_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      extraData_ = other.extraData_;
      thumbnailImage_ = other.thumbnailImage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityNetworkProfileInformation Clone() {
      return new IdentityNetworkProfileInformation(this);
    }

    /// <summary>Field number for the "isHosted" field.</summary>
    public const int IsHostedFieldNumber = 1;
    private bool isHosted_;
    /// <summary>
    ///  True if the requested identity is a customer of the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHosted {
      get { return isHosted_; }
      set {
        isHosted_ = value;
      }
    }

    /// <summary>Field number for the "neighborNodeNetworkId" field.</summary>
    public const int NeighborNodeNetworkIdFieldNumber = 2;
    private pb::ByteString neighborNodeNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'isHosted' is false, this field contains the network ID of the neighbor node that is a home node of the target profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NeighborNodeNetworkId {
      get { return neighborNodeNetworkId_; }
      set {
        neighborNodeNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isOnline" field.</summary>
    public const int IsOnlineFieldNumber = 3;
    private bool isOnline_;
    /// <summary>
    ///  If 'isHosted' is true, this is true if the requested identity is currently online.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. Version of the profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identityPublicKey" field.</summary>
    public const int IdentityPublicKeyFieldNumber = 5;
    private pb::ByteString identityPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  The identity's public key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityPublicKey {
      get { return identityPublicKey_; }
      set {
        identityPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private string type_ = "";
    /// <summary>
    ///  The identity's type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    /// <summary>
    ///  The identity's name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 8;
    private int latitude_;
    /// <summary>
    ///  LocationType. The identity's GPS location latitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 9;
    private int longitude_;
    /// <summary>
    ///  LocationType. The identity's GPS location longitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 10;
    private string extraData_ = "";
    /// <summary>
    ///  The identity's extra data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnailImage" field.</summary>
    public const int ThumbnailImageFieldNumber = 11;
    private pb::ByteString thumbnailImage_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'ProfileSearchRequest.includeThumbnailImages' was set, this contains the identity's thumbnail image, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThumbnailImage {
      get { return thumbnailImage_; }
      set {
        thumbnailImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdentityNetworkProfileInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdentityNetworkProfileInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsHosted != other.IsHosted) return false;
      if (NeighborNodeNetworkId != other.NeighborNodeNetworkId) return false;
      if (IsOnline != other.IsOnline) return false;
      if (Version != other.Version) return false;
      if (IdentityPublicKey != other.IdentityPublicKey) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (ExtraData != other.ExtraData) return false;
      if (ThumbnailImage != other.ThumbnailImage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsHosted != false) hash ^= IsHosted.GetHashCode();
      if (NeighborNodeNetworkId.Length != 0) hash ^= NeighborNodeNetworkId.GetHashCode();
      if (IsOnline != false) hash ^= IsOnline.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (IdentityPublicKey.Length != 0) hash ^= IdentityPublicKey.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Latitude != 0) hash ^= Latitude.GetHashCode();
      if (Longitude != 0) hash ^= Longitude.GetHashCode();
      if (ExtraData.Length != 0) hash ^= ExtraData.GetHashCode();
      if (ThumbnailImage.Length != 0) hash ^= ThumbnailImage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsHosted != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsHosted);
      }
      if (NeighborNodeNetworkId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NeighborNodeNetworkId);
      }
      if (IsOnline != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsOnline);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Version);
      }
      if (IdentityPublicKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(IdentityPublicKey);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (Latitude != 0) {
        output.WriteRawTag(69);
        output.WriteSFixed32(Latitude);
      }
      if (Longitude != 0) {
        output.WriteRawTag(77);
        output.WriteSFixed32(Longitude);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ExtraData);
      }
      if (ThumbnailImage.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(ThumbnailImage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsHosted != false) {
        size += 1 + 1;
      }
      if (NeighborNodeNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NeighborNodeNetworkId);
      }
      if (IsOnline != false) {
        size += 1 + 1;
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (IdentityPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityPublicKey);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Latitude != 0) {
        size += 1 + 4;
      }
      if (Longitude != 0) {
        size += 1 + 4;
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraData);
      }
      if (ThumbnailImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThumbnailImage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdentityNetworkProfileInformation other) {
      if (other == null) {
        return;
      }
      if (other.IsHosted != false) {
        IsHosted = other.IsHosted;
      }
      if (other.NeighborNodeNetworkId.Length != 0) {
        NeighborNodeNetworkId = other.NeighborNodeNetworkId;
      }
      if (other.IsOnline != false) {
        IsOnline = other.IsOnline;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.IdentityPublicKey.Length != 0) {
        IdentityPublicKey = other.IdentityPublicKey;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Latitude != 0) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0) {
        Longitude = other.Longitude;
      }
      if (other.ExtraData.Length != 0) {
        ExtraData = other.ExtraData;
      }
      if (other.ThumbnailImage.Length != 0) {
        ThumbnailImage = other.ThumbnailImage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsHosted = input.ReadBool();
            break;
          }
          case 18: {
            NeighborNodeNetworkId = input.ReadBytes();
            break;
          }
          case 24: {
            IsOnline = input.ReadBool();
            break;
          }
          case 34: {
            Version = input.ReadBytes();
            break;
          }
          case 42: {
            IdentityPublicKey = input.ReadBytes();
            break;
          }
          case 50: {
            Type = input.ReadString();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 69: {
            Latitude = input.ReadSFixed32();
            break;
          }
          case 77: {
            Longitude = input.ReadSFixed32();
            break;
          }
          case 82: {
            ExtraData = input.ReadString();
            break;
          }
          case 90: {
            ThumbnailImage = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Request to get another part from the search query.
  ///
  ///  This request only makes sense only if the client previously sent ProfileSearchRequest to the node and the search result contained
  ///  more records than the node provided in the ProfileSearchResponse, and the search results have not expired yet.
  ///
  ///  Roles: clNonCustomer, clCustomer
  ///
  ///  Conversation status: ConversationStarted, Verified, Authenticated
  /// </summary>
  public sealed partial class ProfileSearchPartRequest : pb::IMessage<ProfileSearchPartRequest> {
    private static readonly pb::MessageParser<ProfileSearchPartRequest> _parser = new pb::MessageParser<ProfileSearchPartRequest>(() => new ProfileSearchPartRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileSearchPartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartRequest(ProfileSearchPartRequest other) : this() {
      recordIndex_ = other.recordIndex_;
      recordCount_ = other.recordCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartRequest Clone() {
      return new ProfileSearchPartRequest(this);
    }

    /// <summary>Field number for the "recordIndex" field.</summary>
    public const int RecordIndexFieldNumber = 1;
    private uint recordIndex_;
    /// <summary>
    ///  Zero-based record index of the first result to retrieve. It has to be an integer between 0 and 'ProfileSearchResponse.totalRecordCount' - 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordIndex {
      get { return recordIndex_; }
      set {
        recordIndex_ = value;
      }
    }

    /// <summary>Field number for the "recordCount" field.</summary>
    public const int RecordCountFieldNumber = 2;
    private uint recordCount_;
    /// <summary>
    ///  Number of results to obtain. 'recordIndex' + 'recordCount' must not be greater than 'ProfileSearchResponse.totalRecordCount'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordCount {
      get { return recordCount_; }
      set {
        recordCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileSearchPartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileSearchPartRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordIndex != other.RecordIndex) return false;
      if (RecordCount != other.RecordCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordIndex != 0) hash ^= RecordIndex.GetHashCode();
      if (RecordCount != 0) hash ^= RecordCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RecordIndex);
      }
      if (RecordCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RecordCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordIndex);
      }
      if (RecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileSearchPartRequest other) {
      if (other == null) {
        return;
      }
      if (other.RecordIndex != 0) {
        RecordIndex = other.RecordIndex;
      }
      if (other.RecordCount != 0) {
        RecordCount = other.RecordCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            RecordCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to ProfileSearchPartRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_AVAILABLE - No cached search results are available. Either the client did not send ProfileSearchRequest previously
  ///                            in this session, or its results have expired already.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "recordIndex" - 'ProfileSearchRequest.recordIndex' is not a valid index of the result.
  ///      * Response.details == "recordCount" - 'ProfileSearchRequest.recordCount' is not a valid number of results to obtain in combination with 'ProfileSearchRequest.recordIndex'.
  /// </summary>
  public sealed partial class ProfileSearchPartResponse : pb::IMessage<ProfileSearchPartResponse> {
    private static readonly pb::MessageParser<ProfileSearchPartResponse> _parser = new pb::MessageParser<ProfileSearchPartResponse>(() => new ProfileSearchPartResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileSearchPartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartResponse(ProfileSearchPartResponse other) : this() {
      recordIndex_ = other.recordIndex_;
      recordCount_ = other.recordCount_;
      profiles_ = other.profiles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileSearchPartResponse Clone() {
      return new ProfileSearchPartResponse(this);
    }

    /// <summary>Field number for the "recordIndex" field.</summary>
    public const int RecordIndexFieldNumber = 1;
    private uint recordIndex_;
    /// <summary>
    ///  Index of the first result. Copy of 'ProfileSearchPartRequest.recordIndex' value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordIndex {
      get { return recordIndex_; }
      set {
        recordIndex_ = value;
      }
    }

    /// <summary>Field number for the "recordCount" field.</summary>
    public const int RecordCountFieldNumber = 2;
    private uint recordCount_;
    /// <summary>
    ///  Number of results. Copy of 'ProfileSearchPartRequest.recordCount' value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordCount {
      get { return recordCount_; }
      set {
        recordCount_ = value;
      }
    }

    /// <summary>Field number for the "profiles" field.</summary>
    public const int ProfilesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Iop.Homenode.IdentityNetworkProfileInformation> _repeated_profiles_codec
        = pb::FieldCodec.ForMessage(26, global::Iop.Homenode.IdentityNetworkProfileInformation.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.IdentityNetworkProfileInformation> profiles_ = new pbc::RepeatedField<global::Iop.Homenode.IdentityNetworkProfileInformation>();
    /// <summary>
    ///  Search results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.IdentityNetworkProfileInformation> Profiles {
      get { return profiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileSearchPartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileSearchPartResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordIndex != other.RecordIndex) return false;
      if (RecordCount != other.RecordCount) return false;
      if(!profiles_.Equals(other.profiles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordIndex != 0) hash ^= RecordIndex.GetHashCode();
      if (RecordCount != 0) hash ^= RecordCount.GetHashCode();
      hash ^= profiles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RecordIndex);
      }
      if (RecordCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RecordCount);
      }
      profiles_.WriteTo(output, _repeated_profiles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordIndex);
      }
      if (RecordCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordCount);
      }
      size += profiles_.CalculateSize(_repeated_profiles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileSearchPartResponse other) {
      if (other == null) {
        return;
      }
      if (other.RecordIndex != 0) {
        RecordIndex = other.RecordIndex;
      }
      if (other.RecordCount != 0) {
        RecordCount = other.RecordCount;
      }
      profiles_.Add(other.profiles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            RecordCount = input.ReadUInt32();
            break;
          }
          case 26: {
            profiles_.AddEntriesFrom(input, _repeated_profiles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A customer client announces a relation between its identity and another identity using a relationship card.
  ///
  ///  The 'cardApplication' field is signed with a signature in 'ConversationRequest.signature'. This signature can be used
  ///  to prove that the card recipient wanted to use the card for the given purpose. The signature on the card of the card's issuer 
  ///  then can be used to prove that the issuer issued the card for the recipient. The customer's public key has to be equal 
  ///  to the card's recipient public key.
  ///
  ///  Each node is allowed to define its own limit of number of relations that a single identity can have.
  ///  However, this limit should not exceed the maximal limit of 2,000 relations, which is given by the maximal protocol message size.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class AddRelatedIdentityRequest : pb::IMessage<AddRelatedIdentityRequest> {
    private static readonly pb::MessageParser<AddRelatedIdentityRequest> _parser = new pb::MessageParser<AddRelatedIdentityRequest>(() => new AddRelatedIdentityRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddRelatedIdentityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityRequest(AddRelatedIdentityRequest other) : this() {
      CardApplication = other.cardApplication_ != null ? other.CardApplication.Clone() : null;
      SignedCard = other.signedCard_ != null ? other.SignedCard.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityRequest Clone() {
      return new AddRelatedIdentityRequest(this);
    }

    /// <summary>Field number for the "cardApplication" field.</summary>
    public const int CardApplicationFieldNumber = 1;
    private global::Iop.Homenode.CardApplicationInformation cardApplication_;
    /// <summary>
    ///  Description of the relationship, which must correspond to the given 'card' - i.e. 'cardApplication.cardId' 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CardApplicationInformation CardApplication {
      get { return cardApplication_; }
      set {
        cardApplication_ = value;
      }
    }

    /// <summary>Field number for the "signedCard" field.</summary>
    public const int SignedCardFieldNumber = 2;
    private global::Iop.Homenode.SignedRelationshipCard signedCard_;
    /// <summary>
    ///  has to match 'signedCard.card.cardId'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.SignedRelationshipCard SignedCard {
      get { return signedCard_; }
      set {
        signedCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddRelatedIdentityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddRelatedIdentityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardApplication, other.CardApplication)) return false;
      if (!object.Equals(SignedCard, other.SignedCard)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardApplication_ != null) hash ^= CardApplication.GetHashCode();
      if (signedCard_ != null) hash ^= SignedCard.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cardApplication_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardApplication);
      }
      if (signedCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SignedCard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardApplication_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardApplication);
      }
      if (signedCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedCard);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddRelatedIdentityRequest other) {
      if (other == null) {
        return;
      }
      if (other.cardApplication_ != null) {
        if (cardApplication_ == null) {
          cardApplication_ = new global::Iop.Homenode.CardApplicationInformation();
        }
        CardApplication.MergeFrom(other.CardApplication);
      }
      if (other.signedCard_ != null) {
        if (signedCard_ == null) {
          signedCard_ = new global::Iop.Homenode.SignedRelationshipCard();
        }
        SignedCard.MergeFrom(other.SignedCard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cardApplication_ == null) {
              cardApplication_ = new global::Iop.Homenode.CardApplicationInformation();
            }
            input.ReadMessage(cardApplication_);
            break;
          }
          case 18: {
            if (signedCard_ == null) {
              signedCard_ = new global::Iop.Homenode.SignedRelationshipCard();
            }
            input.ReadMessage(signedCard_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to AddRelatedIdentityRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_QUOTA_EXCEEDED - The caller has reached its limit for a number of related identities on its profile.
  ///    * ERROR_INVALID_SIGNATURE - The client's signature of the 'AddRelatedIdentityRequest.cardApplication' in 'ConversationRequest.signature' is not valid.
  ///    * ERROR_ALREADY_EXISTS - A relationship with application identifier equal to 'AddRelatedIdentityRequest.cardApplication.applicationId' already exists.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "cardApplication.cardId" - 'AddRelatedIdentityRequest.cardApplication.cardId' does not match 'AddRelatedIdentityRequest.signedCard.card.cardId'.
  ///      * Response.details == "cardApplication.applicationId" - 'AddRelatedIdentityRequest.cardApplication.applicationId' is not a valid application identifier.
  ///      * Response.details == "signedCard.issuerSignature" - 'AddRelatedIdentityRequest.signedCard.issuerSignature' is not a valid signature of 'AddRelatedIdentityRequest.signedCard.card' structure
  ///                                                           using private key of the issuer whose public key is 'AddRelatedIdentityRequest.signedCard.card.issuerPublicKey'.
  ///      * Response.details == "signedCard.card.cardId" - 'AddRelatedIdentityRequest.signedCard.card.cardId' is not a valid SHA256 hash of 'AddRelatedIdentityRequest.signedCard.card' structure.
  ///      * Response.details == "signedCard.card.version" - 'AddRelatedIdentityRequest.signedCard.card.version' is not a valid card version.
  ///      * Response.details == "signedCard.card.type" - 'AddRelatedIdentityRequest.signedCard.card.type' is not a valid card type.
  ///      * Response.details == "signedCard.card.issuerPublicKey" - 'AddRelatedIdentityRequest.signedCard.card.issuerPublicKey' is not a valid public key.
  ///      * Response.details == "signedCard.card.recipientPublicKey" - 'AddRelatedIdentityRequest.signedCard.card.recipientPublicKey' is not the public key of the caller.
  ///      * Response.details == "signedCard.card.validFrom" - 'AddRelatedIdentityRequest.signedCard.card.validFrom' is greater than 'AddRelatedIdentityRequest.signedCard.card.validTo'.
  /// </summary>
  public sealed partial class AddRelatedIdentityResponse : pb::IMessage<AddRelatedIdentityResponse> {
    private static readonly pb::MessageParser<AddRelatedIdentityResponse> _parser = new pb::MessageParser<AddRelatedIdentityResponse>(() => new AddRelatedIdentityResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddRelatedIdentityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityResponse(AddRelatedIdentityResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRelatedIdentityResponse Clone() {
      return new AddRelatedIdentityResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddRelatedIdentityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddRelatedIdentityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddRelatedIdentityResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A customer client removes the announcement of a relationship between its identity and another identity.
  ///
  ///  Roles: clCustomer
  ///
  ///  Conversation status: Authenticated
  /// </summary>
  public sealed partial class RemoveRelatedIdentityRequest : pb::IMessage<RemoveRelatedIdentityRequest> {
    private static readonly pb::MessageParser<RemoveRelatedIdentityRequest> _parser = new pb::MessageParser<RemoveRelatedIdentityRequest>(() => new RemoveRelatedIdentityRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveRelatedIdentityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityRequest(RemoveRelatedIdentityRequest other) : this() {
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityRequest Clone() {
      return new RemoveRelatedIdentityRequest(this);
    }

    /// <summary>Field number for the "applicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 1;
    private pb::ByteString applicationId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Identifier of the card application to remove. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveRelatedIdentityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveRelatedIdentityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicationId.Length != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveRelatedIdentityRequest other) {
      if (other == null) {
        return;
      }
      if (other.ApplicationId.Length != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ApplicationId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to RemoveRelatedIdentityRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_NOT_FOUND - A relationship with application identifier equal to 'AddRelatedIdentityRequest.cardApplication.applicationId' was not found.
  /// </summary>
  public sealed partial class RemoveRelatedIdentityResponse : pb::IMessage<RemoveRelatedIdentityResponse> {
    private static readonly pb::MessageParser<RemoveRelatedIdentityResponse> _parser = new pb::MessageParser<RemoveRelatedIdentityResponse>(() => new RemoveRelatedIdentityResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveRelatedIdentityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityResponse(RemoveRelatedIdentityResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRelatedIdentityResponse Clone() {
      return new RemoveRelatedIdentityResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveRelatedIdentityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveRelatedIdentityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveRelatedIdentityResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Description of a relationship card application. It consists of a card identifier, which is a hash of the card data
  ///  and the 'applicationId', which binds the use of the card with some other object, transaction, or action, which is specific 
  ///  for the given use of the card.
  /// </summary>
  public sealed partial class CardApplicationInformation : pb::IMessage<CardApplicationInformation> {
    private static readonly pb::MessageParser<CardApplicationInformation> _parser = new pb::MessageParser<CardApplicationInformation>(() => new CardApplicationInformation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardApplicationInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardApplicationInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardApplicationInformation(CardApplicationInformation other) : this() {
      cardId_ = other.cardId_;
      applicationId_ = other.applicationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardApplicationInformation Clone() {
      return new CardApplicationInformation(this);
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 1;
    private pb::ByteString cardId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Identifier of a relationship card. See 'RelationshipCard.cardId'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CardId {
      get { return cardId_; }
      set {
        cardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "applicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 2;
    private pb::ByteString applicationId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Unique identifier of the action that represents using the card. This is used to bind the application of the card 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardApplicationInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardApplicationInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId.Length != 0) hash ^= CardId.GetHashCode();
      if (ApplicationId.Length != 0) hash ^= ApplicationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CardId);
      }
      if (ApplicationId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ApplicationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CardId);
      }
      if (ApplicationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ApplicationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardApplicationInformation other) {
      if (other == null) {
        return;
      }
      if (other.CardId.Length != 0) {
        CardId = other.CardId;
      }
      if (other.ApplicationId.Length != 0) {
        ApplicationId = other.ApplicationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CardId = input.ReadBytes();
            break;
          }
          case 18: {
            ApplicationId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  Description of a relationship card signed by its issuer. Only the identifier of the card is signed, but since this is a SHA256 
  ///  hash of all the card's fields (except for the ID itself), the signature of the identifier effectively signs the whole card information.
  /// </summary>
  public sealed partial class SignedRelationshipCard : pb::IMessage<SignedRelationshipCard> {
    private static readonly pb::MessageParser<SignedRelationshipCard> _parser = new pb::MessageParser<SignedRelationshipCard>(() => new SignedRelationshipCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignedRelationshipCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedRelationshipCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedRelationshipCard(SignedRelationshipCard other) : this() {
      Card = other.card_ != null ? other.Card.Clone() : null;
      issuerSignature_ = other.issuerSignature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedRelationshipCard Clone() {
      return new SignedRelationshipCard(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Iop.Homenode.RelationshipCard card_;
    /// <summary>
    ///  Description of the relationship card.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.RelationshipCard Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "issuerSignature" field.</summary>
    public const int IssuerSignatureFieldNumber = 2;
    private pb::ByteString issuerSignature_ = pb::ByteString.Empty;
    /// <summary>
    ///  Signature of 'card.cardId' value in raw format using private key of the issuer of the card.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IssuerSignature {
      get { return issuerSignature_; }
      set {
        issuerSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignedRelationshipCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignedRelationshipCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (IssuerSignature != other.IssuerSignature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (IssuerSignature.Length != 0) hash ^= IssuerSignature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (IssuerSignature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(IssuerSignature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (IssuerSignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IssuerSignature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignedRelationshipCard other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          card_ = new global::Iop.Homenode.RelationshipCard();
        }
        Card.MergeFrom(other.Card);
      }
      if (other.IssuerSignature.Length != 0) {
        IssuerSignature = other.IssuerSignature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (card_ == null) {
              card_ = new global::Iop.Homenode.RelationshipCard();
            }
            input.ReadMessage(card_);
            break;
          }
          case 18: {
            IssuerSignature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Description of a relationship card.
  /// </summary>
  public sealed partial class RelationshipCard : pb::IMessage<RelationshipCard> {
    private static readonly pb::MessageParser<RelationshipCard> _parser = new pb::MessageParser<RelationshipCard>(() => new RelationshipCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RelationshipCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RelationshipCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RelationshipCard(RelationshipCard other) : this() {
      cardId_ = other.cardId_;
      version_ = other.version_;
      type_ = other.type_;
      validFrom_ = other.validFrom_;
      validTo_ = other.validTo_;
      issuerPublicKey_ = other.issuerPublicKey_;
      recipientPublicKey_ = other.recipientPublicKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RelationshipCard Clone() {
      return new RelationshipCard(this);
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 1;
    private pb::ByteString cardId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Identifier of a relationship card is an SHA256 hash of the RelationshipCard structure in Google Protobuf v3 encoding 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CardId {
      get { return cardId_; }
      set {
        cardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  with cardId initialized to a byte array of 32 zero bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    ///  Type of the relationship card. This is an application defined value. Max 64 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "validFrom" field.</summary>
    public const int ValidFromFieldNumber = 4;
    private long validFrom_;
    /// <summary>
    ///  TimestampType. Time from which the card is valid. It must not be greater than 'validTo'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValidFrom {
      get { return validFrom_; }
      set {
        validFrom_ = value;
      }
    }

    /// <summary>Field number for the "validTo" field.</summary>
    public const int ValidToFieldNumber = 5;
    private long validTo_;
    /// <summary>
    ///  TimestampType. Time after which the card is not valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValidTo {
      get { return validTo_; }
      set {
        validTo_ = value;
      }
    }

    /// <summary>Field number for the "issuerPublicKey" field.</summary>
    public const int IssuerPublicKeyFieldNumber = 6;
    private pb::ByteString issuerPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the issuer of the card. Max 128 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IssuerPublicKey {
      get { return issuerPublicKey_; }
      set {
        issuerPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recipientPublicKey" field.</summary>
    public const int RecipientPublicKeyFieldNumber = 7;
    private pb::ByteString recipientPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the recipient of the card. Max 128 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecipientPublicKey {
      get { return recipientPublicKey_; }
      set {
        recipientPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RelationshipCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RelationshipCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (Version != other.Version) return false;
      if (Type != other.Type) return false;
      if (ValidFrom != other.ValidFrom) return false;
      if (ValidTo != other.ValidTo) return false;
      if (IssuerPublicKey != other.IssuerPublicKey) return false;
      if (RecipientPublicKey != other.RecipientPublicKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId.Length != 0) hash ^= CardId.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (ValidFrom != 0L) hash ^= ValidFrom.GetHashCode();
      if (ValidTo != 0L) hash ^= ValidTo.GetHashCode();
      if (IssuerPublicKey.Length != 0) hash ^= IssuerPublicKey.GetHashCode();
      if (RecipientPublicKey.Length != 0) hash ^= RecipientPublicKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CardId);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Version);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (ValidFrom != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(ValidFrom);
      }
      if (ValidTo != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(ValidTo);
      }
      if (IssuerPublicKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(IssuerPublicKey);
      }
      if (RecipientPublicKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(RecipientPublicKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CardId);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (ValidFrom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ValidFrom);
      }
      if (ValidTo != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ValidTo);
      }
      if (IssuerPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IssuerPublicKey);
      }
      if (RecipientPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecipientPublicKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RelationshipCard other) {
      if (other == null) {
        return;
      }
      if (other.CardId.Length != 0) {
        CardId = other.CardId;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.ValidFrom != 0L) {
        ValidFrom = other.ValidFrom;
      }
      if (other.ValidTo != 0L) {
        ValidTo = other.ValidTo;
      }
      if (other.IssuerPublicKey.Length != 0) {
        IssuerPublicKey = other.IssuerPublicKey;
      }
      if (other.RecipientPublicKey.Length != 0) {
        RecipientPublicKey = other.RecipientPublicKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CardId = input.ReadBytes();
            break;
          }
          case 18: {
            Version = input.ReadBytes();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            ValidFrom = input.ReadSInt64();
            break;
          }
          case 40: {
            ValidTo = input.ReadSInt64();
            break;
          }
          case 50: {
            IssuerPublicKey = input.ReadBytes();
            break;
          }
          case 58: {
            RecipientPublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  Obtains list of identity's relationships that match the given criteria.
  ///
  ///  Roles: clNonCustomer, clCustomer
  /// </summary>
  public sealed partial class GetIdentityRelationshipsInformationRequest : pb::IMessage<GetIdentityRelationshipsInformationRequest> {
    private static readonly pb::MessageParser<GetIdentityRelationshipsInformationRequest> _parser = new pb::MessageParser<GetIdentityRelationshipsInformationRequest>(() => new GetIdentityRelationshipsInformationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetIdentityRelationshipsInformationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationRequest(GetIdentityRelationshipsInformationRequest other) : this() {
      identityNetworkId_ = other.identityNetworkId_;
      includeInvalid_ = other.includeInvalid_;
      type_ = other.type_;
      specificIssuer_ = other.specificIssuer_;
      issuerNetworkId_ = other.issuerNetworkId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationRequest Clone() {
      return new GetIdentityRelationshipsInformationRequest(this);
    }

    /// <summary>Field number for the "identityNetworkId" field.</summary>
    public const int IdentityNetworkIdFieldNumber = 1;
    private pb::ByteString identityNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Identity's network identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityNetworkId {
      get { return identityNetworkId_; }
      set {
        identityNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "includeInvalid" field.</summary>
    public const int IncludeInvalidFieldNumber = 2;
    private bool includeInvalid_;
    /// <summary>
    ///  If set to true, the response may include relationships which cards are no longer valid or not yet valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeInvalid {
      get { return includeInvalid_; }
      set {
        includeInvalid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    ///  WildcardType or empty string. If not empty, the node will only return relationships which card types 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "specificIssuer" field.</summary>
    public const int SpecificIssuerFieldNumber = 4;
    private bool specificIssuer_;
    /// <summary>
    ///  If set to true, the response will only include relationships which cards were issued by issuer with network identifier equal to 'issuerNetworkId'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpecificIssuer {
      get { return specificIssuer_; }
      set {
        specificIssuer_ = value;
      }
    }

    /// <summary>Field number for the "issuerNetworkId" field.</summary>
    public const int IssuerNetworkIdFieldNumber = 5;
    private pb::ByteString issuerNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'specificIssuer' is true, this is the network identifier of the card issuer whose relationships with the target identity are being queried.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IssuerNetworkId {
      get { return issuerNetworkId_; }
      set {
        issuerNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetIdentityRelationshipsInformationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetIdentityRelationshipsInformationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityNetworkId != other.IdentityNetworkId) return false;
      if (IncludeInvalid != other.IncludeInvalid) return false;
      if (Type != other.Type) return false;
      if (SpecificIssuer != other.SpecificIssuer) return false;
      if (IssuerNetworkId != other.IssuerNetworkId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityNetworkId.Length != 0) hash ^= IdentityNetworkId.GetHashCode();
      if (IncludeInvalid != false) hash ^= IncludeInvalid.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (SpecificIssuer != false) hash ^= SpecificIssuer.GetHashCode();
      if (IssuerNetworkId.Length != 0) hash ^= IssuerNetworkId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityNetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IdentityNetworkId);
      }
      if (IncludeInvalid != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeInvalid);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (SpecificIssuer != false) {
        output.WriteRawTag(32);
        output.WriteBool(SpecificIssuer);
      }
      if (IssuerNetworkId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(IssuerNetworkId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityNetworkId);
      }
      if (IncludeInvalid != false) {
        size += 1 + 1;
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (SpecificIssuer != false) {
        size += 1 + 1;
      }
      if (IssuerNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IssuerNetworkId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetIdentityRelationshipsInformationRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdentityNetworkId.Length != 0) {
        IdentityNetworkId = other.IdentityNetworkId;
      }
      if (other.IncludeInvalid != false) {
        IncludeInvalid = other.IncludeInvalid;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.SpecificIssuer != false) {
        SpecificIssuer = other.SpecificIssuer;
      }
      if (other.IssuerNetworkId.Length != 0) {
        IssuerNetworkId = other.IssuerNetworkId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityNetworkId = input.ReadBytes();
            break;
          }
          case 16: {
            IncludeInvalid = input.ReadBool();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            SpecificIssuer = input.ReadBool();
            break;
          }
          case 42: {
            IssuerNetworkId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to GetIdentityRelationshipsInformationRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "type" - 'GetIdentityRelationshipsInformationRequest.type' is too long.
  /// </summary>
  public sealed partial class GetIdentityRelationshipsInformationResponse : pb::IMessage<GetIdentityRelationshipsInformationResponse> {
    private static readonly pb::MessageParser<GetIdentityRelationshipsInformationResponse> _parser = new pb::MessageParser<GetIdentityRelationshipsInformationResponse>(() => new GetIdentityRelationshipsInformationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetIdentityRelationshipsInformationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationResponse(GetIdentityRelationshipsInformationResponse other) : this() {
      relationships_ = other.relationships_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetIdentityRelationshipsInformationResponse Clone() {
      return new GetIdentityRelationshipsInformationResponse(this);
    }

    /// <summary>Field number for the "relationships" field.</summary>
    public const int RelationshipsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Homenode.IdentityRelationship> _repeated_relationships_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Homenode.IdentityRelationship.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.IdentityRelationship> relationships_ = new pbc::RepeatedField<global::Iop.Homenode.IdentityRelationship>();
    /// <summary>
    ///  List of all matching identity relationships together with their relationship cards.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.IdentityRelationship> Relationships {
      get { return relationships_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetIdentityRelationshipsInformationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetIdentityRelationshipsInformationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!relationships_.Equals(other.relationships_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= relationships_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      relationships_.WriteTo(output, _repeated_relationships_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += relationships_.CalculateSize(_repeated_relationships_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetIdentityRelationshipsInformationResponse other) {
      if (other == null) {
        return;
      }
      relationships_.Add(other.relationships_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            relationships_.AddEntriesFrom(input, _repeated_relationships_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Description of a relationship between two identities together with signature proofs.
  /// </summary>
  public sealed partial class IdentityRelationship : pb::IMessage<IdentityRelationship> {
    private static readonly pb::MessageParser<IdentityRelationship> _parser = new pb::MessageParser<IdentityRelationship>(() => new IdentityRelationship());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdentityRelationship> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityRelationship() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityRelationship(IdentityRelationship other) : this() {
      CardApplication = other.cardApplication_ != null ? other.CardApplication.Clone() : null;
      cardApplicationSignature_ = other.cardApplicationSignature_;
      Card = other.card_ != null ? other.Card.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityRelationship Clone() {
      return new IdentityRelationship(this);
    }

    /// <summary>Field number for the "cardApplication" field.</summary>
    public const int CardApplicationFieldNumber = 1;
    private global::Iop.Homenode.CardApplicationInformation cardApplication_;
    /// <summary>
    ///  Relationship card application.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.CardApplicationInformation CardApplication {
      get { return cardApplication_; }
      set {
        cardApplication_ = value;
      }
    }

    /// <summary>Field number for the "cardApplicationSignature" field.</summary>
    public const int CardApplicationSignatureFieldNumber = 2;
    private pb::ByteString cardApplicationSignature_ = pb::ByteString.Empty;
    /// <summary>
    ///  Relationship card recipient's signature of 'cardApplication' structure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CardApplicationSignature {
      get { return cardApplicationSignature_; }
      set {
        cardApplicationSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 3;
    private global::Iop.Homenode.SignedRelationshipCard card_;
    /// <summary>
    ///  Relationship card signed by its issuer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.SignedRelationshipCard Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdentityRelationship);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdentityRelationship other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardApplication, other.CardApplication)) return false;
      if (CardApplicationSignature != other.CardApplicationSignature) return false;
      if (!object.Equals(Card, other.Card)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardApplication_ != null) hash ^= CardApplication.GetHashCode();
      if (CardApplicationSignature.Length != 0) hash ^= CardApplicationSignature.GetHashCode();
      if (card_ != null) hash ^= Card.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cardApplication_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardApplication);
      }
      if (CardApplicationSignature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CardApplicationSignature);
      }
      if (card_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Card);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardApplication_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardApplication);
      }
      if (CardApplicationSignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CardApplicationSignature);
      }
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdentityRelationship other) {
      if (other == null) {
        return;
      }
      if (other.cardApplication_ != null) {
        if (cardApplication_ == null) {
          cardApplication_ = new global::Iop.Homenode.CardApplicationInformation();
        }
        CardApplication.MergeFrom(other.CardApplication);
      }
      if (other.CardApplicationSignature.Length != 0) {
        CardApplicationSignature = other.CardApplicationSignature;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          card_ = new global::Iop.Homenode.SignedRelationshipCard();
        }
        Card.MergeFrom(other.Card);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cardApplication_ == null) {
              cardApplication_ = new global::Iop.Homenode.CardApplicationInformation();
            }
            input.ReadMessage(cardApplication_);
            break;
          }
          case 18: {
            CardApplicationSignature = input.ReadBytes();
            break;
          }
          case 26: {
            if (card_ == null) {
              card_ = new global::Iop.Homenode.SignedRelationshipCard();
            }
            input.ReadMessage(card_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Initiates sharing of the profile database with a neighbor node.
  ///
  ///  Node joining the network needs to contact its neighbors and share its profile database with them. 
  ///  Similarly, nodes that detect a new neighbor in their neighborhood need to contact it and share their 
  ///  profile databases with the new node.
  ///
  ///  Sharing the profile list always goes from one node (the client who sends this request) to the other node 
  ///  (who acts as a server in this session). If the server node wants to share its profile database with 
  ///  the client node, it will initiate the same dialog on its own, acting as a client.
  ///
  ///  Once the requesting node receives StartNeighborhoodInitializationResponse response, it can proceed with 
  ///  NeighborSharedProfileUpdateRequest requests. Once it sends all its profiles to the other party, it has to finish 
  ///  the initialization process using FinishNeighborhoodInitializationRequest. Only then the neighbor 
  ///  will consider the shared profiles as valid and will consider them in its search.
  ///
  ///  If the request is processed successfully, the initialization of the neighbor relationship is started 
  ///  on the opened session and the initialization process has to be finished with FinishNeighborhoodInitializationRequest 
  ///  or it will fail when the connection is terminated. The target node can terminate the initialization process 
  ///  by disconnecting the other party if it takes more than 5 minutes to complete.
  ///
  ///  Roles: ndNeighbor
  ///
  ///  Conversation status: Verified
  /// </summary>
  public sealed partial class StartNeighborhoodInitializationRequest : pb::IMessage<StartNeighborhoodInitializationRequest> {
    private static readonly pb::MessageParser<StartNeighborhoodInitializationRequest> _parser = new pb::MessageParser<StartNeighborhoodInitializationRequest>(() => new StartNeighborhoodInitializationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartNeighborhoodInitializationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationRequest(StartNeighborhoodInitializationRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationRequest Clone() {
      return new StartNeighborhoodInitializationRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartNeighborhoodInitializationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartNeighborhoodInitializationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartNeighborhoodInitializationRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to StartNeighborhoodInitializationRequest.
  ///
  ///  General Error Responses:
  ///    * ERROR_BUSY - Node can use this error code during the neighborhood initialization process to express that it is currently busy 
  ///                   with the neighborhood initialization process with one or more other nodes.
  /// </summary>
  public sealed partial class StartNeighborhoodInitializationResponse : pb::IMessage<StartNeighborhoodInitializationResponse> {
    private static readonly pb::MessageParser<StartNeighborhoodInitializationResponse> _parser = new pb::MessageParser<StartNeighborhoodInitializationResponse>(() => new StartNeighborhoodInitializationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartNeighborhoodInitializationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationResponse(StartNeighborhoodInitializationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartNeighborhoodInitializationResponse Clone() {
      return new StartNeighborhoodInitializationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartNeighborhoodInitializationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartNeighborhoodInitializationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartNeighborhoodInitializationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Node that initiated sharing of the profile database with its neighbor using StartNeighborhoodInitializationRequest 
  ///  uses this request to finish the initialization process. A successful response to this requests means that the profile database 
  ///  is now shared successfully on the target node and it will consider the shared profiles in its search queries.
  ///
  ///  Roles: ndNeighbor
  ///
  ///  Conversation status: Verified
  /// </summary>
  public sealed partial class FinishNeighborhoodInitializationRequest : pb::IMessage<FinishNeighborhoodInitializationRequest> {
    private static readonly pb::MessageParser<FinishNeighborhoodInitializationRequest> _parser = new pb::MessageParser<FinishNeighborhoodInitializationRequest>(() => new FinishNeighborhoodInitializationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinishNeighborhoodInitializationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationRequest(FinishNeighborhoodInitializationRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationRequest Clone() {
      return new FinishNeighborhoodInitializationRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinishNeighborhoodInitializationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinishNeighborhoodInitializationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinishNeighborhoodInitializationRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to StartNeighborhoodInitializationRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_REJECTED - No neighborhood initialization process was not started on this session using StartNeighborhoodInitializationRequest.
  /// </summary>
  public sealed partial class FinishNeighborhoodInitializationResponse : pb::IMessage<FinishNeighborhoodInitializationResponse> {
    private static readonly pb::MessageParser<FinishNeighborhoodInitializationResponse> _parser = new pb::MessageParser<FinishNeighborhoodInitializationResponse>(() => new FinishNeighborhoodInitializationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinishNeighborhoodInitializationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationResponse(FinishNeighborhoodInitializationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNeighborhoodInitializationResponse Clone() {
      return new FinishNeighborhoodInitializationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinishNeighborhoodInitializationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinishNeighborhoodInitializationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinishNeighborhoodInitializationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///  This request is sent by a node to announce a change in one or more of the profiles of its customers.
  ///  This request is also used during the neighborhood initialization to upload the node's profile database to its neighbor.
  ///  If the request is sent outside the neighborhood initialization process, it is considered as a standalone request.
  ///
  ///  Roles: ndNeighbor
  ///
  ///  Conversation status: Verified
  /// </summary>
  public sealed partial class NeighborSharedProfileUpdateRequest : pb::IMessage<NeighborSharedProfileUpdateRequest> {
    private static readonly pb::MessageParser<NeighborSharedProfileUpdateRequest> _parser = new pb::MessageParser<NeighborSharedProfileUpdateRequest>(() => new NeighborSharedProfileUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeighborSharedProfileUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborSharedProfileUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborSharedProfileUpdateRequest(NeighborSharedProfileUpdateRequest other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborSharedProfileUpdateRequest Clone() {
      return new NeighborSharedProfileUpdateRequest(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Homenode.SharedProfileUpdateItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Homenode.SharedProfileUpdateItem.Parser);
    private readonly pbc::RepeatedField<global::Iop.Homenode.SharedProfileUpdateItem> items_ = new pbc::RepeatedField<global::Iop.Homenode.SharedProfileUpdateItem>();
    /// <summary>
    ///  List of profile update items.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Homenode.SharedProfileUpdateItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeighborSharedProfileUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeighborSharedProfileUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeighborSharedProfileUpdateRequest other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to StartNeighborhoodInitializationRequest.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "$index.$field" - All items up to 'NeighborSharedProfileUpdateRequest.items[$index]' (exclusive) were processed correctly
  ///                                              and an error occurred while processing the item with zero-based index $index. Items with index greater 
  ///                                              then $index were not processed. The $field specifies which field was invalid as follows:
  ///        * $field == "add" - Number of shared profiles from the requesting node exceeds the limit.
  ///        * $field == "add.version" - `items[$index].add.version` is not a valid VersionType value.
  ///        * $field == "add.identityPublicKey" - `items[$index].add.identityPublicKey` is not a valid public key value.
  ///        * $field == "add.name" - `items[$index].add.name` is not a valid profile name.
  ///        * $field == "add.type" - `items[$index].add.type` is not a valid identity type.
  ///        * $field == "add.thumbnailImage" - `items[$index].add.thumbnailImage` is not a valid thumbnail image.
  ///        * $field == "add.latitude" - `items[$index].add.latitude` is not a valid latitude value.
  ///        * $field == "add.longitude" - `items[$index].add.longitude` is not a valid longitude value.
  ///        * $field == "add.extraData" - `items[$index].add.extraData` is not a valid extraData value.
  ///        * $field == "change.identityNetworkId" - `items[$index].change.identityNetworkId` does not represent an existing identity.
  ///        * $field == "change.version" - `items[$index].change.version` is not a valid VersionType value.
  ///        * $field == "change.name" - `items[$index].change.name` is not a valid profile name.
  ///        * $field == "change.thumbnailImage" - `items[$index].change.thumbnailImage` is not a valid thumbnail image.
  ///        * $field == "change.latitude" - `items[$index].change.latitude` is not a valid latitude value.
  ///        * $field == "change.longitude" - `items[$index].change.longitude` is not a valid longitude value.
  ///        * $field == "change.extraData" - `items[$index].change.extraData` is not a valid extraData value.
  ///        * $field == "delete.identityNetworkId" - `items[$index].delete.identityNetworkId` does not represent an existing identity.
  /// </summary>
  public sealed partial class NeighborSharedProfileUpdateResponse : pb::IMessage<NeighborSharedProfileUpdateResponse> {
    private static readonly pb::MessageParser<NeighborSharedProfileUpdateResponse> _parser = new pb::MessageParser<NeighborSharedProfileUpdateResponse>(() => new NeighborSharedProfileUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeighborSharedProfileUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborSharedProfileUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborSharedProfileUpdateResponse(NeighborSharedProfileUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeighborSharedProfileUpdateResponse Clone() {
      return new NeighborSharedProfileUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeighborSharedProfileUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeighborSharedProfileUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeighborSharedProfileUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Information about update of a neighborhood's profile.
  /// </summary>
  public sealed partial class SharedProfileUpdateItem : pb::IMessage<SharedProfileUpdateItem> {
    private static readonly pb::MessageParser<SharedProfileUpdateItem> _parser = new pb::MessageParser<SharedProfileUpdateItem>(() => new SharedProfileUpdateItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedProfileUpdateItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileUpdateItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileUpdateItem(SharedProfileUpdateItem other) : this() {
      switch (other.ActionTypeCase) {
        case ActionTypeOneofCase.Add:
          Add = other.Add.Clone();
          break;
        case ActionTypeOneofCase.Change:
          Change = other.Change.Clone();
          break;
        case ActionTypeOneofCase.Delete:
          Delete = other.Delete.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileUpdateItem Clone() {
      return new SharedProfileUpdateItem(this);
    }

    /// <summary>Field number for the "add" field.</summary>
    public const int AddFieldNumber = 1;
    /// <summary>
    ///   * adding a new profile to the database,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.SharedProfileAddItem Add {
      get { return actionTypeCase_ == ActionTypeOneofCase.Add ? (global::Iop.Homenode.SharedProfileAddItem) actionType_ : null; }
      set {
        actionType_ = value;
        actionTypeCase_ = value == null ? ActionTypeOneofCase.None : ActionTypeOneofCase.Add;
      }
    }

    /// <summary>Field number for the "change" field.</summary>
    public const int ChangeFieldNumber = 2;
    /// <summary>
    ///   * changing an existing profile,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.SharedProfileChangeItem Change {
      get { return actionTypeCase_ == ActionTypeOneofCase.Change ? (global::Iop.Homenode.SharedProfileChangeItem) actionType_ : null; }
      set {
        actionType_ = value;
        actionTypeCase_ = value == null ? ActionTypeOneofCase.None : ActionTypeOneofCase.Change;
      }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 3;
    /// <summary>
    ///   * deleting an existing profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Homenode.SharedProfileDeleteItem Delete {
      get { return actionTypeCase_ == ActionTypeOneofCase.Delete ? (global::Iop.Homenode.SharedProfileDeleteItem) actionType_ : null; }
      set {
        actionType_ = value;
        actionTypeCase_ = value == null ? ActionTypeOneofCase.None : ActionTypeOneofCase.Delete;
      }
    }

    private object actionType_;
    /// <summary>Enum of possible cases for the "ActionType" oneof.</summary>
    public enum ActionTypeOneofCase {
      None = 0,
      Add = 1,
      Change = 2,
      Delete = 3,
    }
    private ActionTypeOneofCase actionTypeCase_ = ActionTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionTypeOneofCase ActionTypeCase {
      get { return actionTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionType() {
      actionTypeCase_ = ActionTypeOneofCase.None;
      actionType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedProfileUpdateItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedProfileUpdateItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Add, other.Add)) return false;
      if (!object.Equals(Change, other.Change)) return false;
      if (!object.Equals(Delete, other.Delete)) return false;
      if (ActionTypeCase != other.ActionTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionTypeCase_ == ActionTypeOneofCase.Add) hash ^= Add.GetHashCode();
      if (actionTypeCase_ == ActionTypeOneofCase.Change) hash ^= Change.GetHashCode();
      if (actionTypeCase_ == ActionTypeOneofCase.Delete) hash ^= Delete.GetHashCode();
      hash ^= (int) actionTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actionTypeCase_ == ActionTypeOneofCase.Add) {
        output.WriteRawTag(10);
        output.WriteMessage(Add);
      }
      if (actionTypeCase_ == ActionTypeOneofCase.Change) {
        output.WriteRawTag(18);
        output.WriteMessage(Change);
      }
      if (actionTypeCase_ == ActionTypeOneofCase.Delete) {
        output.WriteRawTag(26);
        output.WriteMessage(Delete);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionTypeCase_ == ActionTypeOneofCase.Add) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Add);
      }
      if (actionTypeCase_ == ActionTypeOneofCase.Change) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Change);
      }
      if (actionTypeCase_ == ActionTypeOneofCase.Delete) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delete);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedProfileUpdateItem other) {
      if (other == null) {
        return;
      }
      switch (other.ActionTypeCase) {
        case ActionTypeOneofCase.Add:
          Add = other.Add;
          break;
        case ActionTypeOneofCase.Change:
          Change = other.Change;
          break;
        case ActionTypeOneofCase.Delete:
          Delete = other.Delete;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Homenode.SharedProfileAddItem subBuilder = new global::Iop.Homenode.SharedProfileAddItem();
            if (actionTypeCase_ == ActionTypeOneofCase.Add) {
              subBuilder.MergeFrom(Add);
            }
            input.ReadMessage(subBuilder);
            Add = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Homenode.SharedProfileChangeItem subBuilder = new global::Iop.Homenode.SharedProfileChangeItem();
            if (actionTypeCase_ == ActionTypeOneofCase.Change) {
              subBuilder.MergeFrom(Change);
            }
            input.ReadMessage(subBuilder);
            Change = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Homenode.SharedProfileDeleteItem subBuilder = new global::Iop.Homenode.SharedProfileDeleteItem();
            if (actionTypeCase_ == ActionTypeOneofCase.Delete) {
              subBuilder.MergeFrom(Delete);
            }
            input.ReadMessage(subBuilder);
            Delete = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Information about newly created profile that is to be shared with a neighbor.
  /// </summary>
  public sealed partial class SharedProfileAddItem : pb::IMessage<SharedProfileAddItem> {
    private static readonly pb::MessageParser<SharedProfileAddItem> _parser = new pb::MessageParser<SharedProfileAddItem>(() => new SharedProfileAddItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedProfileAddItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileAddItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileAddItem(SharedProfileAddItem other) : this() {
      version_ = other.version_;
      identityPublicKey_ = other.identityPublicKey_;
      name_ = other.name_;
      type_ = other.type_;
      setThumbnailImage_ = other.setThumbnailImage_;
      thumbnailImage_ = other.thumbnailImage_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      extraData_ = other.extraData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileAddItem Clone() {
      return new SharedProfileAddItem(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. Version of the profile structure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identityPublicKey" field.</summary>
    public const int IdentityPublicKeyFieldNumber = 2;
    private pb::ByteString identityPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  The identity's public key. Max 128 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityPublicKey {
      get { return identityPublicKey_; }
      set {
        identityPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///  Name of the profile or empty string, max 64 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    /// <summary>
    ///  The identity's type, non-empty string, max 64 bytes long. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "setThumbnailImage" field.</summary>
    public const int SetThumbnailImageFieldNumber = 5;
    private bool setThumbnailImage_;
    /// <summary>
    ///  If true, 'thumbnailImage' has to contain valid image date. If false, 'thumbnailImage' is ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetThumbnailImage {
      get { return setThumbnailImage_; }
      set {
        setThumbnailImage_ = value;
      }
    }

    /// <summary>Field number for the "thumbnailImage" field.</summary>
    public const int ThumbnailImageFieldNumber = 6;
    private pb::ByteString thumbnailImage_ = pb::ByteString.Empty;
    /// <summary>
    ///  If 'setThumbnailImage' is true, this contains profile image in PNG or JPEG format, max 5,120 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThumbnailImage {
      get { return thumbnailImage_; }
      set {
        thumbnailImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 7;
    private int latitude_;
    /// <summary>
    ///  LocationType. GPS location latitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 8;
    private int longitude_;
    /// <summary>
    ///  LocationType. GPS location longitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 9;
    private string extraData_ = "";
    /// <summary>
    ///  Semicolon separated 'key=value' list, or empty string, max 200 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedProfileAddItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedProfileAddItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (IdentityPublicKey != other.IdentityPublicKey) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (SetThumbnailImage != other.SetThumbnailImage) return false;
      if (ThumbnailImage != other.ThumbnailImage) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (ExtraData != other.ExtraData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (IdentityPublicKey.Length != 0) hash ^= IdentityPublicKey.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (SetThumbnailImage != false) hash ^= SetThumbnailImage.GetHashCode();
      if (ThumbnailImage.Length != 0) hash ^= ThumbnailImage.GetHashCode();
      if (Latitude != 0) hash ^= Latitude.GetHashCode();
      if (Longitude != 0) hash ^= Longitude.GetHashCode();
      if (ExtraData.Length != 0) hash ^= ExtraData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (IdentityPublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(IdentityPublicKey);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (SetThumbnailImage != false) {
        output.WriteRawTag(40);
        output.WriteBool(SetThumbnailImage);
      }
      if (ThumbnailImage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ThumbnailImage);
      }
      if (Latitude != 0) {
        output.WriteRawTag(61);
        output.WriteSFixed32(Latitude);
      }
      if (Longitude != 0) {
        output.WriteRawTag(69);
        output.WriteSFixed32(Longitude);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ExtraData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (IdentityPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityPublicKey);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (SetThumbnailImage != false) {
        size += 1 + 1;
      }
      if (ThumbnailImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThumbnailImage);
      }
      if (Latitude != 0) {
        size += 1 + 4;
      }
      if (Longitude != 0) {
        size += 1 + 4;
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedProfileAddItem other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.IdentityPublicKey.Length != 0) {
        IdentityPublicKey = other.IdentityPublicKey;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.SetThumbnailImage != false) {
        SetThumbnailImage = other.SetThumbnailImage;
      }
      if (other.ThumbnailImage.Length != 0) {
        ThumbnailImage = other.ThumbnailImage;
      }
      if (other.Latitude != 0) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0) {
        Longitude = other.Longitude;
      }
      if (other.ExtraData.Length != 0) {
        ExtraData = other.ExtraData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            IdentityPublicKey = input.ReadBytes();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 40: {
            SetThumbnailImage = input.ReadBool();
            break;
          }
          case 50: {
            ThumbnailImage = input.ReadBytes();
            break;
          }
          case 61: {
            Latitude = input.ReadSFixed32();
            break;
          }
          case 69: {
            Longitude = input.ReadSFixed32();
            break;
          }
          case 74: {
            ExtraData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Information about changes in an existing profile data that are to be shared with a neighbor.
  /// </summary>
  public sealed partial class SharedProfileChangeItem : pb::IMessage<SharedProfileChangeItem> {
    private static readonly pb::MessageParser<SharedProfileChangeItem> _parser = new pb::MessageParser<SharedProfileChangeItem>(() => new SharedProfileChangeItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedProfileChangeItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileChangeItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileChangeItem(SharedProfileChangeItem other) : this() {
      identityNetworkId_ = other.identityNetworkId_;
      setVersion_ = other.setVersion_;
      setName_ = other.setName_;
      setThumbnailImage_ = other.setThumbnailImage_;
      setLocation_ = other.setLocation_;
      setExtraData_ = other.setExtraData_;
      version_ = other.version_;
      name_ = other.name_;
      thumbnailImage_ = other.thumbnailImage_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      extraData_ = other.extraData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileChangeItem Clone() {
      return new SharedProfileChangeItem(this);
    }

    /// <summary>Field number for the "identityNetworkId" field.</summary>
    public const int IdentityNetworkIdFieldNumber = 1;
    private pb::ByteString identityNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  The identity's network identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityNetworkId {
      get { return identityNetworkId_; }
      set {
        identityNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "setVersion" field.</summary>
    public const int SetVersionFieldNumber = 2;
    private bool setVersion_;
    /// <summary>
    ///  Profile version should be updated. 'version' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetVersion {
      get { return setVersion_; }
      set {
        setVersion_ = value;
      }
    }

    /// <summary>Field number for the "setName" field.</summary>
    public const int SetNameFieldNumber = 3;
    private bool setName_;
    /// <summary>
    ///  Profile name should be updated. 'name' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetName {
      get { return setName_; }
      set {
        setName_ = value;
      }
    }

    /// <summary>Field number for the "setThumbnailImage" field.</summary>
    public const int SetThumbnailImageFieldNumber = 4;
    private bool setThumbnailImage_;
    /// <summary>
    ///  Profile image should be updated. 'thumbnailImage' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetThumbnailImage {
      get { return setThumbnailImage_; }
      set {
        setThumbnailImage_ = value;
      }
    }

    /// <summary>Field number for the "setLocation" field.</summary>
    public const int SetLocationFieldNumber = 5;
    private bool setLocation_;
    /// <summary>
    ///  Profile location should be updated. 'latitude' and 'longitude' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetLocation {
      get { return setLocation_; }
      set {
        setLocation_ = value;
      }
    }

    /// <summary>Field number for the "setExtraData" field.</summary>
    public const int SetExtraDataFieldNumber = 6;
    private bool setExtraData_;
    /// <summary>
    ///  Profile extra data should be updated. 'extraData' must contain valid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetExtraData {
      get { return setExtraData_; }
      set {
        setExtraData_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 7;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. Version of the profile structure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    /// <summary>
    ///  Name of the profile, non-empty string, max 64 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnailImage" field.</summary>
    public const int ThumbnailImageFieldNumber = 9;
    private pb::ByteString thumbnailImage_ = pb::ByteString.Empty;
    /// <summary>
    ///  Profile thumbnail image in PNG or JPEG format, non-empty binary data, max 5,120 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThumbnailImage {
      get { return thumbnailImage_; }
      set {
        thumbnailImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 10;
    private int latitude_;
    /// <summary>
    ///  LocationType. GPS location latitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 11;
    private int longitude_;
    /// <summary>
    ///  LocationType. GPS location longitude information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 12;
    private string extraData_ = "";
    /// <summary>
    ///  Semicolon separated 'key=value' list, max 200 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedProfileChangeItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedProfileChangeItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityNetworkId != other.IdentityNetworkId) return false;
      if (SetVersion != other.SetVersion) return false;
      if (SetName != other.SetName) return false;
      if (SetThumbnailImage != other.SetThumbnailImage) return false;
      if (SetLocation != other.SetLocation) return false;
      if (SetExtraData != other.SetExtraData) return false;
      if (Version != other.Version) return false;
      if (Name != other.Name) return false;
      if (ThumbnailImage != other.ThumbnailImage) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (ExtraData != other.ExtraData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityNetworkId.Length != 0) hash ^= IdentityNetworkId.GetHashCode();
      if (SetVersion != false) hash ^= SetVersion.GetHashCode();
      if (SetName != false) hash ^= SetName.GetHashCode();
      if (SetThumbnailImage != false) hash ^= SetThumbnailImage.GetHashCode();
      if (SetLocation != false) hash ^= SetLocation.GetHashCode();
      if (SetExtraData != false) hash ^= SetExtraData.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ThumbnailImage.Length != 0) hash ^= ThumbnailImage.GetHashCode();
      if (Latitude != 0) hash ^= Latitude.GetHashCode();
      if (Longitude != 0) hash ^= Longitude.GetHashCode();
      if (ExtraData.Length != 0) hash ^= ExtraData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityNetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IdentityNetworkId);
      }
      if (SetVersion != false) {
        output.WriteRawTag(16);
        output.WriteBool(SetVersion);
      }
      if (SetName != false) {
        output.WriteRawTag(24);
        output.WriteBool(SetName);
      }
      if (SetThumbnailImage != false) {
        output.WriteRawTag(32);
        output.WriteBool(SetThumbnailImage);
      }
      if (SetLocation != false) {
        output.WriteRawTag(40);
        output.WriteBool(SetLocation);
      }
      if (SetExtraData != false) {
        output.WriteRawTag(48);
        output.WriteBool(SetExtraData);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Version);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (ThumbnailImage.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(ThumbnailImage);
      }
      if (Latitude != 0) {
        output.WriteRawTag(85);
        output.WriteSFixed32(Latitude);
      }
      if (Longitude != 0) {
        output.WriteRawTag(93);
        output.WriteSFixed32(Longitude);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ExtraData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityNetworkId);
      }
      if (SetVersion != false) {
        size += 1 + 1;
      }
      if (SetName != false) {
        size += 1 + 1;
      }
      if (SetThumbnailImage != false) {
        size += 1 + 1;
      }
      if (SetLocation != false) {
        size += 1 + 1;
      }
      if (SetExtraData != false) {
        size += 1 + 1;
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ThumbnailImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThumbnailImage);
      }
      if (Latitude != 0) {
        size += 1 + 4;
      }
      if (Longitude != 0) {
        size += 1 + 4;
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedProfileChangeItem other) {
      if (other == null) {
        return;
      }
      if (other.IdentityNetworkId.Length != 0) {
        IdentityNetworkId = other.IdentityNetworkId;
      }
      if (other.SetVersion != false) {
        SetVersion = other.SetVersion;
      }
      if (other.SetName != false) {
        SetName = other.SetName;
      }
      if (other.SetThumbnailImage != false) {
        SetThumbnailImage = other.SetThumbnailImage;
      }
      if (other.SetLocation != false) {
        SetLocation = other.SetLocation;
      }
      if (other.SetExtraData != false) {
        SetExtraData = other.SetExtraData;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ThumbnailImage.Length != 0) {
        ThumbnailImage = other.ThumbnailImage;
      }
      if (other.Latitude != 0) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0) {
        Longitude = other.Longitude;
      }
      if (other.ExtraData.Length != 0) {
        ExtraData = other.ExtraData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityNetworkId = input.ReadBytes();
            break;
          }
          case 16: {
            SetVersion = input.ReadBool();
            break;
          }
          case 24: {
            SetName = input.ReadBool();
            break;
          }
          case 32: {
            SetThumbnailImage = input.ReadBool();
            break;
          }
          case 40: {
            SetLocation = input.ReadBool();
            break;
          }
          case 48: {
            SetExtraData = input.ReadBool();
            break;
          }
          case 58: {
            Version = input.ReadBytes();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 74: {
            ThumbnailImage = input.ReadBytes();
            break;
          }
          case 85: {
            Latitude = input.ReadSFixed32();
            break;
          }
          case 93: {
            Longitude = input.ReadSFixed32();
            break;
          }
          case 98: {
            ExtraData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Information about the removal of an existing profile that is to be shared with a neighbor.
  /// </summary>
  public sealed partial class SharedProfileDeleteItem : pb::IMessage<SharedProfileDeleteItem> {
    private static readonly pb::MessageParser<SharedProfileDeleteItem> _parser = new pb::MessageParser<SharedProfileDeleteItem>(() => new SharedProfileDeleteItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedProfileDeleteItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Homenode.IopHomeNodeReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileDeleteItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileDeleteItem(SharedProfileDeleteItem other) : this() {
      identityNetworkId_ = other.identityNetworkId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedProfileDeleteItem Clone() {
      return new SharedProfileDeleteItem(this);
    }

    /// <summary>Field number for the "identityNetworkId" field.</summary>
    public const int IdentityNetworkIdFieldNumber = 1;
    private pb::ByteString identityNetworkId_ = pb::ByteString.Empty;
    /// <summary>
    ///  The identity's network identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityNetworkId {
      get { return identityNetworkId_; }
      set {
        identityNetworkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedProfileDeleteItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedProfileDeleteItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdentityNetworkId != other.IdentityNetworkId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdentityNetworkId.Length != 0) hash ^= IdentityNetworkId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityNetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(IdentityNetworkId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdentityNetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityNetworkId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedProfileDeleteItem other) {
      if (other == null) {
        return;
      }
      if (other.IdentityNetworkId.Length != 0) {
        IdentityNetworkId = other.IdentityNetworkId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IdentityNetworkId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
