#
# This is configuration file for Profile Server C# implementation.
#
# Empty lines and lines with first non-space character '#' are skipped.
# All other lines are expected to be in form of name-value pairs separated by equal sign.
# Values may contain equal sign as only the first equal sign on the line is considered as a separator.
#
# Both names and values are trimmed before used, which means that line containing
#
# 'name=value'
#
# and 
#
# '  name =  value '
# 
# are equal.
#


#
# server_interface specifies an interface on which the TCP servers will listen on.
# To listen on all available interfaces, use special value 'any'.
#
# Examples:
#
# server_interface = any
# server_interface = 127.0.0.1
# server_interface = ::1
#
server_interface = any


#
# Server role interfaces. Each profile server implements different roles.
# Some roles are provided over TLS, other are provided unencrypted.
# Each role can be served on different port, but compatible roles can be served 
# on a single port. Two roles are compatible if they are both served unencrypted 
# or both are served encrypted.
#

#
# Primary Interface server role is an unencrypted TCP service that servers
# as the primary contact point and where clients can learn about server roles 
# the profile server is providing.
#
# Examples:
#
# primary_interface_port = 16987
#
primary_interface_port = 16987

# 
# Neighbors Interface server role is an encrypted TCP service 
# for communication with neighbor profile servers.
#
# Examples:
#
# server_neighbor_interface_port = 16988
#
server_neighbor_interface_port = 16988


#
# Non Customer Clients Interface server role is an encrypted TCP service
# for communication with clients who are not customers of the profile server.
#
# Examples:
#
# client_non_customer_interface_port = 16988
#
client_non_customer_interface_port = 16988


#
# Customer Clients Interface server role is an encrypted TCP service 
# for communication with clients who are customers of the profile server.
#
# Examples:
#
# client_customer_interface_port = 16988
#
client_customer_interface_port = 16988



#
# Application Service Interface server role is an encrypted TCP service 
# that provides ability to call a customer using its application service.
#
# Examples:
#
# client_app_service_interface_port = 16988
#
client_app_service_interface_port = 16988


#
# tls_server_certificate specifies a file which contains a self-signed PFX (PKCS#12) certificate
# that is used on encrypted TCP services. 
#
# The file must not be password protected.
#
# To generate PFX certificate, you can use OpenSSL:
#
#   openssl req -x509 -newkey rsa:4096 -keyout ProfileServer.key -out ProfileServer.cer -days 365000
#   openssl pkcs12 -export -out ProfileServer.pfx -inkey ProfileServer.key -in ProfileServer.cer
#
#
# Examples:
#
# tls_server_certificate = ProfileServer.pfx
# tls_server_certificate = C:\directory\ProfileServer.pfx
# tls_server_certificate = /directory/ProfileServer.pfx
#
tls_server_certificate=ProfileServer.pfx



#
# image_data_folder specifies a directory where image data will be stored.
#
# Examples:
#
# image_data_folder = images
# image_data_folder = C:\directory\images
# image_data_folder = /directory/images
#
image_data_folder = images


#
# max_hosted_identities sets a limit on the total number of identities which the profile server can host.
# Due to protocol limitations, this number must not be greater than 20,000.
#
# Examples:
#
# max_hosted_identities = 10000
#
max_hosted_identities = 10000


#
# max_identity_relations sets a limit on the number of relations to other identities that a hosted identity 
# can announce to its profile server. This setting must not exceed the protocol limit of 2000 relations.
#
# Examples: 
#
# max_identity_relations = 100
#
max_identity_relations = 100


#
# neighborhood_initialization_parallelism is maximal number of parallel neighborhood initialization processes
# that can occur. If a new neighborhood initialization request is received when the limit is reached, 
# the profile server will not accept it and the requestor will have to try later. A neighborhood initialization 
# process is a resource heavy operation and a single initialization process can consume up to 10 MB of RAM.
#
# Examples: 
#
# neighborhood_initialization_parallelism = 10
#
neighborhood_initialization_parallelism = 10


# 
# lbn_port specifies the TCP port, on which the profile server will expect Location Based Network (LBN) 
# server to be operating on the localhost interface. The profile server connects to LBN port during its initialization.
# 
# Examples:
# 
# lbn_port = 4567
# 
lbn_port = 4567
