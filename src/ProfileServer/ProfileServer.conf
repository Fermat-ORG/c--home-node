#
# This is configuration file for Profile Server C# implementation.
#
# Empty lines and lines with first non-space character '#' are skipped.
# All other lines are expected to be in form of name-value pairs separated by equal sign.
# Values may contain equal sign as only the first equal sign on the line is considered as a separator.
#
# Both names and values are trimmed before used, which means that line containing
#
# 'name=value'
#
# and 
#
# '  name =  value '
# 
# are equal.
#
#
# Names and values are case sensitive.
#



#
# test_mode is an internal settings that switches the server's test mode on and off. If it is on, the server 
# is allowed to violate protocol as some limitations are removed. This should always be off in the production network.
#
# Examples: 
#
# test_mode = on
# test_mode = off
#
test_mode = off


#
# server_interface specifies an interface on which the TCP servers will listen on.
# This has to be an IP address of an external, publicly accessible interface,
# i.e. it should not be a local network or localhost address.
#
# Examples:
#
# server_interface = 198.51.100.53
# server_interface = 2001:db8::1
#
server_interface = 127.0.0.1


#
# Server role interfaces. Each profile server implements different roles.
# Some roles are provided over TLS, other are provided unencrypted.
# Each role can be served on different port, but compatible roles can be served 
# on a single port. Two roles are compatible if they are both served unencrypted 
# or both are served encrypted.
#

#
# Primary Interface server role is an unencrypted TCP service that servers
# as the primary contact point and where clients can learn about server roles 
# the profile server is providing.
#
# Examples:
#
# primary_interface_port = 16987
#
primary_interface_port = 16987

# 
# Neighbors Interface server role is an encrypted TCP service 
# for communication with neighbor profile servers.
#
# Examples:
#
# server_neighbor_interface_port = 16988
#
server_neighbor_interface_port = 16988


#
# Non Customer Clients Interface server role is an encrypted TCP service
# for communication with clients who are not customers of the profile server.
#
# Examples:
#
# client_non_customer_interface_port = 16988
#
client_non_customer_interface_port = 16988


#
# Customer Clients Interface server role is an encrypted TCP service 
# for communication with clients who are customers of the profile server.
#
# Examples:
#
# client_customer_interface_port = 16988
#
client_customer_interface_port = 16988



#
# Application Service Interface server role is an encrypted TCP service 
# that provides ability to call a customer using its application service.
#
# Examples:
#
# client_app_service_interface_port = 16988
#
client_app_service_interface_port = 16988


#
# tls_server_certificate specifies a file which contains a self-signed PFX (PKCS#12) certificate
# that is used on encrypted TCP services. 
#
# The file must not be password protected.
#
# To generate PFX certificate, you can use OpenSSL:
#
#   openssl req -x509 -newkey rsa:4096 -keyout ProfileServer.key -out ProfileServer.cer -days 365000
#   openssl pkcs12 -export -out ProfileServer.pfx -inkey ProfileServer.key -in ProfileServer.cer
#
#
# Examples:
#
# tls_server_certificate = ProfileServer.pfx
# tls_server_certificate = C:\directory\ProfileServer.pfx
# tls_server_certificate = /directory/ProfileServer.pfx
#
tls_server_certificate = ProfileServer.pfx



#
# image_data_folder specifies a directory where image data will be stored.
# The profile server process must have read, write and delete access rights to this folder.
#
# Examples:
#
# image_data_folder = images
# image_data_folder = C:\directory\images
# image_data_folder = /directory/images
#
image_data_folder = images


#
# tmp_data_folder specifies a temporary directory where temporary data will be stored.
# The profile server process must have read, write and delete access rights to this folder.
#
# Examples:
#
# tmp_data_folder = tmp
# tmp_data_folder = C:\directory\tmp
# tmp_data_folder = /tmp/iop
#
tmp_data_folder = tmp


#
# max_hosted_identities sets a limit on the total number of identities which the profile server can host.
# Due to protocol limitations, this number must not be greater than 20,000. 
#
# Note that the profile servers share its profile databases with its neighbors and this setting does not 
# affect the number of profiles that the profile server can receive from other servers. 
#
# Examples:
#
# max_hosted_identities = 10000
#
max_hosted_identities = 10000


#
# max_identity_relations sets a limit on the number of relations to other identities that a hosted identity 
# can announce to its profile server. This setting must not exceed the protocol limit of 2000 relations.
#
# Examples: 
#
# max_identity_relations = 100
#
max_identity_relations = 100


#
# neighborhood_initialization_parallelism is maximal number of parallel neighborhood initialization processes
# that can occur. If a new neighborhood initialization request is received when the limit is reached, 
# the profile server will not accept it and the requestor will have to try later. A neighborhood initialization 
# process is a resource heavy operation and a single initialization process can consume up to 10 MB of RAM.
#
# Examples: 
#
# neighborhood_initialization_parallelism = 10
#
neighborhood_initialization_parallelism = 10


# 
# loc_port specifies the TCP port, on which the profile server will expect Location Based Network (LOC) 
# server to be operating on the localhost interface. The profile server connects to LOC port during its initialization.
# 
# Examples:
# 
# loc_port = 16980
# 
loc_port = 16980


#
# neighbor_profiles_expiration_time is a time in seconds between the last update of shared profiles received from 
# a neighbor server up to the point when the profile server is allowed to delete the profiles if they were not 
# refreshed. The minimal value defined by protocol is 24 hours (i.e. 86400 seconds).
#
# Examples: 
#
# neighbor_profiles_expiration_time = 86400
#
neighbor_profiles_expiration_time = 86400


#
# max_neighborhood_size is a maximum number of neighbors that the profile server will accept in its neighborhood.
# This number has to include a possible buffer for situations in which new servers appear in the neighborhood 
# and are accepted to the neighborhood over the intended limit, which is later restored by refusal to prolongate 
# the neighborhood relationship with some other servers. For an intended limit of 100 neighbors, we set this value 
# to 110, which gives us 10 % overfull buffer. This value must be at least 105.
#
# Examples: 
#
# max_neighborhood_size = 110
#
max_neighborhood_size = 110


#
# max_follower_servers_count is a maximum number of follower servers that the profile server is willing to share 
# its own profile database with. This number has to be greater or equal to max_neighborhood_size.
#
# Examples: 
#
# max_follower_servers_count = 200
#
max_follower_servers_count = 200


#
# follower_refresh_time is a time in seconds between the last refresh sent to a follower server that 
# the profile server shares its profile database with. The refresh is sent in order for the follower server 
# not to delete the shared profiles. The minimal time after which the follower server is allowed to delete 
# the shared profiles is 24 hours (i.e. 86400 seconds), hence follower_refresh_time value must be less than 
# 24 hours and it is recommended that there is a significant time reserve to prevent accidental removal of 
# the shared profiles.
#
# Examples: 
#
# follower_refresh_time = 43200
#
follower_refresh_time = 43200


# 
# can_api_port specifies the TCP port, on which the profile server will expect Content Address Network (CAN) 
# server to be operating on the localhost interface. The profile server connects to CAN port during its initialization
# and then every time it needs to upload a new object to CAN.
# 
# Examples:
# 
# can_api_port = 15001
# 
can_api_port = 15001
